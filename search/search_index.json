{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Me","text":"<ul> <li>Undergraduate student in software engineering</li> <li>edwardwq301@gmail.com</li> <li>hobbies: read science fiction, acgn, play game</li> </ul>"},{"location":"guide/","title":"Guide","text":"<p>\u200b\u9690\u85cf\u200b\u4fa7\u8fb9\u200b\u680f\u200b \u200b\u5bf9\u4e8e\u200b\u5177\u6709\u200b\u524d\u8a00\u200b\u5c5e\u6027\u200b\u7684\u200b\u6587\u6863\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u9690\u85cf\u200b\u5bfc\u822a\u200b\u548c\u200b/\u200b\u6216\u200b\u76ee\u5f55\u200b\u4fa7\u8fb9\u200b\u680f\u200b\u3002\u200b\u5728\u200b Markdown \u200b\u6587\u4ef6\u200b\u7684\u200b\u9876\u90e8\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b <pre><code>---\nhide:\n  - navigation\n  - toc\n  - path\n---\n</code></pre></p> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! </li> </ol> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ul> <li>note</li> <li>abstract</li> <li>info</li> <li>tip</li> <li>success</li> <li>question</li> <li>warning</li> <li>failure</li> <li>danger</li> <li>bug</li> <li>example</li> <li>quote</li> </ul> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"backend/Java/","title":"Java","text":""},{"location":"backend/Java/#_1","title":"\u5b89\u88c5","text":"<p>vscode\u200b\u7684\u8bdd\u200b\u76f4\u63a5\u200b\u628a\u200bjdk\u200b\u5b89\u88c5\u200b\uff08\u200b\u4e00\u76f4\u200b\u4e0b\u200b\u4e00\u6b65\u200b\u5c31\u200b\u6ca1\u200b\u51fa\u9519\u200b\uff0c\u200b\u88c5\u200b\u5230\u200b\u6307\u5b9a\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\u5c31\u200b\u603b\u6709\u200b\u95ee\u9898\u200b\ud83d\ude05\uff09\uff0c\u200b\u8fd8\u662f\u200b\u76f4\u63a5\u200b\u4e0a\u200bide\u200b\u6bd4\u8f83\u200b\u65b9\u4fbf\u200b</p>"},{"location":"backend/Java/#_2","title":"\u611f\u60f3","text":"<p>Java\u200b\u6bd4\u200bC++\u200b\u66f4\u52a0\u200b\u7e41\u7410\u200b\uff0c\u200b\u5199\u200b\u8d77\u6765\u200b\u9ebb\u70e6\u200b\uff0c\u200b\u76f8\u5bf9\u200b\u7684\u200b\u66f4\u52a0\u200b\u9762\u5411\u5bf9\u8c61\u200b \u200b\u8fd8\u200b\u4e0d\u662f\u200b\u5f88\u200b\u6e05\u695a\u200bJava\u200b\u7684\u200b\u5f15\u7528\u200b\u548c\u200bC++\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u5f15\u7528\u200b\u7684\u200b\u533a\u522b\u200b</p>"},{"location":"backend/Java/#note","title":"note","text":""},{"location":"backend/Java/#part1","title":"part1","text":"<ul> <li>\u200b\u53d8\u91cf\u200b\u90fd\u200b\u662f\u200b\u5bf9\u8c61\u200b\u7684\u200b\u5f15\u7528\u200b</li> <li>\u200b\u53ea\u6709\u200b\u57fa\u672c\u200b\u7c7b\u578b\u200b\u4e0d\u662f\u200b\u5bf9\u8c61\u200b</li> <li>\u200b\u6240\u6709\u200b\u53c2\u6570\u200b\u90fd\u200b\u662f\u200b\u503c\u200b\u4f20\u9012\u200b</li> <li>\u200b\u4e00\u4e2a\u200b\u65b9\u6cd5\u200b\u4e0d\u80fd\u200b\u4fee\u6539\u200b\u57fa\u672c\u200b\u6570\u636e\u7c7b\u578b\u200b\u7684\u200b\u53c2\u6570\u200b</li> <li>\u200b\u4e00\u4e2a\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u6539\u53d8\u200b\u5bf9\u8c61\u200b\u53c2\u6570\u200b\u7684\u200b\u72b6\u6001\u200b</li> <li>\u200b\u4e0d\u80fd\u200b\u8ba9\u200b\u5bf9\u8c61\u200b\u53c2\u6570\u200b\u5f15\u7528\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u5bf9\u8c61\u200b\uff08\u200b\u505a\u200b\u4e0d\u5230\u200bswap\uff09</li> </ul> \u200b\u4f8b\u5b50\u200b <pre><code>  public class Main {\n\n    public static void main(String[] args) {\n        employee ashen = new employee(100);\n        testPara(ashen);\n        /*\n        \u200b\u4f20\u200b\u7684\u200b\u662f\u200bashen\u200b\u7684\u200b\u590d\u5236\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u590d\u5236\u200b\u4e5f\u200b\u5f15\u7528\u200b\u4e86\u200b\u90a3\u4e2a\u200b\u5bf9\u8c61\u200b\n        \u200b\u6240\u4ee5\u200b\u80fd\u200b\u4fee\u6539\u200bsalary\n        */\n        System.out.println(\"para x\");\n        int testX = 10;\n        minus2(testX);\n        /*\n        \u200b\u4f20\u200b\u7684\u200b\u662f\u200btestX\u200b\u503c\u200b\u7684\u200b\u590d\u5236\u200b\uff0c\u200b\u6700\u540e\u200b\u4e0d\u4f1a\u200b\u4fee\u6539\u200btestX\n         */\n        System.out.println(testX);\n    }\n\n    public static void testPara(employee e1) {\n        e1.showSalary();\n        e1.raiseSalary(100);\n        e1.showSalary();\n    }\n\n    public static void minus2(int x) {\n        System.out.println(\"para is \" + x);\n        x = x - 2;\n        System.out.println(\"para changed is \" + x);\n    }\n}\n\nclass employee {\n\n    private int salary;\n\n    public employee(int salary) {\n        this.salary = salary;\n    }\n\n    public void raiseSalary(int adding) {\n        salary += adding;\n    }\n\n    public void showSalary() {\n        System.out.println(salary);\n    }\n}\n</code></pre>"},{"location":"backend/Java/#part2","title":"part2","text":"<ul> <li><code>static</code>\u200b\u662f\u200b\u7c7b\u200b\u5171\u4eab\u200b\u7684\u200b\uff0c\u200b\u548c\u200bC++\u200b\u4e00\u6837\u200b</li> <li>\u200b\u66f4\u6539\u200b\u5668\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8bbf\u95ee\u200b\u5668\u200b\u65b9\u6cd5\u200b</li> <li>\u200b\u6bcf\u4e2a\u200b\u7c7b\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u6709\u200b\u4e00\u4e2a\u200b\u9759\u6001\u200bmain\u200b\u6765\u200b\u6d4b\u8bd5\u200b</li> <li>\u200b\u597d\u50cf\u200bJava\u200b\u4e2d\u200b\u6ca1\u6709\u200b\u51fd\u6570\u53c2\u6570\u200b\u7f3a\u7701\u200b\u7684\u200b\u529f\u80fd\u200b</li> <li>\u200b\u5305\u88c5\u200b\u4e0d\u80fd\u200b\u901a\u8fc7\u200b\u5f3a\u5236\u200b\u7c7b\u578b\u8f6c\u6362\u200b\u6210\u200b\u57fa\u672c\u200b\u7c7b\u578b\u200b\uff0c\u200b\u9700\u8981\u200b\u7528\u200bintValue<ul> <li>\u200b\u6bd4\u8f83\u200b\u7528\u200bequals,\u200b\u4e0d\u7528\u200b==</li> </ul> </li> <li>\u200b\u5b50\u7c7b\u200b\u7ee7\u627f\u200b\u6784\u9020\u51fd\u6570\u200b\u65f6\u200b\u53ea\u200b\u7ee7\u627f\u200b\u4e86\u200b\u9ed8\u8ba4\u200b\u6784\u9020\u51fd\u6570\u200b\uff08\u200b\u65e0\u53c2\u200b\uff09\uff0c\u200b\u4f46\u662f\u200b\u53ef\u4ee5\u200b<code>super(x,y)</code>\u200b\u8c03\u7528\u200b\u7236\u7c7b\u200b\u7684\u200b\u6709\u200b\u53c2\u200b\u6784\u9020\u51fd\u6570\u200b</li> <li>final\u200b\u5b9a\u4e49\u200b\u7684\u200b\u7c7b\u200b\u65e0\u6cd5\u200b\u518d\u200b\u6d3e\u751f\u200b\uff0cfinal\u200b\u5b9a\u4e49\u200b\u7684\u200b\u51fd\u6570\u200b\u4e0d\u80fd\u200b\u91cd\u5199\u200b</li> <li>Java\u200b\u4e0d\u200b\u652f\u6301\u200b\u591a\u91cd\u200b\u7ee7\u627f\u200b\uff0c\u200b\u90a3\u200b\u6211\u200b\u60f3\u200b\u8fbe\u5230\u200b\u8fd9\u4e2a\u200b\u6548\u679c\u200b\u8be5\u200b\u600e\u4e48\u529e\u200b\uff0c\u200b\u5c31\u200b\u5f15\u51fa\u200b\u63a5\u53e3\u200b\u7684\u200b\u7528\u9014\u200b\u3002\u200b\u63a5\u53e3\u200b\u53ef\u4ee5\u200b\u770b\u6210\u200b\u548c\u200b\u7c7b\u200b\u5e73\u7ea7\u200b\u3002</li> <li>\u200b\u63a5\u53e3\u200b\u4e0d\u662f\u200b\u7c7b\u200b\uff0c\u200b\u4f46\u662f\u200b\u53ef\u4ee5\u200b\u58f0\u660e\u200b\u63a5\u53e3\u7c7b\u578b\u200b\u7684\u200b\u53d8\u91cf\u200b\uff0c\u200b\u5e76\u7528\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u63a5\u53e3\u200b\u7684\u200b\u7c7b\u200b\u53bb\u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b\u53d8\u91cf\u200b</li> </ul> Java8\u200b\u5f00\u59cb\u200b\u7684\u200b\u63a5\u53e3\u200b \u200b\u524d\u7f00\u200bdefault\u200b\u65b9\u6cd5\u200b \u200b\u53ef\u200b\u7ee7\u627f\u200b\uff0c\u200b\u4e0d\u53ef\u200b\u91cd\u5199\u200b static\u200b\u5c5e\u6027\u200b\uff08\u200b\u53d8\u91cf\u200b\uff09 \u200b\u9ed8\u8ba4\u200b\u662f\u200b\u7ec8\u6001\u200b\uff0cfinal\u200b\u53ef\u200b\u52a0\u200b\u53ef\u4e0d\u200b\u52a0\u200b static\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u91cd\u5199\u200b \u200b\u4e0d\u80fd\u200b\u88ab\u200b\u7ee7\u627f\u200b,\u200b\u63a5\u53e3\u200b\u7684\u200b\u9759\u6001\u65b9\u6cd5\u200b\u548c\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u7684\u200b\u9759\u6001\u65b9\u6cd5\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u8054\u7cfb\u200b\uff0c\u200b\u53ea\u662f\u200b\u6070\u597d\u200b\u540d\u5b57\u200b\u4e00\u6837\u200b \u200b\u4fee\u9970\u7b26\u200b private \u200b\u4ec5\u200b\u5bf9\u200b\u672c\u7c7b\u200b\u53ef\u89c1\u200b public \u200b\u6240\u6709\u200b\u7c7b\u200b\u53ef\u89c1\u200b protected \u200b\u672c\u5305\u200b\u548c\u200b\u6240\u6709\u200b\u7c7b\u200b\u53ef\u89c1\u200b \u200b\u9ed8\u8ba4\u200b \u200b\u672c\u5305\u200b interface example <pre><code>import java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        eagle e1 = new eagle(\"peter\");\n        eagle e2 = new eagle(\"ash\");\n        System.out.println(\"\" + e1.getName() + \" \" + e1.getTotalCount());\n        System.out.println(\"\" + e2.getName() + \" \" + e2.getTotalCount());\n        e1.flying();\n        //\u200b\u6b64\u5904\u200b\u7684\u200bgetHeight\u200b\u662f\u200beagle\u200b\u81ea\u5df1\u200b\u7684\u200b\uff0c\n        // \u200b\u4e0d\u662f\u200b\u63a5\u53e3\u200b\u7684\u200b\uff0c\u200b\u53ea\u662f\u200b\u540d\u5b57\u200b\u6070\u597d\u200b\u4e00\u6837\u200b\n        e1.getHeight();\n        //\u200b\u53ea\u80fd\u200b\u4ece\u200b\u63a5\u53e3\u200b\u8bbf\u95ee\u200b\n        fly.getHeight();\n    }\n}\n\ninterface fly {\n    default public void flying() {\n        System.out.println(\"flying\");\n    }\n\n    static void getHeight() {\n        Random random = new Random();\n        int height = random.nextInt(100);\n        System.out.println(height);\n    }\n}\n\nclass eagle implements fly {\n    static int totalCount;\n    String name;\n\n    eagle(String name) {\n        this.name = name;\n        totalCount++;\n    }\n\n    public void getHeight() {\n        Random random = new Random();\n        int height = random.nextInt(100);\n        System.out.println(height);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getTotalCount() {\n        return totalCount;\n    }\n}\n</code></pre>"},{"location":"backend/Java/#part3","title":"part3","text":"<ul> <li>\u200b\u51fd\u6570\u200b\u5f0f\u200b\u63a5\u53e3\u200b:\u200b\u4e00\u4e2a\u200b\u63a5\u53e3\u200b\u6709\u4e14\u200b\u4ec5\u200b\u6709\u200b\u4e00\u4e2a\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b (\u200b\u6e90\u5730\u5740\u200b)[https://github.com/aqi00/java/blob/master/chapter08/src/com/special/function/TestFunctional.java]</li> </ul> Example <pre><code>//\u200b\u6f14\u793a\u200b\u52a8\u7269\u7c7b\u200b\u7684\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u5176\u4e2d\u200bmidnight\u200b\u65b9\u6cd5\u200b\u7684\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b\u4e3a\u200bBehavior\u200b\u7c7b\u578b\u200b\nclass Animal {\n    private String name; // \u200b\u52a8\u7269\u200b\u540d\u79f0\u200b\n\n    public Animal(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    // \u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u534a\u591c\u200b\u884c\u52a8\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002\u200b\u5177\u4f53\u200b\u7684\u200b\u52a8\u4f5c\u200b\u7531\u200b\u8f93\u5165\u200b\u884c\u4e3a\u200b\u7684\u200bact\u200b\u65b9\u6cd5\u200b\u6267\u884c\u200b\n    public void midnight(Behavior behavior) {\n        behavior.act();\n    }\n\n}\n\n\n//\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u884c\u4e3a\u200b\u63a5\u53e3\u200b\uff0c\u200b\u7ed9\u200b\u52a8\u7269\u7c7b\u200b\u8c03\u7528\u200b\ninterface Behavior {\n    public void act(); // \u200b\u58f0\u660e\u200b\u4e00\u4e2a\u200b\u540d\u53eb\u200b\u884c\u52a8\u200b\u7684\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b\n}\n\n\n//\u200b\u6f14\u793a\u200b\u5916\u90e8\u200b\u5982\u4f55\u200b\u8c03\u7528\u51fd\u6570\u200b\u5f0f\u200b\u63a5\u53e3\u200b\npublic class main {\n\n    public static void main(String[] args) {\n        testCock(); // \u200b\u6d4b\u8bd5\u200b\u516c\u9e21\u200b\u5728\u200b\u534a\u591c\u200b\u5e72\u200b\u4e86\u200b\u5565\u200b\n        testCat(); // \u200b\u6d4b\u8bd5\u200b\u8001\u732b\u200b\u5728\u200b\u534a\u591c\u200b\u5e72\u200b\u4e86\u200b\u5565\u200b\n        testPig(); // \u200b\u6d4b\u8bd5\u200b\u732a\u4ed4\u200b\u5728\u200b\u534a\u591c\u200b\u5e72\u200b\u4e86\u200b\u5565\u200b\n    }\n\n    // \u200b\u6d4b\u8bd5\u200b\u516c\u9e21\u200b\u5728\u200b\u534a\u591c\u200b\u5e72\u200b\u4e86\u200b\u5565\u200b\n    private static void testCock() {\n        Animal cock = new Animal(\"\u200b\u516c\u9e21\u200b\"); // \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u516c\u9e21\u200b\u5b9e\u4f8b\u200b\n        // \u200b\u8c03\u7528\u200bmidnight\u200b\u65b9\u6cd5\u200b\u65f6\u200b\uff0c\u200b\u4f20\u5165\u200b\u533f\u540d\u200b\u5185\u90e8\u200b\u7c7b\u200b\u7684\u200b\u5b9e\u4f8b\u200b\n        cock.midnight(new Behavior() {\n            @Override\n            public void act() {\n                System.out.println(cock.getName() + \"\u200b\u5728\u200b\u53eb\u200b\u5566\u200b\u3002\");\n            }\n        });\n        // \u200b\u8c03\u7528\u200bmidnight\u200b\u65b9\u6cd5\u200b\u65f6\u200b\uff0c\u200b\u4f20\u5165\u200bLambda\u200b\u8868\u8fbe\u5f0f\u200b\u7684\u200b\u4ee3\u7801\u200b\u3002\n        // \u200b\u533f\u540d\u200b\u65b9\u6cd5\u200b\u4e0d\u200b\u5b58\u5728\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b\u7684\u8bdd\u200b\uff0c\u200b\u4e5f\u200b\u8981\u200b\u4fdd\u7559\u200b\u4e00\u5bf9\u200b\u5706\u62ec\u53f7\u200b\u5360\u200b\u4f4d\u5b50\u200b\u3002\n        cock.midnight(() -&gt; System.out.println(cock.getName() + \"\u200b\u5728\u200b\u53eb\u200b\u5566\u200b\u3002\"));\n    }\n\n    // \u200b\u6d4b\u8bd5\u200b\u8001\u732b\u200b\u5728\u200b\u534a\u591c\u200b\u5e72\u200b\u4e86\u200b\u5565\u200b\n    private static void testCat() {\n        Animal cat = new Animal(\"\u200b\u8001\u732b\u200b\"); // \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u8001\u732b\u200b\u5b9e\u4f8b\u200b\n        // \u200b\u8c03\u7528\u200bmidnight\u200b\u65b9\u6cd5\u200b\u65f6\u200b\uff0c\u200b\u4f20\u5165\u200bLambda\u200b\u8868\u8fbe\u5f0f\u200b\u7684\u200b\u4ee3\u7801\u200b\n        cat.midnight(() -&gt; System.out.println(cat.getName() + \"\u200b\u5728\u200b\u6349\u200b\u8001\u9f20\u200b\u3002\"));\n    }\n\n    // \u200b\u6d4b\u8bd5\u200b\u732a\u4ed4\u200b\u5728\u200b\u534a\u591c\u200b\u5e72\u200b\u4e86\u200b\u5565\u200b\n    private static void testPig() {\n        Animal pig = new Animal(\"\u200b\u732a\u4ed4\u200b\"); // \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u732a\u4ed4\u200b\u5b9e\u4f8b\u200b\n        // \u200b\u8c03\u7528\u200bmidnight\u200b\u65b9\u6cd5\u200b\u65f6\u200b\uff0c\u200b\u4f20\u5165\u200bLambda\u200b\u8868\u8fbe\u5f0f\u200b\u7684\u200b\u4ee3\u7801\u200b\n        pig.midnight(() -&gt; System.out.println(pig.getName() + \"\u200b\u5728\u200b\u547c\u547c\u5927\u7761\u200b\u3002\"));\n    }\n\n}\n</code></pre> <ul> <li>Java8\u200b\u5f00\u59cb\u200b\uff0c\u200b\u6bcf\u79cd\u200b\u5bb9\u5668\u200b\u90fd\u200b\u652f\u6301\u200b<code>forEach</code>\u200b\u548c\u200blambda\u200b\u8868\u8fbe\u5f0f\u200b\u8054\u5408\u200b\u4f7f\u7528\u200b</li> </ul> Exemple <pre><code>import java.util.HashMap;\nimport java.util.HashSet;\n\npublic class Employee {\n    public static void main(String[] args) {\n        HashMap&lt;String, Employee&gt; map = new HashMap&lt;String, Employee&gt;();\n        map.put(\"boss\", new Employee(\"wq\"));\n        map.put(\"clerk\", new Employee(\"jyy\"));\n\n        map.forEach((String key, Employee value) -&gt; System.out.printf(\"%s,%s\\n\", key, value.getName()));\n\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    String name;\n\n    Employee(String name) {\n        this.name = name;\n    }\n}\n</code></pre>"},{"location":"backend/Java/#part4","title":"part4","text":"<ul> <li>\u200b\u5f02\u5e38\u200btry catch finally(\u200b\u65e0\u8bba\u662f\u200b\u6267\u884c\u200b\u4e86\u200btry\u200b\u8fd8\u662f\u200bcatch\uff0c\u200b\u90fd\u200b\u8981\u200b\u6267\u884c\u200bfinally\u200b\u7684\u200b\u8bed\u53e5\u200b)</li> <li>\u200b\u901a\u8fc7\u200b\u53cd\u5c04\u200b\u64cd\u4f5c\u200b\u5bf9\u8c61\u200b\u7684\u200b\u79c1\u6709\u200b\u5c5e\u6027\u200b\u6216\u8005\u200b\u79c1\u6709\u200b\u65b9\u6cd5\u200b\u3002\u200b\u5148\u200b\u83b7\u53d6\u200bClass,\u200b\u518d\u200b\u83b7\u53d6\u200bField\uff0csetAccessible,setInt\u3002</li> <li></li> </ul>"},{"location":"backend/Java/#todo","title":"TODO","text":"<ul> <li> <code>Comparator</code>\u200b\u7684\u200b\u952e\u200b\u63d0\u53d6\u200b\u5668\u200b\u51fd\u6570\u200b v10page242</li> <li> \u200b\u6cdb\u578b\u200b\u63a5\u53e3\u200b\uff08\u200b\u65ad\u8a00\u200b\u63a5\u53e3\u200b\uff0c\u200b\u6d88\u8d39\u200b\u63a5\u53e3\u200b\uff0c\u200b\u51fd\u6570\u200b\u63a5\u53e3\u200b\uff09</li> </ul>"},{"location":"backend/Java/#qa","title":"Q&amp;A","text":""},{"location":"backend/Java/#nullequalnull","title":"==null\u200b\u548c\u200b.equal(null)\u200b\u7684\u200b\u533a\u522b","text":"<p>\u200b\u7b80\u5355\u200b\u6765\u8bf4\u200b\uff0c<code>==null</code>\u200b\u770b\u200b\u7684\u200b\u662f\u4e0d\u662f\u200b\u540c\u4e00\u4e2a\u200b\u5f15\u7528\u200b\uff0c<code>.equal()</code>\u200b\u662f\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5982\u679c\u200b\u5b83\u200b\u672c\u8eab\u200b\u662f\u200bnull\uff0c\u200b\u90a3\u200b\u5c31\u200b\u4f1a\u200b\u5f15\u53d1\u200bNullPointerException\u3002\u200b\u770b\u200b\u662f\u4e0d\u662f\u200bnull\uff0c\u200b\u76f4\u63a5\u200b\u7528\u200b<code>==null</code>\u200b\u6216\u8005\u200b<code>Objects.equals(onePossibleNull, twoPossibleNull)</code>\u200b\u5c31\u884c\u4e86\u200b</p>"},{"location":"backend/Java/#_3","title":"\u81ea\u5b9a\u4e49\u200b\u6bd4\u8f83","text":"<ol> <li>\u200b\u5728\u200b\u7c7b\u200b\u4e2d\u200b\u5e94\u7528\u200b<code>Comparable&lt;someClass&gt;</code>\u200b\u63a5\u53e3\u200b\uff0c\u200b\u91cd\u5199\u200b<code>public int compareTo(someClass s2)</code>\uff0c\u200b\u6765\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u81ea\u5e26\u200b\u6bd4\u8f83\u200b</li> <li>\u200b\u5728\u200b\u9700\u8981\u200b<code>Comparator</code>\u200b\u7684\u200b\u5730\u65b9\u200b\u5199\u200b\u4e00\u4e2a\u200b\u533f\u540d\u200b\u7684\u200b\u7c7b\u200b\u6216\u8005\u200blamada\u200b\u8868\u8fbe\u5f0f\u200b</li> </ol> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u6bd4\u8f83\u200b</p> <pre><code>import java.util.ArrayList;\nimport java.util.Comparator;\n\npublic class main {\n    public static void main(String[] args) {\n        ArrayList&lt;Employee&gt; arrayList = new ArrayList&lt;Employee&gt;();\n        for (int i = 0; i &lt; 4; i++) {\n            String name = \"ename\";\n            for (int j = 0; j &lt; i; j++)\n                name = name + j;\n            Employee employee = new Employee(i, name);\n            arrayList.add(employee);\n        }\n        //\u200b\u901a\u8fc7\u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u65b9\u6cd5\u200b\u81ea\u5e26\u200b\n        arrayList.sort(Employee::compareTo);\n        //new\u200b\u4e00\u4e2a\u200bComparator\u200b\u533f\u540d\u200b\u5185\u90e8\u200b\u7c7b\u200b\n        arrayList.sort(new Comparator&lt;Employee&gt;() {\n            @Override\n            public int compare(Employee o1, Employee o2) {\n                if (o1.getName().length() &gt; o2.getName().length())\n                    return -1;\n                else if (o1.getName().length() &lt; o2.getName().length()) {\n                    return 1;\n                } else\n                    return 0;\n            }\n        });\n\n        //lamada\u200b\u8868\u8fbe\u5f0f\u200b\n        arrayList.sort(((o1, o2) -&gt; o1.name.length()&gt;o2.name.length()?-1:1));\n\n        //lamada\u200b\u8868\u8fbe\u5f0f\u200b\n        arrayList.sort((o1, o2) -&gt; {\n            if (o1.getName().length() &gt; o2.getName().length())\n                return -1;\n            else if (o1.getName().length() &lt; o2.getName().length()) {\n                return 1;\n            } else\n                return 0;\n        });\n    }\n\n\n}\n\nclass Employee implements Comparable&lt;Employee&gt; {\n    public int salary;\n    String name;\n\n    @Override\n    public int compareTo(Employee e2) {\n        if (this.salary &gt; e2.salary) return -1;\n        else if (this.salary &lt; e2.salary) return 1;\n        else return 0;\n    }\n\n    public Employee(int sal, String name) {\n        salary = sal;\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getSalary() {\n        return salary;\n    }\n}\n</code></pre>"},{"location":"backend/Java/#_4","title":"\u6c42\u200b\u4e24\u4e2a\u200b\u65e5\u671f\u200b\u95f4\u9694\u200b\u5929\u6570","text":"<pre><code>LocalDate start=LocalDate.now();\nLocalDate end = LocalDate.of(2025,5,5);\nDuration between = Duration.between(start.atStartOfDay(), end.atStartOfDay());\nSystem.out.println(between.toDays());\n</code></pre>"},{"location":"backend/Java/#javafx","title":"javafx\u200b\u5c55\u793a\u200b\u56fe\u7247","text":"<p>\u200b\u4f20\u9001\u95e8\u200b</p>"},{"location":"backend/Java/#java-scanner","title":"Java scanner\u200b\u5173\u95ed","text":"<p>\u200b\u5982\u679c\u200bscanner\u200b\u7684\u200bsys.in\u200b\u5b9e\u4f8b\u200b\u5173\u95ed\u200b\u4e86\u200b\uff0c\u200b\u5373\u200b<code>\u200b\u5b9e\u4f8b\u200b\u540d\u200b.close()</code>\uff0c\u200b\u4e0d\u80fd\u200b\u518d\u200b\u521b\u5efa\u200bsys.in\u200b\u5b9e\u4f8b\u200b</p> <p>StackOverflow csdn\u200b\u76f8\u5173\u200b</p>"},{"location":"backend/Java/#_5","title":"\u6570\u5b57\u200b\u548c\u200b\u5b57\u7b26\u4e32\u200b\u6df7\u5408\u8f93\u5165","text":"<p>\u200b\u4eca\u5929\u200b\u9047\u5230\u200b\u8fd9\u6837\u200b\u4e00\u4e2a\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5148\u200b\u8f93\u5165\u200b\u6570\u5b57\u200b\uff0c\u200b\u518d\u200b\u8f93\u5165\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u65f6\u5019\u200b\u603b\u662f\u200b\u7a7a\u4e32\u200b\u3002Java\u200b\u8fd9\u4e2a\u200b\u6027\u8d28\u200b\u4e5f\u200b\u592a\u5751\u200b\u4e86\u200b\ud83d\ude21 \u200b\u76f8\u5173\u200b\u89e3\u51b3\u529e\u6cd5\u200b\u4f20\u9001\u95e8\u200b</p>"},{"location":"backend/algorithm/","title":"algorithm","text":""},{"location":"backend/algorithm/#sort","title":"sort","text":"<p>insert sort: In iteration i, swap a[i] with each larger entry to its left.</p> <pre><code>void insertSort(vector&lt;int&gt; &amp;todo) {\n    for (int i = 0; i &lt; todo.size(); ++i) {\n        for (int j = i; j &gt; 0; --j) {\n            if (todo[j] &lt; todo[j - 1])\n                swap(todo[j], todo[j - 1]);\n            else break;\n        }\n    }\n}\n</code></pre> <p>\u200b\u6211\u200b\u770b\u200b\u56fd\u5185\u200b\u633a\u200b\u591a\u200b\u90fd\u200b\u662f\u200b\u5148\u200b\u4e00\u76f4\u200b\u5728\u200b\u8d4b\u503c\u200b\uff0c\u200b\u6700\u540e\u200b\u653e\u200b\u6b63\u786e\u200b\u4f4d\u7f6e\u200b</p> <pre><code>void insertionSort(std::vector&lt;int&gt;&amp; arr) {\n    int n = arr.size();\n    for (int i = 1; i &lt; n; ++i) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n}\n</code></pre> <p>select sort: In iteration i, swap a[i] with proper item.</p> <pre><code>void selectSort(vector&lt;int&gt; &amp;todo) {\n    for (int i = 0; i &lt; todo.size(); i++) {\n        int min = i;\n        for (int j = min + 1; j &lt; todo.size(); j++) {\n            if (todo[j] &lt; todo[min])\n                min = j;\n        }\n        swap(todo[i], todo[min]);\n    }\n}\n</code></pre> <p>shell sort: in insertion sort, some item should move lots step while just move step by step. so we move some item by long distance and shrink the distance </p> <pre><code>void shellSort(vector&lt;int&gt; &amp;todo) {\n    int N = todo.size();\n    int h = 1;\n    while (h &lt; N / 3) h = 3 * h + 1;\n\n    while (h &gt;= 1) {\n        for (int i = h; i &lt; N; i++) {\n            for (int j = i; j &gt;= h &amp;&amp; todo[j] &lt; todo[j - h]; j -= h)\n                swap(todo[j], todo[j - h]);\n        }\n        h = h / 3;\n    }\n}\n</code></pre> <p>bubble sort: \u200b\u6bcf\u8f6e\u200b\u5192\u6ce1\u200b\u7ed3\u675f\u200b\u7684\u200b\u6709\u5e8f\u200b\u90e8\u5206\u200b\u662f\u200b\u5168\u5c40\u200b\u6709\u5e8f\u200b\uff0c\u200b\u63d2\u5165\u6392\u5e8f\u200b\uff08insert sort\uff09\u200b\u662f\u200b\u5c40\u90e8\u200b\u6709\u5e8f\u200b</p> <pre><code>void BubbleSort (vector &lt; int &gt;&amp;num){\n    for (int i = 0; i &lt; num.size (); i++){\n        bool flag = false;\n        for (int j = num.size () - 1; j &gt; i; j--)\n            if (num[j - 1] &gt; num[j]){\n                swap (num[j - 1], num[j]);\n                flag = true;\n            }\n        if (flag == false)\n            return;\n        }\n}\n</code></pre> <p>knuth shuffle: in iteration i, swap a[i] and a[k] (random k in [0, i])</p> <p>\u200b\u975e\u5e38\u200b\u5947\u602a\u200b\uff0c\u200b\u8bfe\u7a0b\u200b\u89c6\u9891\u200b\u94fe\u63a5\u200b\u662f\u200b\u7b2c\u4e00\u79cd\u200b</p> <pre><code>void shuffle(vector&lt;int&gt; &amp;todo) {\n    int N = todo.size();\n    for (int i = 0; i &lt; N; i++) {\n        int k = rand() % (i + 1);   //[0, i]\n        swap(todo[i], todo[k]);\n    }\n}\n</code></pre> <p>\u200b\u7f51\u4e0a\u200b\u5927\u591a\u200b\u662f\u200b\u7b2c\u4e8c\u79cd\u200b\uff0c\u200b\u7ef4\u57fa\u767e\u79d1\u200b\u7ed9\u200b\u7684\u200b\u548c\u200b\u7b2c\u4e00\u79cd\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff0c\u200b\u633a\u200b\u5947\u602a\u200b\u7684\u200b\uff0c\u200b\u4e0d\u200b\u77e5\u9053\u200b\u54ea\u4e2a\u200b\u5bf9\u200b</p> <pre><code>void shuffle(vector&lt;int&gt;&amp; todo){\n    for(int i= todo.size()-1;i&gt;0;i--){\n        int k= rand() % (i+1)\n        swap(todo[i], todo[k])\n    }\n}\n</code></pre> <pre><code>wiki\n\n-- To shuffle an array a of n elements (indices 0..n-1):\nfor i from n\u22121 down to 1 do\n     j \u2190 random integer such that 0 \u2264 j \u2264 i\n     exchange a[j] and a[i]\n\n\n-- To shuffle an array a of n elements (indices 0..n-1):\nfor i from 0 to n\u22122 do\n     j \u2190 random integer such that i \u2264 j &lt; n\n     exchange a[i] and a[j]\n</code></pre>"},{"location":"backend/algorithm/#_1","title":"\u73af\u5f62\u200b\u961f\u5217","text":"<p>\u200b\u5bb9\u91cf\u200b\u4e3a\u200b n \u200b\u7684\u200b\u73af\u5f62\u200b\u961f\u5217\u200b\uff0c\u200b\u8bfb\u5199\u200b\u6307\u9488\u200b\u62d3\u5c55\u200b\u4e3a\u200b <code>\u200b\u539f\u59cb\u200b[0, n-1] \u200b\u955c\u50cf\u200b[n, 2n-1]</code>\u3002\u200b\u5f53\u200b\u6307\u9488\u200b\u503c\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b 2n \u200b\u65f6\u200b\uff0c\u200b\u4f7f\u200b\u5176\u200b\u6298\u8fd4\u200b\u5230\u200b ptr-2n\u3002</p> <p>\u200b\u771f\u6b63\u200b\u8bfb\u5199\u200b\u7684\u200b\u7d22\u5f15\u200b\uff1a<code>in = in % n</code> \u200b\u7b49\u4ef7\u200b\u4e8e\u200b <code>in = in &amp; (in-1)</code></p> <p>\u200b\u5982\u4f55\u200b\u5224\u65ad\u200b\u7a7a\u6ee1\u200b\uff1a</p> <ol> <li>\u200b\u4e24\u4e2a\u200b\u7b26\u53f7\u200b\uff0c\u200b\u5982\u679c\u200b\u8fdb\u5165\u200b\u955c\u50cf\u200b\u5c31\u200b\ud83d\udea9\uff0c\u200b\u4e24\u4e2a\u200b\u7b26\u53f7\u200b\u76f8\u540c\u200b\u8bf4\u660e\u200b\u7a7a\u200b\uff0c\u200b\u4e0d\u540c\u200b\u4e3a\u200b\u6ee1\u200b</li> <li>\u200b\u5982\u679c\u200b\u961f\u5217\u200b\u5bb9\u91cf\u200b\u662f\u200b2\u200b\u7684\u200b\u5e42\u6b21\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4e0d\u7528\u200b\u4e0a\u8fb9\u200b\u4e24\u4e2a\u200b\u7b26\u53f7\u200b\u4f4d\u200b\u3002\u200b\u6539\u8fdb\u200b\u505a\u6cd5\u200b\u4e3a\u200b\uff1a</li> <li>\u200b\u8bfb\u5199\u200b\u6307\u9488\u200b\u76f8\u540c\u200b \u200b\u7a7a\u200b\uff1b\u200b\u76f8\u5dee\u200b n \u200b\u6ee1\u200b;\u200b\u7b49\u4ef7\u200b\u4e8e\u200b <code>out == (in xor size)</code></li> <li>Linux\u200b\u4f7f\u7528\u200b\u65e0\u200b\u7b26\u53f7\u200b\u6570\u200b\u8fdb\u9636\u200b</li> </ol> <p>\u200b\u53c2\u8003\u8d44\u6599\u200b</p>"},{"location":"backend/algorithm/#_2","title":"\u5e76\u200b\u67e5\u96c6","text":"<pre><code>public class Union {\n    private int id[];\n    private int size[];\n\n    public Union(int n) {\n        id = new int[n];\n        size = new int[n];\n        for (int i = 0; i &lt; n; i++) {\n            id[i] = i;\n            size[i] = 1;\n        }\n    }\n\n    private int root(int i) {\n        while (i != id[i]) {\n            //id[i] = id[id[i]]; \u200b\u6ca1\u6709\u200b\u5c31\u662f\u200b\u57fa\u7840\u200b\u7248\u200b\n            i = id[i];\n        }\n        return i;\n    }\n\n    public void union(int p, int q) {\n        int pro = root(p);\n        int qro = root(q);\n        if (size[pro] &lt;= size[qro]) {\n            id[pro] = qro;\n            size[qro] += size[pro];\n        }\n        else {\n            id[qro] = pro;\n            size[pro] += size[qro];\n        }\n    }\n\n    public boolean connected(int p, int q) {\n        return root(q) == root(q);\n    }\n}\n</code></pre> <p>Successor with delete: Given a set of n integers S = {0, 1, ..., n\u22121} and a sequence of requests of the following form:</p> <ul> <li>remove x from S </li> <li>find successor of  x : the smallest y in S such that y&gt;=x</li> <li> <p>solve hint: union(x,x+1)</p> </li> <li> <p>\u200b\u5047\u5b9a\u200b\u4e0d\u200b\u8003\u8651\u200b\u5220\u9664\u200b\u6216\u200b\u67e5\u8be2\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\uff0c\u200b\u5982\u679c\u200b\u628a\u200b\u53f3\u8fb9\u200b\u7684\u200b\u6302\u5230\u200b\u5de6\u8fb9\u200b\uff0c\u200b\u5c31\u200b\u5728\u200b <code>actual</code> \u200b\u8bb0\u5f55\u200b\u4e00\u4e0b\u200b</p> </li> <li>\u200b\u601d\u8def\u200b\u6765\u6e90\u200b</li> </ul> slove <pre><code>public class Union {\n    public static void main(String[] args) {\n        Union ua = new Union(7);\n        ua.remove(2);\n        ua.remove(4);\n        ua.remove(3);\n        System.out.println(\"successor 3: \" + ua.successor(3));\n        ua.remove(5);\n        System.out.println(\"successor 5: \" + ua.successor(5));\n        ua.showActual();\n    }\n\n    private int id[];\n    private int size[];\n    private int actual[];\n\n    public Union(int n) {\n        id = new int[n];\n        size = new int[n];\n        actual = new int[n];\n        for (int i = 0; i &lt; n; i++) {\n            id[i] = i;\n            actual[i] = i;\n            size[i] = 1;\n        }\n    }\n\n    private int root(int i) {\n        while (i != id[i]) {\n            id[i] = id[id[i]];\n            i = id[i];\n        }\n        return i;\n    }\n\n    public void union_ab(int p, int q) {\n        /* p &lt; q */\n        int pro = root(p);\n        int qro = root(q);\n        if (size[pro] &lt;= size[qro]) {\n            id[pro] = qro;\n            size[qro] += size[pro];\n        }\n        else {\n            id[qro] = pro;\n            size[pro] += size[qro];\n            actual[pro] = qro;\n        }\n    }\n\n    public boolean connected(int p, int q) {\n        return root(q) == root(q);\n    }\n\n    public void remove(int x) {\n        if (x &gt;= 0 &amp;&amp; x &lt; id.length - 1)\n            union_ab(x, x + 1);\n    }\n\n    public int successor(int x) {\n        return actual[root(x + 1)];\n    }\n\n    public void showActual() {\n        System.out.print(\"actual: \");\n        for (int x = 0; x &lt; actual.length - 1; x++)\n            System.out.print(actual[root(x + 1)] + \" \");\n\n        System.out.print(\"\\nroot: \");\n        for (int x = 0; x &lt; actual.length; x++)\n            System.out.print(id[x] + \" \");\n    }\n}\n</code></pre>"},{"location":"backend/algorithm/#_3","title":"\u5806","text":"<p>\u200b\u6700\u5927\u200b\u5806\u200b\uff0c\uff08\u200b\u6700\u5c0f\u200b\u5806\u200b\u628a\u200b\u7b26\u53f7\u200b\u53d8\u200b\u4e00\u4e0b\u200b\uff09</p> <pre><code>class maxHeap {\n    vector&lt;int&gt; tree;\n    int N = 0;\n\n    //change bottom to top\n    void swim(int k) {\n        while (k &gt; 1 &amp;&amp; tree[k] &gt; tree[k / 2]) {\n            swap(tree[k], tree[k / 2]);\n            k = k / 2;\n        }\n    }\n    //change top to down\n    void sink(int k) {\n        while (k * 2 &lt;= N) {    //may have 4 node and k=2\n            int j = k * 2;\n            if (j &lt; N &amp;&amp; tree[j + 1] &gt; tree[j]) j++;\n            if (tree[k] &gt;= tree[j]) break;\n            swap(tree[k], tree[j]);\n            k = j;\n        }\n    }\n\npublic:\n    maxHeap(int n) {\n        tree.resize(n + 1);\n    }\n\n\n    void add(int k) {\n        tree[++N] = k;\n        swim(N);\n    }\n\n    int delMax() {\n        int max = tree[1];\n        tree[1] = tree[N--];\n        sink(1);\n        return max;\n    }\n};\n</code></pre> <p>\u200b\u5806\u6392\u5e8f\u200b\u5c31\u200b\u76f8\u5f53\u4e8e\u200b\u6bcf\u6b21\u200b\u628a\u200b\u6700\u5927\u200b\u5143\u7d20\u200b\u653e\u5230\u200b\u7ed3\u5c3e\u200b\uff0c\u200b\u4e2a\u6570\u200b\u51cf\u4e00\u200b\uff0c<code>sink(1)</code> \u200b\u8c03\u6574\u200b\u4e00\u4e0b\u200b</p>"},{"location":"backend/algorithm/#_4","title":"\u6811","text":"<p>\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u975e\u200b\u9012\u5f52\u200b\u53cc\u8272\u200b\u6cd5\u200b\u3002\u200b\u597d\u5904\u200b\u662f\u200b\u53ea\u8981\u200b\u9006\u5e8f\u200b\u904d\u5386\u200b\u987a\u5e8f\u200b\u5c31\u884c\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff1a\u200b\u5148\u5e8f\u200b\u904d\u5386\u200b\uff0c\u200b\u4ee3\u7801\u200b\u6539\u6210\u200b <code>st.push(root.right,false), st.push(root.left,true), st.push(root,false)</code>\u3002 \u200b\u6559\u7a0b\u200b</p> \u200b\u53cc\u8272\u200b\u6807\u8bb0\u200b <pre><code>class Solution {\npublic:\n\n    vector&lt;int&gt; inorderTraversal(TreeNode *root) {\n        vector&lt;int&gt; anw;\n\n        if (root == nullptr) return anw;\n\n        stack&lt;pair&lt;TreeNode *, bool&gt;&gt; st;\n        st.push(make_pair(root, false));\n        while (!st.empty()) {\n            auto [node, color] = st.top();\n            st.pop();\n            if (node == nullptr) {\n                cout &lt;&lt; \"null\" &lt;&lt; endl;\n                continue;\n            }\n            if (color) {\n                anw.emplace_back(node-&gt;val);\n                cout &lt;&lt; \"anw \" &lt;&lt; node-&gt;val &lt;&lt; endl;\n                continue;\n            }\n            else {\n                st.push(make_pair(node-&gt;right, false));\n                st.push(make_pair(node, true));\n                st.push(make_pair(node-&gt;left, false));\n                cout &lt;&lt; \"push right \" &lt;&lt; node-&gt;val &lt;&lt; \" push left\" &lt;&lt; endl;\n            }\n        }\n        return anw;\n\n    }\n};\n</code></pre> <p>Morris \u200b\u904d\u5386\u200b \u200b\u7528\u200b\u5148\u5f80\u200b\u5de6\u5b50\u200b\u6811\u200b\u8d70\u200b\u7684\u200b\u6a21\u677f\u200b\u8bf4\u660e\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; preorderTraversal(TreeNode *root) {\n        vector&lt;int&gt; anw;\n        if(root== nullptr) return anw;\n        TreeNode*now=root;\n        while (now){\n            TreeNode* mirros=now-&gt;left;\n            if(mirros== nullptr) { \n                // \u200b\u53ef\u4ee5\u200b\u770b\u6210\u200b\u8bbf\u95ee\u200b\u5230\u200b\u6839\u200b\u8282\u70b9\u200b/\u200b\u6ca1\u6709\u200b\u5de6\u5b50\u200b\u6811\u200b\u7684\u200b\u8282\u70b9\u200b\uff0c\u200b\u4e0d\u7ba1\u200b\u54ea\u200b\u79cd\u200b\u8bbf\u95ee\u200b\uff0c\u200b\u6839\u200b\u8282\u70b9\u200b\u503c\u200b\u4e00\u5b9a\u200b\u8981\u52a0\u200b\n                anw.push_back(now-&gt;val);\n                now=now-&gt;right;\n                continue;\n            }\n            // \u200b\u4e0b\u8fb9\u200b\u90fd\u200b\u662f\u200b\u6709\u5b50\u200b\u6811\u200b\u7684\u200b\u60c5\u51b5\u200b\n            while (mirros-&gt;right&amp;&amp;mirros-&gt;right!=now)mirros=mirros-&gt;right;\n            if(mirros-&gt;right== nullptr){ \n                // \u200b\u7b2c\u4e00\u6b21\u200b\u7ecf\u8fc7\u200b\u8282\u70b9\u200b A\uff0c\u200b\u524d\u5e8f\u200b\u5728\u200b\u8fd9\u91cc\u200b\u52a0\u5165\u200b\n                anw.push_back(now-&gt;val);\n                mirros-&gt;right=now;\n                now=now-&gt;left;\n            }\n            else{ // \u200b\u7b2c\u4e8c\u6b21\u200b\u7ecf\u8fc7\u200b\u8282\u70b9\u200b A\uff0c\u200b\u4e2d\u5e8f\u200b\u5728\u200b\u8fd9\u91cc\u200b\u52a0\u5165\u200b\n                mirros-&gt;right= nullptr;\n                now=now-&gt;right;\n            }\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u540e\u5e8f\u200b\u89e3\u91ca\u200b\uff1a\u200b\u83b7\u53d6\u200b\u6839\u53f3\u200b\u5de6\u200b\u7684\u200b\u987a\u5e8f\u200b\uff0c\u200b\u6700\u540e\u200b\u53cd\u8f6c\u200b\uff0c\u200b\u5efa\u7acb\u200b\u6307\u9488\u200b\u7684\u200b\u65f6\u5019\u200b\u548c\u200b\u524d\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u4e0d\u200b\u4e00\u6837\u200b</p> \u200b\u524d\u5e8f\u200b\u4e2d\u5e8f\u200b\u540e\u5e8f\u200b <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; preorderTraversal(TreeNode *root) {\n        vector&lt;int&gt; anw;\n        if (root == nullptr) return anw;\n        TreeNode *now = root;\n        while (now) {\n            TreeNode *mirrs = now-&gt;left;\n            if (mirrs == nullptr) {\n                anw.push_back(now-&gt;val);\n                now = now-&gt;right;\n                continue;\n            }\n            while (mirrs-&gt;right &amp;&amp; mirrs-&gt;right != now) mirrs = mirrs-&gt;right;\n            if (mirrs-&gt;right == nullptr) {\n                anw.push_back(now-&gt;val);\n                mirrs-&gt;right = now;\n                now = now-&gt;left;\n            }\n            else {\n                mirrs-&gt;right = nullptr;\n                now = now-&gt;right;\n            }\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; inorderTraversal(TreeNode *root) {\n        vector&lt;int&gt; anw;\n        if (root == nullptr) return anw;\n        TreeNode *now = root;\n        while (now) {\n            TreeNode *mirrs = now-&gt;left;\n            if (mirrs == nullptr) {\n                anw.push_back(now-&gt;val);\n                now = now-&gt;right;\n                continue;\n            }\n            while (mirrs-&gt;right &amp;&amp; mirrs-&gt;right != now) mirrs = mirrs-&gt;right;\n            if (mirrs-&gt;right == nullptr) {\n                mirrs-&gt;right = now;\n                now = now-&gt;left;\n            }\n            else {\n                mirrs-&gt;right = nullptr;\n                anw.push_back(now-&gt;val);\n                now = now-&gt;right;\n            }\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; postorderTraversal(TreeNode *root) {\n        vector&lt;int&gt; res;\n        if (root == nullptr) return res;\n        TreeNode *now = root;\n        while (now) {\n            TreeNode *mirrs = now-&gt;right;\n            if (mirrs == nullptr) {\n                res.push_back(now-&gt;val);\n                now = now-&gt;left;\n                continue;\n            }\n            while (mirrs-&gt;left &amp;&amp; mirrs-&gt;left != now) mirrs = mirrs-&gt;left;\n            if (mirrs-&gt;left == nullptr) {\n                res.push_back(now-&gt;val);\n                mirrs-&gt;left = now;\n                now = now-&gt;right;\n            }\n            else {\n                mirrs-&gt;left = nullptr;\n                now = now-&gt;left;\n            }\n        }\n        std::reverse(res.begin(), res.end());\n        return res;\n    }\n};\n</code></pre>"},{"location":"backend/algorithm/#_5","title":"\u56fe","text":"<p>\u200b\u56fe\u200b\u7684\u200b\u5b58\u50a8\u200b</p>"},{"location":"backend/algorithm/#_6","title":"\u65e0\u5411\u200b\u56fe","text":"<ul> <li>dfs \u200b\u6c42\u200b\u8def\u5f84\u200b</li> <li>dfs \u200b\u8fdb\u5165\u200b\u987a\u5e8f\u200b\uff0c\u200b\u5b8c\u6210\u200b\u987a\u5e8f\u200b\uff08\u200b\u540e\u5e8f\u200b\uff09\uff0c\u200b\u9006\u200b\u5b8c\u6210\u200b\u987a\u5e8f\u200b</li> <li>\u200b\u6c42\u200b\u8fde\u901a\u200b\u5206\u91cf\u200b</li> <li>\u200b\u4e8c\u5206\u200b\u56fe\u200b</li> </ul> <pre><code>#include \"wq.h\"\n\nconst int vertexCnt = 10;\n\nclass Graph {\npublic:\n    int V;\n    int E;\n    vector&lt;int&gt; adj[vertexCnt];\n\n    Graph(int vCnt, int eCnt) {\n        this-&gt;V = vCnt;\n        this-&gt;E = eCnt;\n        for (int i = 0; i &lt; eCnt; ++i) {\n            int a, b;\n            cin &gt;&gt; a &gt;&gt; b;\n            addEdge(a, b);\n        }\n    }\n\n    void addEdge(int a, int b) {\n        adj[a].push_back(b);\n        adj[b].push_back(a);\n    }\n\n};\n\nclass DepthFirstPaths {\n\n    bool marked[vertexCnt];\n    int edgeTo[vertexCnt];\n    int start;\npublic:\n    DepthFirstPaths(const Graph &amp;g, int start) {\n        this-&gt;start = start;\n        dfs(g, start);\n    }\n\n    void dfs(const Graph &amp;g, int v) {\n        marked[v] = true;\n        for (int u: g.adj[v]) {\n            if (!marked[u]) {\n                edgeTo[u] = v;\n                dfs(g, u);\n            }\n        }\n    }\n\n    bool havePathTo(int v) {\n        return marked[v];\n    }\n\n    vector&lt;int&gt; pathTo(int v) {\n        vector&lt;int&gt; path;\n        if (!havePathTo(v)) return path;\n        for (int x = v; x != start; x = edgeTo[x])\n            path.push_back(x);\n        path.push_back(start);\n        reverse(path.begin(), path.end());\n        return path;\n    }\n};\n\nclass DepthFirstOrder {\n\n    bool marked[vertexCnt];\n\npublic:\n    vector&lt;int&gt; pre;\n    vector&lt;int&gt; post;\n    stack&lt;int&gt; reversePost_stack;\n    vector&lt;int&gt; reverstpost_vec;\n\n    explicit DepthFirstOrder(const Graph &amp;g) {\n        for (int v = 0; v &lt; g.V; ++v)\n            if (!marked[v])\n                dfs(g, v);\n\n        reverse(reverstpost_vec.begin(), reverstpost_vec.end());\n    }\n\n\nprivate:\n    void dfs(const Graph &amp;g, int s) {\n\n        pre.push_back(s);\n\n        marked[s] = true;\n        for (int w: g.adj[s])\n            if (!marked[w])\n                dfs(g, w);\n\n        post.push_back(s);\n        reversePost_stack.push(s);\n        reverstpost_vec.push_back(s);\n    }\n};\n\n\n// \u200b\u65e0\u5411\u200b\u56fe\u200b\u8fde\u901a\u200b\u5206\u91cf\u200b\nclass CC {\n    bool marked[vertexCnt];\n    int id[vertexCnt];\n    int count = 0;\npublic:\n    explicit CC(const Graph &amp;g) {\n        // vertex begin from 0\n        for (int s = 0; s &lt; g.V; s++) {\n            if (!marked[s]) {\n                dfs(g, s);\n                count++;\n            }\n        }\n    }\n\n    bool isconnected(int u, int v) {\n        return id[v] == id[u];\n    }\n\n    int idof(int v) { return id[v]; }\n\n    int countOfCC() const { return count; }\n\nprivate:\n    void dfs(const Graph &amp;g, int v) {\n        marked[v] = true;\n        id[v] = count;\n        for (int t: g.adj[v]) {\n            if (!marked[t]) {\n                dfs(g, t);\n            }\n        }\n    }\n};\n\nclass Cycle {\n    bool marked[vertexCnt];\n    bool haveCycle;\n\npublic:\n    Cycle(const Graph &amp;g) {\n        for (int s = 0; s &lt; g.V; ++s)\n            if (!marked[s])\n                dfs(g, s, s);\n    }\n\n    bool hasCycle() const { return haveCycle; }\n\nprivate:\n    void dfs(const Graph &amp;g, int v, int u) {\n        marked[v] = true;\n        for (int w: g.adj[v]) {\n            if (!marked[w])\n                dfs(g, w, v);\n            else if (w != u) haveCycle = true;\n        }\n    }\n\n};\n\nclass TwoColor {\n    bool marked[vertexCnt];\n    bool color[vertexCnt];\n    bool isTwoColorable = true;\npublic:\n    bool isTwocolorable() const { return isTwoColorable; }\n\n    explicit TwoColor(const Graph &amp;g) {\n        for (int s = 0; s &lt; g.V; ++s)\n            if (!marked[s])\n                dfs(g, s);\n    }\n\nprivate:\n    void dfs(const Graph &amp;g, int v) {\n        marked[v] = true;\n        for (int u: g.adj[v]) {\n            if (!marked[u]) {\n                color[u] = !color[v];\n                dfs(g, u);\n            }\n            else if (color[v] == color[u]) isTwoColorable = false;\n        }\n    }\n\n};\n\nvoid test() {\n\n    Graph undirected(6, 6);\n//    DepthFirstPaths path(undirected, 1);\n//    vector&lt;int&gt; pathto4 = path.pathTo(4);\n//    cout &lt;&lt; \"path to 4 is \";\n//    for (int x: pathto4)\n//        cout &lt;&lt; x &lt;&lt; ' ';\n//    cout &lt;&lt; endl;\n\n//    CC cc(undirected);\n//    cout &lt;&lt; cc.countOfCC();\n\n//    Cycle cycle(undirected);\n//    cout &lt;&lt; cycle.hasCycle();\n\n//    TwoColor cantwocolor(undirected);\n//    cout &lt;&lt; cantwocolor.isTwocolorable();\n\n    DepthFirstOrder order(undirected);\n    cout &lt;&lt; setw(30) &lt;&lt; std::left &lt;&lt; \"dfs order: \";\n    for (int x: order.pre) cout &lt;&lt; x &lt;&lt; ' ';\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; setw(30) &lt;&lt; \"dfs complete order: \";\n    for (int x: order.post) cout &lt;&lt; x &lt;&lt; ' ';\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; setw(30) &lt;&lt; \"dfs complete reverse order:\";\n    for (int x: order.reverstpost_vec) cout &lt;&lt; x &lt;&lt; ' ';\n    cout &lt;&lt; endl;\n    while (!order.reversePost_stack.empty()) {\n        cout &lt;&lt; order.reversePost_stack.top() &lt;&lt; ' ';\n        order.reversePost_stack.pop();\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    test();\n    return 0;\n}\n</code></pre> <p>\u200b\u62d3\u6251\u200b\u6392\u5e8f\u200b\uff1adfs\u200b\u7684\u200b\u7ed3\u679c\u200b\u9006\u5e8f\u200b\u4e00\u4e0b\u200b\u5c31\u662f\u200b\u7b54\u6848\u200b\uff0c\u200b\u6216\u8005\u200b\u6bcf\u6b21\u200b\u627e\u5165\u5ea6\u200b\u4e3a\u200b\u96f6\u5f97\u70b9\u200b\uff0c\u200b\u7528\u200b\u5f53\u524d\u200b\u70b9\u200b\u66f4\u65b0\u200b\u522b\u7684\u200b\u70b9\u5f97\u200b\u5165\u5ea6\u200b <pre><code>bool marked[graph.v()];\nvector&lt;int&gt; toReverse;\n\nvector&lt;int&gt; topoSort() {\n    topoSortCore(0);\n    return reverse(toReverse.begin(), toReverse.end());\n}\n\nvoid topoSortCore(int vertex) {\n    marked[vertex] = true;\n    for (int v : vetex.adj())\n        if (!marked[v])\n            topoSortCore(v);\n    toReverse.push(vertex);\n}\n</code></pre></p> <p>\u200b\u6c42\u5f3a\u200b\u8fde\u901a\u200b\u5206\u91cf\u200b\uff1a\u200b\u5148\u5bf9\u200b\u9006\u56fe\u200b\uff08\u200b\u8fb9\u5168\u200b\u53cd\u5411\u200b\uff09\u200b\u6c42\u200b\u51fa\u200b\u62d3\u6251\u200b\u6392\u5e8f\u200b\u7684\u200b\u8282\u70b9\u200b\u987a\u5e8f\u200b\uff0c\u200b\u5047\u5982\u200b\u662f\u200b <code>3,2,1,4,6,7</code>\uff0c\u200b\u7136\u540e\u200b\u6309\u7740\u200b\u8fd9\u4e2a\u200b\u987a\u5e8f\u200b\u5bf9\u200b\u539f\u56fe\u200b dfs \u200b\u5f97\u5f3a\u200b\u8fde\u901a\u200b\u5206\u91cf\u200b</p>"},{"location":"backend/algorithm/#_7","title":"\u6709\u5411\u56fe","text":"<p>\u200b\u6709\u5411\u56fe\u200b\u5224\u65ad\u200b\u6709\u6ca1\u6709\u200b\u73af\u8def\u200b</p> <pre><code>class DirectedGraph {\npublic:\n    int V;\n    int E;\n    vector&lt;int&gt; adj[N];\n\n    DirectedGraph(int Vcnt) : V(Vcnt) {}\n\n    DirectedGraph(int Vcnt, int Ecnt) : V(Vcnt), E(Ecnt) {}\n\n    void addEdge(int from, int to) { adj[from].push_back(to); }\n\n};\n\nclass DirectedCycle {\n    bool marked[N] = {false};\n    bool onStack[N] = {false};\n    int edgeTo[N] = {0};\n\n    bool hasCycle() { return !cycle.empty(); }\n\npublic:\n    stack&lt;int&gt; cycle;\n\n    DirectedCycle(const DirectedGraph &amp;G) {\n        for (int v = 0; v &lt; G.V; ++v) {\n            if (!marked[v]) dfs(G, v);\n        }\n    }\n\n    void dfs(const DirectedGraph &amp;G, int v) {\n        onStack[v] = true;\n        marked[v] = true;\n        for (int w: G.adj[v])\n            if (hasCycle()) return;\n            else if (!marked[w]) {\n                edgeTo[w] = v;\n                dfs(G, w);\n            }\n            else if (onStack[w]) {\n                for (int x = v; x != w; x = edgeTo[x])\n                    cycle.push(x);\n\n                cycle.push(w);\n                cycle.push(v);\n            }\n        onStack[v] = false;\n    }\n\n    stack&lt;int&gt; getCycle() { return cycle; }\n};\n</code></pre> <p>\u200b\u5355\u6e90\u200b\u6700\u200b\u77ed\u8def\u200b \u200b\u8fea\u6770\u200b\u65af\u7279\u62c9\u200b</p> <pre><code>struct OutEdge {\n    int to, weight;\n\n    bool operator&lt;(OutEdge other) const { return this-&gt;weight &gt; other.weight; }\n\n};\n\nclass WeightDirectedGraph {\n    int E;\npublic:\n\n    int V;\n\n    WeightDirectedGraph(int Vcnt) : V(Vcnt) {}\n\n    WeightDirectedGraph(int Vcnt, int Ecnt) : V(Vcnt), E(Ecnt) {}\n\n    vector&lt;OutEdge&gt; adjs[N];\n\n    void addEdge(int from, int to, int weight) {\n        adjs[from].push_back({to, weight});\n    }\n};\n\n\nclass DijkSP {\n    vector&lt;int&gt; dis;\n    vector&lt;int&gt; pathTo;\npublic:\n    DijkSP(const WeightDirectedGraph &amp;G, int src) {\n        pathTo = vector&lt;int&gt;(G.V);\n        dis = vector&lt;int&gt;(N, 0x3f3f3f3f);\n        priority_queue&lt;OutEdge&gt; pq; // minheap\n        vector&lt;bool&gt; marked(G.V, false);\n        dis[src] = 0;\n        pq.push({0, 0});\n\n        while (!pq.empty()) {\n            int temV = pq.top().to;\n            pq.pop();\n            if (marked[temV]) continue;\n            marked[temV] = true;\n            for (auto adj: G.adjs[temV]) {\n                int u = adj.to;\n                int disVtoU = adj.weight;\n                if (dis[temV] + disVtoU &lt; dis[u]) {\n                    dis[u] = dis[temV] + disVtoU;\n                    pathTo[u] = temV;\n                }\n                pq.push({u, dis[u]});\n            }\n        }\n    }\n\n    vector&lt;int&gt; getDis() { return dis; }\n\n    vector&lt;int&gt; getPath() { return pathTo; }\n};\n\n\nvoid test() {\n    WeightDirectedGraph g(3, 3);\n    g.addEdge(0, 1, 1);\n    g.addEdge(1, 2, 1);\n    g.addEdge(0, 2, 10);\n    DijkSP sp(g, 0);\n    auto dis = sp.getDis();\n    for (int x: dis) cout &lt;&lt; x &lt;&lt; ' ';\n    cout &lt;&lt; endl;\n    dis = sp.getPath();\n    for (int x: dis) cout &lt;&lt; x &lt;&lt; ' ';\n}\n\nint main() {\n    test();\n    return 0;\n}\n</code></pre>"},{"location":"backend/algorithm/#_8","title":"\u6700\u5c0f\u200b\u751f\u6210\u200b\u6811","text":"<p>\u200b\u514b\u9c81\u65af\u200b\u5361\u5c14\u200b</p> <pre><code>class Edge {\n    int a, b;\npublic:\n    int w;\n\n    Edge(int u, int v, int weight) : a(u), b(v), w(weight) {}\n\n    int other(int x) { return x == a ? b : a; }\n\n    int either() { return a; }\n\n    bool operator&lt;(Edge other) const {\n        return this-&gt;w &gt; other.w;\n    }\n};\n\nclass EdgeWeightGraph {\npublic:\n    vector&lt;Edge&gt; list;\n    int E, V;\n\n    EdgeWeightGraph(int Vcnt, int Ecnt) : V(Vcnt), E(Ecnt) {}\n\n    void addEdge(int a, int b, int w) {\n        list.emplace_back(a, b, w);\n    }\n};\n\nclass UnionFind {\n    int root[N];\n    int sz[N];\n\npublic:\n    UnionFind() { for (int i = 0; i &lt; N; ++i)root[i] = i, sz[i] = 1; }\n\n    void unionTwo(int a, int b) {\n        int ra = getRoot(a), rb = getRoot(b);\n        if (sz[ra] &lt; sz[rb]) {\n            root[ra] = rb;\n            sz[rb] += sz[ra];\n        }\n        else {\n            root[rb] = ra;\n            sz[ra] += sz[rb];\n        }\n    }\n\n    bool connected(int a, int b) {\n        return getRoot(a) == getRoot(b);\n    }\n\n    int getRoot(int a) {\n        while (a != root[a]) {\n            root[a] = root[root[a]];\n            a = root[a];\n        }\n        return a;\n    }\n};\n\nclass KruskalMST {\n    queue&lt;Edge&gt; mst;\n    priority_queue&lt;Edge, vector&lt;Edge&gt;&gt; pq;\n    UnionFind uf;\npublic:\n    KruskalMST(const EdgeWeightGraph &amp;G) {\n        for (auto x: G.list)pq.push(x);\n\n        while (!pq.empty() &amp;&amp; mst.size() &lt; G.V - 1) {\n            Edge e = pq.top();\n            pq.pop();\n            int v = e.either(), w = e.other(v);\n            if (uf.connected(v, w)) continue;\n            uf.unionTwo(v, w);\n            mst.push(e);\n        }\n    }\n\n    queue&lt;Edge&gt; getMST() { return mst; }\n};\n</code></pre>"},{"location":"backend/algorithm/#string","title":"string","text":""},{"location":"backend/algorithm/#trie","title":"trie","text":"<p>\u200b\u529b\u6263\u200b 208</p> <pre><code>class Trie {\n    int isEnd;\n    Trie *next[26];\npublic:\n    Trie() {\n        isEnd = false;\n        for (auto &amp;i: next)\n            i = nullptr;\n    }\n\n    void insert(string word) {\n        Trie *cur = this;\n        for (char x: word) {\n            if (cur-&gt;next[x - 'a'] == nullptr) cur-&gt;next[x - 'a'] = new Trie();\n            cur = cur-&gt;next[x - 'a'];\n        }\n        cur-&gt;isEnd = true;\n    }\n\n    bool search(string word) {\n        Trie *cur = this;\n        for (char x: word) {\n            int id = x - 'a';\n            if (cur-&gt;next[id]) cur = cur-&gt;next[id];\n            else return false;\n        }\n        return cur-&gt;isEnd;\n    }\n\n    bool startsWith(string prefix) {\n        Trie *cur = this;\n        for (char x: prefix) {\n            int id = x - 'a';\n            if (cur-&gt;next[id]) cur = cur-&gt;next[id];\n            else return false;\n        }\n        return true;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj-&gt;insert(word);\n * bool param_2 = obj-&gt;search(word);\n * bool param_3 = obj-&gt;startsWith(prefix);\n */\n</code></pre>"},{"location":"backend/algorithm/#_9","title":"\u9a6c\u200b\u62c9\u8f66","text":"<p>\u200b\u8bb2\u89e3\u200b</p> <pre><code>class Solution {\npublic:\n    string preprocess(string s) {\n        string anw = \"^\";\n        for (char x: s) {\n            anw += '#';\n            anw += x;\n        }           //anw+='#'+x is wrong !\n        anw += \"#$\";\n        cout &lt;&lt; anw &lt;&lt; endl;\n        return anw;\n    }\n\n    string longestPalindrome(string s) {\n        if (s.empty()) return \"\";\n        string newstr = preprocess(s);\n\n        int center = 0, rightThresold = 0;\n        vector&lt;int&gt; len(newstr.size(), 1);\n\n        for (int i = 1; i &lt; newstr.size(); ++i) { // while \u200b\u4e2d\u200b\u7684\u200b newstr[i-len[i]] i-len[i]&gt;=0\n            int i_mirror = 2 * center - i;\n            if (i &lt; rightThresold)\n                len[i] = min(len[i_mirror], rightThresold - i);\n\n            while (newstr[i + len[i]] == newstr[i - len[i]])\n                len[i]++;\n\n            if (i + len[i] &gt; rightThresold) {\n                rightThresold = i + len[i];\n                center = i;\n            }\n        }\n\n        int begin_index = 0, maxlen = 0;\n        for (int i = 0; i &lt; len.size(); ++i) {\n            if (len[i] &gt; maxlen) {\n                maxlen = len[i];\n                begin_index = i;\n            }\n        }\n        cout &lt;&lt; begin_index &lt;&lt; maxlen;\n        return s.substr((begin_index - maxlen) / 2, maxlen - 1);\n    }\n};\n</code></pre>"},{"location":"backend/algorithm/#kmp","title":"KMP","text":"<p>\u200b\u51fa\u81ea\u200b\u7f16\u8bd1\u200b\u539f\u7406\u200b\u90a3\u672c\u200b\u9f99\u4e66\u200b\uff08\u200b\u6c49\u5316\u200b\u7b2c\u4e8c\u200b\u7248\u200b 86 \u200b\u9875\u200b\uff09</p> <p>\u200b\u4e0b\u9762\u200b\u90fd\u200b\u662f\u4ece\u200b 1 \u200b\u5f00\u59cb\u200b\u8ba1\u6570\u200b</p> <ol> <li>\u200b\u5148\u200b\u6784\u9020\u51fd\u6570\u200b <code>f(s)</code> \u200b\u8868\u793a\u200b $$ b_1b_2..b_{f(s)} $$ \u200b\u65e2\u200b\u662f\u200b\u6574\u4e2a\u200b pattern \u200b\u7684\u200b s \u200b\u4f4d\u771f\u200b\u524d\u7f00\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200b s \u200b\u4f4d\u200b\u540e\u7f00\u200b\uff0c\u200b\u4e24\u8005\u200b\u76f8\u540c\u200b\u3002</li> <li>\u200b\u5f53\u200b\u5339\u914d\u200b s \u200b\u4e2a\u200b\u5b57\u6bcd\u200b\u6210\u529f\u200b\uff0cs+1 \u200b\u4e2a\u200b\u5b57\u6bcd\u200b\u5931\u8d25\u200b\u65f6\u200b\uff0c\u200b\u5c06\u200b pattern \u200b\u79fb\u52a8\u200b s-f(s) \u200b\u4f4d\u200b </li> </ol> <pre><code>no          1 2 3 4 5 6\nword        a b a b x .... // fail on no.5, s = 4 and move 4-2=2 char\npattern     a b a b a b\nf(s)        0 0 1 2 3 4\n\n---\nword        a b a b x ....\npattern         a b a b a b\n</code></pre> <p>\u200b\u5728\u200b\u5b9e\u73b0\u200b\u7684\u200b\u65f6\u5019\u200b\u4ece\u200b 1 \u200b\u5f00\u59cb\u200b\u548c\u200b\u4ece\u200b 0 \u200b\u5f00\u59cb\u200b\u6709\u200b\u4e0d\u540c\u200b\uff0c</p> <p>\u200b\u5982\u4f55\u200b\u8ba1\u7b97\u200b lose\uff1a\u200b\u5b57\u7b26\u200b\u4e0d\u200b\u7b49\u200b\u5c31\u200b\u8bd5\u4e00\u4e0b\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u957f\u5ea6\u200b\uff0c\u200b\u6b63\u597d\u200b id \u200b\u7b49\u4e8e\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u957f\u5ea6\u200b\u80fd\u200b\u6bd4\u8f83\u200b\u5b57\u7b26\u200b\u3002</p> <p>eg: <code>ababax</code> -&gt; \u200b\u6bd4\u8f83\u200b <code>ababax</code>  \u200b\u53d1\u73b0\u200b x != b \u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6bd4\u200b <code>aba</code> <code>abx</code></p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u5bf9\u200b <code>s-f(s)</code> \u200b\u8fdb\u884c\u200b\u4fee\u6539\u200b</p> <ol> <li>\u200b\u5728\u200b\u626b\u63cf\u200b\u7684\u200b\u65f6\u5019\u200b\u6bd4\u8f83\u200b\u5f53\u524d\u200b\u4f4d\u200b\uff0c\u200b\u4e0d\u662f\u200b\u4e0b\u200b\u4e00\u4f4d\u200b</li> <li>\u200b\u5047\u5982\u200b\u5728\u200b\u4ece\u200b 1 \u200b\u6570\u7b2c\u200b 5 \u200b\u4f4d\u200b\u5931\u8d25\u200b s = 4, pat \u200b\u6574\u4e2a\u200b\u524d\u79fb\u200b <code>s - f(s)= 4 - f(4) = 2</code> \u200b\u4f4d\u200b</li> <li>\u200b\u8f6c\u6362\u6210\u200b\u4e0b\u6807\u200b\u5c31\u200b\u662f\u4ece\u200b 0 \u200b\u6570\u200b\uff0c\u200b\u4e0b\u6807\u200b id \u200b\u4e3a\u200b 4 \u200b\u5931\u8d25\u200b\uff0cpat \u200b\u6574\u4e2a\u200b\u524d\u79fb\u200b <code>id - f(id - 1) = 4 - 2</code></li> <li>\u200b\u5b57\u7b26\u4e32\u200b\u6574\u4e2a\u200b\u524d\u79fb\u200b\u7b49\u4ef7\u200b\u4e8e\u200b\u626b\u63cf\u200b\u70b9\u200b\u56de\u79fb\u200b\uff0c\u200b\u6240\u4ee5\u200b\u65b0\u200b\u7684\u200b\u626b\u63cf\u200b\u70b9\u200b\u662f\u200b <code>id - (id - f(id-1) ) = f(id - 1)</code></li> </ol> \u200b\u8ba1\u6570\u200b\u8d77\u70b9\u200b \u200b\u6210\u529f\u200b \u200b\u5931\u8d25\u200b \u200b\u8f6c\u6362\u200b 1 s \u200b\u4e3a\u200b 4 \u200b\u6210\u529f\u200b s \u200b\u4e3a\u200b 5 \u200b\u5931\u8d25\u200b s - f(s) = 4 - f(4) 0 id \u200b\u4e3a\u200b 3 \u200b\u6210\u529f\u200b id \u200b\u4e3a\u200b 4 \u200b\u5931\u8d25\u200b id - f(id-1) <pre><code>#include \"vector\"\n#include \"string\"\n#include\"iostream\"\n\nusing namespace std;\n\nvector&lt;int&gt; SolveLose(string pattern) {\n    // lose \u200b\u53ef\u4ee5\u200b\u770b\u6210\u200b \u200b\u4ee5\u4e0b\u200b\u6807\u4e3a\u200b\u7ed3\u5c3e\u200b\u7684\u200b \u200b\u7b26\u5408\u6761\u4ef6\u200b\u7684\u200b\u957f\u5ea6\u200b\n    vector&lt;int&gt; lose(pattern.size(), 0);\n\n    for (int slow = 0, fast = 1; fast &lt; pattern.size(); fast++) {\n\n        while (slow &gt; 0 &amp;&amp; pattern[slow] != pattern[fast]) slow = lose[slow - 1];\n        if (pattern[slow] == pattern[fast]) {\n            slow++;\n            lose[fast] = slow;\n        }\n        else lose[fast] = 0;\n    }\n\n    // for (int x: lose)cout &lt;&lt; x &lt;&lt; ' ';\n    return lose;\n}\n\nvoid Search(string word, string pat) {\n    auto lose = SolveLose(pat);\n    int w = 0, p = 0;\n    while (w &lt; word.size()) {\n        if (word[w] == pat[p]) {\n            w++;\n            p++;\n        }\n        else if (p &gt; 0) p = lose[p - 1];\n        else w++;\n\n        if (p == pat.size()) {\n            cout &lt;&lt; w - pat.size() &lt;&lt; ' ';\n            p = lose[p - 1];\n        }\n    }\n\n}\n\nint main() {\n    int n, m;\n    string pat, word;\n    cin &gt;&gt; pat &gt;&gt; word;\n    Search(word, pat);\n    return 0;\n}\n</code></pre>"},{"location":"backend/algorithm/#_10","title":"\u7ea2\u76ae\u4e66","text":"<p>\u200b\u5f85\u7eed\u200b</p> <pre><code>#include &lt;algorithm&gt;\n#include &lt;bits/stdc++.h&gt;\n#include &lt;string&gt;\n\nusing namespace std;\nconst int txtSize = 30;\nconst int typeCnt = 26;\n\nint dfa[typeCnt][txtSize];\n\nvoid kmp(string pat) {\n    int patSize = pat.size();\n    dfa[pat[0] - 'a'][0] = 1;\n    for (int X = 0, j = 1; j &lt; patSize; j++) {\n        for (int i = 0; i &lt; typeCnt; i++)\n            dfa[i][j] = dfa[i][X];\n        dfa[pat[j] - 'a'][j] = j + 1;\n        X = dfa[pat[j] - 'a'][X];\n    }\n}\n\nint search(string txt, string pat) {\n    kmp(pat);\n    int i, j;\n    for (j = 0, i = 0; i &lt; txt.size() &amp;&amp; j &lt; pat.size(); i++)\n        j = dfa[txt[i] - 'a'][j];\n    if (j == pat.size())\n        return i - j;\n    else\n        return -1;\n}\n\n\n\nvoid test() {\n    string pat = \"baaa\";\n    string txt = \"ababaaabac\";\n    kmp(pat);\n    cout &lt;&lt; search(txt, pat);\n}\n\nint main() {\n    test();\n    return 0;\n}\n</code></pre>"},{"location":"backend/algorithm/#_11","title":"\u6570\u5b66","text":""},{"location":"backend/algorithm/#_12","title":"\u6c42\u200b\u6700\u5927\u200b\u516c\u56e0\u6570","text":"<p>\u200b\u8f97\u8f6c\u200b\u76f8\u200b\u9664\u6cd5\u200b\uff0c\u200b\u5047\u5982\u200b <code>a=bx+y (a&gt;b)</code>, k \u200b\u662f\u200b a b \u200b\u7684\u200b\u516c\u200b\u56e0\u5b50\u200b\uff0cy=a-bx=a%b\uff0c\u200b\u6240\u4ee5\u200b k \u200b\u4e5f\u200b\u662f\u200b y \u200b\u7684\u200b\u56e0\u5b50\u200b\uff0c\u200b\u6240\u4ee5\u200b k \u200b\u662f\u200b a, b, a%b \u200b\u7684\u200b\u516c\u200b\u56e0\u5b50\u200b\uff0c\u200b\u56e0\u4e3a\u200b k \u200b\u4efb\u610f\u200b\uff0c\u200b\u6240\u4ee5\u200b a,b \u200b\u7684\u200b\u6700\u5927\u200b\u516c\u200b\u56e0\u5b50\u200b\u4e5f\u200b\u76f8\u7b49\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200b a%b \u200b\u7f29\u5c0f\u200b\u3002\u200b\u53e6\u5916\u200b\u5047\u5982\u200b <code>a &lt; b</code>\uff0c\u200b\u51fd\u6570\u200b\u4f1a\u200b\u8c03\u6210\u200b <code>gcd(b,a)</code>\uff0c\u200b\u53c8\u200b\u56de\u5230\u200b\u5927\u6570\u200b\u5728\u200b\u7b2c\u4e00\u4e2a\u200b\u53c2\u6570\u200b</p> <pre><code>int gcd(int a, int b) {\n    if (b == 0) return a;\n    else return gcd(b, a % b);\n}\n</code></pre>"},{"location":"backend/algorithm/#_13","title":"\u5feb\u901f\u200b\u5e42","text":"<pre><code>typedef long long LL;\n\nLL quick_power(int base, int power) {\n    LL anw = 1;\n    while (power &gt; 0) {\n        if (power &amp; 1)\n            anw *= base;\n        base *= base;\n        power &gt;&gt;= 1;\n    }\n    return anw;\n}\nLL quick_power_recursive(int base, int power) {\n    if (power == 0)\n        return 1;\n    else {\n        if (power &amp; 1)\n            return base * quick_power_re(base, power - 1);\n        else {\n            LL anw = quick_power_re(base, power / 2);\n            return anw * anw;\n        }\n    }\n}\n</code></pre>"},{"location":"backend/algorithm/#_14","title":"\u8d28\u6570\u200b\u7b5b","text":"<p>\u200b\u57c3\u6c0f\u200b\u7b5b\u200b</p> \u200b\u4f8b\u5b50\u200b <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n//\u200b\u57c3\u6c0f\u200b\u7b5b\u200b\u672a\u200b\u4f18\u5316\u200b\nvector&lt;int&gt; get_prime_core(vector&lt;int&gt;&amp; anw, vector&lt;int&gt; source) {\n    if (!source.empty())\n        anw.push_back(source[0]);\n    else\n        return anw;\n    vector&lt;int&gt; todo;\n    for (int x : source) {\n        if (x % source[0] != 0) {\n            todo.push_back(x);\n        }\n    }\n    return get_prime_core(anw, todo);\n}\n\nvector&lt;int&gt; get_prime(int n) {\n    vector&lt;int&gt; anw;\n    vector&lt;int&gt; source(n - 1);\n    for (int i = 0, begin = 2; i &lt; source.size(); i++, begin++)\n        source[i] = begin;\n    return get_prime_core(anw, source);\n}\n\n\n//\u200b\u57c3\u6c0f\u200b\u7b5b\u200b\u4f18\u5316\u200b\nvector&lt;int&gt; get_prime_update_ei(int n) {\n    vector&lt;bool&gt; is_prime(n + 1, true);\n    vector&lt;int&gt; anw;\n\n    for (int i = 2; i &lt;= n; i++) {\n        if (is_prime[i])\n            anw.push_back(i);\n        else\n            continue;\n        for (int id = i*2; id &lt;= n; id += i)\n            is_prime[id] = false;\n    }\n    for (auto x : anw)\n        cout &lt;&lt; x &lt;&lt; ' ';\n    cout &lt;&lt; endl\n        &lt;&lt; anw.size();\n    return anw;\n}\n\n\n//\u200b\u7ebf\u6027\u200b\u7b5b\u200b\nvector&lt;int&gt; get_prime_update_On(int n) {\n    vector&lt;bool&gt; is_prime(n + 1, true);\n    vector&lt;int&gt; anw;\n\n    for (int i = 2; i &lt;= n; i++) {\n        if (is_prime[i])\n            anw.push_back(i);\n        for (int j = 0; anw[j] &lt;= n / i; j++) {\n            is_prime[anw[j] * i] = false;\n            if (i % anw[j] == 0)\n                break;\n        }\n    }\n\n    for (auto x : anw)\n        cout &lt;&lt; x &lt;&lt; ' ';\n    cout &lt;&lt; endl\n        &lt;&lt; anw.size();\n    return anw;\n}\n\nint main() {\n    int n = 20;\n    vector&lt;int&gt; anw = get_prime_update_On(n);\n\n    return 0;\n}\n</code></pre>"},{"location":"backend/algorithm/#_15","title":"\u8fdb\u5236\u200b\u8f6c\u6362","text":"<p>\u200b\u9664\u4ee5\u200b\u57fa\u6570\u200b\u53d6\u4f59\u200b\uff08\u200b\u5148\u200b\u5f97\u5230\u200b\u7684\u200b\u662f\u200b\u4f4e\u4f4d\u200b\uff09 <pre><code>void change_base(int n, const int base) {\n    string anw;\n    do {\n        anw = to_string(n % base) + anw;\n        n /= base;\n    } while (n &gt; 0);\n    cout &lt;&lt; anw;\n}\n</code></pre></p>"},{"location":"backend/algorithm/#_16","title":"\u6a21\u677f","text":""},{"location":"backend/algorithm/#_17","title":"\u5206\u7ec4\u200b\u5224\u65ad","text":"<p>\u200b\u53cc\u200b\u6307\u9488\u200b\u7684\u200b\u4e00\u79cd\u200b\uff0c\u200b\u4e5f\u200b\u8fd8\u884c\u200b\uff0c\u200b\u53cc\u200b\u6307\u9488\u200b\u6709\u65f6\u5019\u200b\u5199\u200b\u4e0d\u597d\u200b\u8fd8\u8981\u200b\u5224\u65ad\u200b\u6700\u540e\u200b\u4e00\u6bb5\u200b\uff0c\u200b\u4f8b\u9898\u200b\u4e3a\u529b\u200b\u6263\u200b 1146</p> <p>\u200b\u4f8b\u9898\u200b\u5408\u96c6\u200b</p> \u200b\u53cc\u200b\u6307\u9488\u200b\u5206\u7ec4\u200b\u5224\u65ad\u200b <pre><code>class Solution {\npublic:\n    int maxPower(string s) {\n        int anw = 0;\n        for (int left = 0, right = 0; right &lt; s.size(); right++) {\n            if (right &lt; s.size() - 1 &amp;&amp; s[right] == s[right + 1]) continue;\n            anw = max(anw, right - left + 1);\n            left = right + 1;\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int maxPower(string s) {\n        int anw = 0;\n        int begin = 0;\n        while (begin &lt; s.size()) {\n            int tem = begin;\n            while (s[begin] == s[begin + 1]) begin++;\n            anw = max(anw, begin - tem + 1);\n            begin++;\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u5176\u5b9e\u200b\u8fd9\u4e2a\u200b\u4e5f\u200b\u80fd\u200b\u6539\u9020\u200b <code>for</code> \uff0c\u200b\u4f46\u662f\u200b\u611f\u89c9\u200b <code>while</code> \u200b\u601d\u8def\u200b\u66f4\u200b\u6d41\u7545\u200b\uff0c\u200b\u4f8b\u5b50\u200b\uff1a\u200b\u529b\u6263\u200b 2110</p> <pre><code>int i = 0;\nwhile (i &lt; prices.size()) {\n    int tem = i;\n    while (i + 1 &lt; prices.size() &amp;&amp; prices[i + 1] + 1 == prices[i]) i++;\n    int len = i - tem + 1;\n    anw += (1ll + len) * len / 2;\n    i++;\n}\n</code></pre> <pre><code>for (int i = 0; i &lt; prices.size(); i++) {\n    int tem = i;\n    while (i + 1 &lt; prices.size() &amp;&amp; prices[i + 1] + 1 == prices[i]) i++;\n    int len = i - tem + 1;\n    anw += (1ll + len) * len / 2;\n}\n</code></pre>"},{"location":"backend/algorithm/#_18","title":"\u5f52\u5e76\u200b\u6392\u5e8f","text":"normalimprove <pre><code>#include \"vector\"\n#include \"iostream\"\n#include \"algorithm\"\n\n\nusing namespace std;\n\nvoid check(vector&lt;int&gt; checkitem) {\n    for (int i : checkitem) {\n        cout &lt;&lt; i &lt;&lt; ' ';\n    }\n    cout &lt;&lt; endl;\n}\n\nvoid mergeCore(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;aux, int lo, int hi) {\n    if (lo &gt;= hi) return;\n    int mid = (lo + hi) / 2;\n\n    mergeCore(a, aux, lo, mid);\n    mergeCore(a, aux, mid + 1, hi);\n\n    int i = lo, j = mid + 1, k = lo;\n\n    while (i &lt;= mid &amp;&amp; j &lt;= hi) {\n        if (a[i] &lt; a[j])\n            aux[k++] = a[i++];\n        else aux[k++] = a[j++];\n    }\n    while (i &lt;= mid) aux[k++] = a[i++];\n    while (j &lt;= hi) aux[k++] = a[j++];\n\n    for (int ti = lo, tk = lo; ti &lt;= hi; ti++, tk++)\n        a[ti] = aux[tk];\n\n\n}\n\nvoid mergeSort(vector&lt;int&gt; &amp;a, int lo, int hi) {\n    auto aux = a;\n    mergeCore(a, aux, lo, hi);\n\n}\n\nvoid testSort() {\n\n    vector&lt;int&gt; pre = {20, 19, 18, 17, 16};\n\n\n    vector&lt;int&gt; anw = pre;\n    std::sort(anw.begin(), anw.end());\n\n    mergeSort(pre, 0, pre.size() - 1);\n\n    check(pre);\n\n}\n\nint main() {\n    testSort();\n    return 0;\n}\n</code></pre> <pre><code>#include \"vector\"\n#include \"iostream\"\n#include \"algorithm\"\n\n\nusing namespace std;\n\nvoid check(vector&lt;int&gt; checkitem) {\n    for (int i: checkitem) {\n        cout &lt;&lt; i &lt;&lt; ' ';\n    }\n    cout &lt;&lt; endl;\n}\n\nvoid mergeCore(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;aux, int lo, int hi) {\n    if (lo &gt;= hi) return;\n    int mid = (lo + hi) / 2;\n\n    mergeCore(aux, a, lo, mid);\n    mergeCore(aux, a, mid + 1, hi);\n\n    int i = lo, j = mid + 1, k = lo;\n\n    while (i &lt;= mid &amp;&amp; j &lt;= hi) {\n        if (a[i] &lt; a[j])\n            aux[k++] = a[i++];\n        else aux[k++] = a[j++];\n    }\n    while (i &lt;= mid) aux[k++] = a[i++];\n    while (j &lt;= hi) aux[k++] = a[j++];\n\n//    for (int ti = lo, tk = lo; ti &lt;= hi; ti++, tk++)\n//        a[ti] = aux[tk];\n\n\n}\n\nvoid mergeSort(vector&lt;int&gt; &amp;a, int lo, int hi) {\n    auto aux = a;\n    mergeCore(a, aux, lo, hi);\n    a = aux;\n}\n\nvoid testSort() {\n\n    vector&lt;int&gt; pre = {20, 19, 18, 17, 16};\n\n\n    vector&lt;int&gt; anw = pre;\n    std::sort(anw.begin(), anw.end());\n\n    mergeSort(pre, 0, pre.size() - 1);\n\n    check(pre);\n\n}\n\nint main() {\n    testSort();\n    return 0;\n}\n</code></pre>"},{"location":"backend/algorithm/#dp","title":"DP","text":""},{"location":"backend/algorithm/#_19","title":"\u80cc\u5305","text":"<p>\u200b\u7ecf\u8fc7\u200b\u7a7a\u95f4\u200b\u4f18\u5316\u200b\u540e\u6210\u200b\u4e00\u7ef4\u200b\u7684\u200b\u80cc\u5305\u200b\u95ee\u9898\u200b\uff0c\u200b\u76f4\u63a5\u200b\u5199\u200b\u8f6c\u79fb\u200b\u65b9\u7a0b\u200b\u52a0\u200b\u5224\u65ad\u200b\u6761\u4ef6\u200b\uff0c\u200b\u4f46\u662f\u200b\u8111\u4e2d\u200b\u60f3\u200b\u7684\u200b\u662f\u200b\u4e8c\u7ef4\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5199\u200b\u7684\u200b\u662f\u200b\u4e00\u7ef4\u200b\u5316\u7b80\u200b</p> <p>01 \u200b\u80cc\u5305\u200b\u6c42\u200b\u6700\u5927\u503c\u200b </p> \\[ f[i][w]=max(f[i-1][w],value[i-1]+f[i][w-weight[i-1]]) \\] <pre><code>for (int i = 1; i &lt;= stones.size(); i++) {\n    for (int w = target; w &gt;= 0; w--) {\n        if (w &gt;= stones[i - 1])\n            f[w] = max(f[w],\n                       stones[i - 1] + f[w - stones[i - 1]]);\n    }\n}\n</code></pre> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u53bb\u6389\u200b\u7269\u54c1\u200b\u7ef4\u5ea6\u200b\u540e\u200b\u4f53\u79ef\u200b\u4ece\u200b\u4e0d\u540c\u200b\u987a\u5e8f\u200b\u679a\u4e3e\u200b</p> <ul> <li>01\u200b\u80cc\u5305\u200b\u8ba1\u7b97\u200b\u672c\u5c42\u200b <code>f[x][y]</code> \u200b\u7528\u5230\u200b\u4e0a\u200b\u4e00\u5c42\u200b\u7684\u200b\u524d\u8fb9\u200b <code>f[x-1][a] a&lt;y</code> \u200b\u548c\u200b\u4e0a\u200b\u4e00\u5c42\u200b\u7684\u200b\u4e0a\u4f4d\u200b <code>f[x-1][y]</code>\uff0c\u200b\u4e3a\u4e86\u200b\u907f\u514d\u200b\u4e0a\u200b\u4e00\u5c42\u200b\u7684\u200b\u503c\u200b\u88ab\u200b\u672c\u5c42\u200b\u7684\u200b\u503c\u200b\u8986\u76d6\u200b\u4e86\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4ece\u540e\u200b\u5f80\u524d\u200b\u679a\u4e3e\u200b\u4f53\u79ef\u200b\uff1b\u200b\u753b\u200b\u4e00\u4e0b\u200b\u5c31\u200b\u660e\u767d\u200b\u4e86\u200b</li> <li>\u200b\u5b8c\u5168\u200b\u80cc\u5305\u200b\u516c\u5f0f\u200b\u63a8\u5bfc\u200b\u540e\u200b <code>f[x][y]</code> \u200b\u7528\u200b\u7684\u200b\u662f\u200b\u672c\u5c42\u200b\u7684\u200b\u524d\u8fb9\u200b <code>f[x][a] a&lt;y</code> \u200b\u548c\u200b\u4e0a\u200b\u4e00\u5c42\u200b\u7684\u200b\u4e0a\u4f4d\u200b <code>f[x-1][y]</code>\uff0c\u200b\u6240\u4ee5\u200b\u4ece\u5927\u5230\u200b\u5c0f\u200b\u679a\u4e3e\u200b\u4f53\u79ef\u200b</li> </ul>"},{"location":"backend/algorithm/#_20","title":"\u533a\u95f4","text":"<p>Q: \u200b\u4e3a\u4ec0\u4e48\u200b\u533a\u95f4\u200bdp\u200b\u5148\u200b\u679a\u4e3e\u200b\u957f\u5ea6\u200b\u518d\u200b\u679a\u4e3e\u200b\u5de6\u200b\u7aef\u70b9\u200b</p> <p>A: \u200b\u9632\u6b62\u200b\u7528\u5230\u200b\u8fd8\u200b\u6ca1\u7b97\u200b\u597d\u200b\u7684\u200b\u5c0f\u200b\u533a\u95f4\u200b </p> <p>eg:\u200b\u6700\u957f\u200b\u56de\u200b\u6587\u5b57\u4e32\u200b\"aaaaa\"</p> <p>\u200b\u7528\u200b <code>dp[0][4]</code> \u200b\u7684\u200b\u65f6\u5019\u200b\u5e94\u8be5\u200b\u5148\u7b97\u200b <code>dp[1][3]</code> ,\u200b\u4f46\u662f\u200b\u5148\u200b\u679a\u4e3e\u200b\u5de6\u200b\u7aef\u70b9\u200b\u7684\u8bdd\u200b\u5c31\u200b\u6ca1\u200b\u505a\u5230\u200b\u5148\u7b97\u200b <code>dp[1][3]</code></p> wrong answer <pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n\n        vector&lt;vector&lt;bool&gt;&gt; dp(s.size(), vector(s.size(), false));\n        pair&lt;int, int&gt; anw = {0, 1};\n        for (int i = 0; i &lt; s.size() - 1; ++i) {\n            dp[i][i] = true;\n            if (s[i] == s[i + 1]) {\n                dp[i][i + 1] = true;\n                anw = {i, 2};\n            }\n        }\n        dp[s.size() - 1][s.size() - 1] = true;\n\n\n        for (int l = 0; l &lt; s.size(); ++l) {\n            for (int len = 2; len &lt;= s.size(); ++len) {\n                if(len+l-1&gt;=s.size()) continue;\n                int r = l + len - 1;\n\n                if (dp[l + 1][r - 1] == true &amp;&amp; s[l] == s[r]) {\n                    dp[l][r] = true;\n                    cout&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;endl;\n                    if (len &gt; anw.second)\n                        anw = {l, len};\n                }\n            }\n        }\n\n        return s.substr(anw.first, anw.second);\n\n    }\n};\n</code></pre> correct answer <pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n        if (s.size() == 0 || s.size() == 1) return s;\n        vector&lt;vector&lt;bool&gt;&gt; dp(s.size(), vector&lt;bool&gt;(s.size()));\n        int maxlen = 1, begin = 0;\n        for (int i = 0; i &lt; s.size(); i++) {\n            dp[i][i] = true;\n            if (i &lt; s.size() - 1 &amp;&amp; s[i] == s[i + 1]) {\n                dp[i][i + 1] = true;\n                begin = i;\n                maxlen = 2;\n            }\n        }\n\n        for (int len = 2; len &lt;= s.size(); len++)\n            for (int i = 0; i + len - 1 &lt; s.size(); i++) {\n                int r = i + len - 1;\n                if (s[i] == s[r] &amp;&amp; dp[i + 1][r - 1] == true) {\n                    dp[i][r] = true;\n                    maxlen = len;\n                    begin = i;\n                }\n            }\n\n        return s.substr(begin, maxlen);\n    }\n};\n</code></pre>"},{"location":"backend/algorithm/#_21","title":"\u8bb0\u5fc6\u200b\u5316\u200b\u641c\u7d22","text":"<p>\u200b\u770b\u535a\u4e3b\u5bab\u200b\u6c34\u200b\u4e09\u53f6\u200b\u7684\u200b\u5237\u9898\u200b\u7b14\u8bb0\u200b\u7684\u200b\u65f6\u5019\u200b\u770b\u5230\u200b\uff1a\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5148\u60f3\u200b\u51fa\u200b dfs \u200b\u600e\u4e48\u200b\u505a\u200b\uff0c\u200b\u7136\u540e\u200b\u770b\u200bdfs\u200b\u7528\u5230\u200b\u4e86\u200b\u51e0\u4e2a\u200b\u53ef\u53d8\u200b\u7ef4\u5ea6\u200b\uff0c\u200b\u5c31\u662f\u200b dp \u200b\u7684\u200b\u7ef4\u5ea6\u200b\uff0c\u200b\u8f6c\u200b\u6210\u200b dp</p> <p>oi\u200b\u4ecb\u7ecd\u200b</p> <p>\u200b\u6700\u957f\u200b\u4e0a\u5347\u200b\u5b50\u200b\u5e8f\u5217\u200b</p> <p>\u200b\u5728\u200b\u539f\u59cb\u200bdfs\u200b\u4e2d\u200b\uff0c\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u5f88\u591a\u200b\u91cd\u590d\u200b\u6ca1\u6709\u200b\u7528\u200b\u7684\u200b\u8ba1\u7b97\u200b\u3002</p> <p>\u200b\u6c42\u200b\u6570\u5b57\u200b8\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u65f6\u200b\uff0c\u200b\u628a\u200b\u4e4b\u524d\u200b\u7684\u200b3\uff0c1\uff0c2\u200b\u7b49\u200b\u5c31\u200b\u91cd\u590d\u200b\u7b97\u4e86\u200b\u3002</p> <pre><code>7\n3 1 2 1 8 5 6\n</code></pre> \u200b\u539f\u59cb\u200bdfs <pre><code>#include \"bits/stdc++.h\"\n\nusing namespace std;\n\nconst int N = 1010;\nint res = 0;\nint a[N];\nint dp[N];\nint n;\n\nint solve(int po) {\n    dp[po] = 1;\n    for (int i = 0; i &lt; po; ++i) {\n        if (a[i] &lt; a[po]) dp[po] = max(dp[po], solve(i) + 1);\n    }\n    return dp[po];\n}\n\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = 0; i &lt; n; ++i) {\n        res = max(res, solve(i));\n    }\n    cout &lt;&lt; res;\n    return 0;\n}\n</code></pre> <p>\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u5c31\u5b58\u200b\u4e00\u4e2a\u200b\u8bb0\u5fc6\u200b\u5316\u200b\u6570\u7ec4\u200b\uff0c\u200b\u5982\u679c\u200b\u4e4b\u524d\u200b\u7b97\u8fc7\u200b\u4e86\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\u7b97\u597d\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u5426\u5219\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u7b97\u200b</p> \u200b\u8bb0\u5fc6\u200b\u5316\u200b <pre><code>#include \"bits/stdc++.h\"\n\nusing namespace std;\n\nconst int N = 1010;\nint res = 0;\nint a[N];\nint dp[N];\nint n;\n\nint solve(int po) {\n    // \u200b\u7b97\u597d\u200b\u4e86\u200b\u5c31\u200b\u8fd4\u56de\u200b\n    if (dp[po] != -1) return dp[po];\n\n    dp[po] = 1;\n    for (int i = 0; i &lt; po; ++i) {\n        if (a[i] &lt; a[po]) dp[po] = max(dp[po], solve(i) + 1);\n    }\n    return dp[po];\n}\n\nint main() {\n\n    ::memset(dp, -1, sizeof dp);\n\n\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = 0; i &lt; n; ++i) {\n        res = max(res, solve(i));\n    }\n    cout &lt;&lt; res;\n    return 0;\n}\n</code></pre>"},{"location":"backend/effectivecpp/","title":"C++","text":""},{"location":"backend/effectivecpp/#cheat-sheet","title":"cheat sheet","text":"<ul> <li><code>isalpha</code> \u200b\u5927\u5c0f\u5199\u200b\u82f1\u6587\u5b57\u6bcd\u200b</li> <li><code>isdight</code> 0-9</li> <li><code>isalnum</code> \u200b\u4e0a\u8fb9\u200b\u4e24\u4e2a\u200b</li> <li><code>isblank</code> <code>\\t</code> \u200b\u548c\u200b\u7a7a\u683c\u200b</li> <li><code>stoi</code> \u200b\u5b57\u7b26\u4e32\u200b\u53d8\u200b\u6570\u5b57\u200b</li> <li><code>to_string</code> \u200b\u6570\u5b57\u200b\u53d8\u200b\u5b57\u7b26\u4e32\u200b</li> <li><code>1ll</code> \u200b\u53c2\u4e0e\u200b <code>int</code> \u200b\u8ba1\u7b97\u200b\u65f6\u200b\u5c06\u200b\u7ed3\u679c\u200b\u8f6c\u4e3a\u200b <code>long long</code> <code>1ll+anw</code></li> <li><code>floor(double x)</code> \u200b\u5411\u4e0b\u200b\u53d6\u6574\u200b</li> <li><code>ceil(double x)</code> \u200b\u5411\u4e0a\u200b\u53d6\u6574\u200b</li> <li><code>memeset</code> \u200b\u53ea\u200b\u7528\u6765\u200b\u8d4b\u200b 0 \u200b\u6216\u8005\u200b -1</li> <li><code>string x.replace(int pos,int n,string new_str)</code> \u200b\u6548\u679c\u200b\u4e3a\u200b\uff1a\u200b\u4ece\u200b\u4e0b\u6807\u200b\u4e3a\u200b pos \u200b\u7684\u200b\u4f4d\u7f6e\u200b\u5f00\u59cb\u200b\u6570\u200b n \u200b\u4e2a\u5b57\u7b26\u200b\uff08pos \u200b\u4e5f\u200b\u7b97\u200b\u4e00\u4e2a\u200b\uff09\uff0c\u200b\u628a\u200b\u4ed6\u4eec\u200b\u5220\u9664\u200b\uff0c\u200b\u518d\u200b\u63d2\u5165\u200b new_str \uff0c\u200b\u53ef\u4ee5\u200b\u914d\u5408\u200b <code>x.find()</code> \u200b\u4f7f\u7528\u200b</li> <li>vector\u200b\u5220\u9664\u200b\u7279\u5b9a\u200b\u5143\u7d20\u200b <code>nums.erase(remove(nums.begin(), nums.end(), val) ,nums.end());</code></li> </ul> <p><code>stringstream</code> \u200b\u7528\u6cd5\u200b - \u200b\u6700\u597d\u200b\u4e0d\u8981\u200b\u6df7\u7740\u200b\u7528\u200b\u8f93\u5165\u8f93\u51fa\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u7528\u200b\u7684\u200b\u65f6\u5019\u200b\u53ea\u7528\u200b\u4e00\u4e2a\u200b\u65b9\u5411\u200b\uff0c\u200b\u8981\u662f\u200b\u6362\u200b\u65b9\u5411\u200b\u9700\u8981\u200b <code>ss.str(string()); ss.clear()</code> \u200b\u76f8\u5f53\u4e8e\u200b\u7528\u200b\u4e00\u4e2a\u200b\u7a7a\u200b\u5b57\u7b26\u4e32\u200b\u53d6\u4ee3\u200b\u539f\u6765\u200b\u5185\u5bb9\u200b - \u200b\u7528\u4f8b\u200b\uff1a\u200b\u53bb\u9664\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u7a7a\u683c\u200b\uff0c\u200b\u7528\u200b <code>&gt;&gt;</code> \u200b\u7684\u200b\u597d\u5904\u200b\u662f\u200b\u53ef\u4ee5\u200b\u5ffd\u7565\u200b\u6240\u6709\u200b\u7a7a\u683c\u200b\uff0c\u200b\u7528\u200b <code>getline</code> \u200b\u7684\u200b\u597d\u5904\u200b\u662f\u200b\u53ef\u4ee5\u200b\u6307\u5b9a\u200b\u5206\u9694\u7b26\u200b\uff0c\u200b\u4f46\u662f\u200b\u591a\u4e2a\u200b\u5206\u9694\u7b26\u200b\u5224\u65ad\u200b\u4e3a\u200b\u7a7a\u4e32\u200b,\u200b\u548c\u200b Python \u200b\u6548\u679c\u200b\u4e00\u6837\u200b\uff0c\u200b\u90fd\u200b\u6ca1\u6cd5\u200b\u5206\u8fa8\u200b\u7684\u200b\uff0c<code>['', 'aa', 'aaa', '', '', '', 'aa', 'aaa', '', '', 'a', 'aa', '', '', '']</code> - \u200b\u7701\u6d41\u200b\uff1a\u200b\u5982\u679c\u200b\u5b57\u7b26\u4e32\u200b\u6bd4\u8f83\u200b\u597d\u200b\uff0c\u200b\u6ca1\u6709\u200b\u524d\u5bfc\u200b\u548c\u200b\u5c3e\u200b\u7a7a\u683c\u200b\uff0c\u200b\u4e2d\u95f4\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u7a7a\u683c\u200b\uff0c\u200b\u7528\u200b <code>getline</code> \u200b\u548c\u200b <code>&gt;&gt;</code> \u200b\u90fd\u884c\u200b\uff0c\u200b\u4e0d\u7136\u200b\u7528\u200b <code>&gt;&gt;</code> \u200b\u6548\u679c\u200b\u597d\u200b</p> <pre><code>void learn() {\n    string input = \" aa aaa    aa aaa   a aa   \";\n    string cache;\n\n    stringstream ss(input);\n\n    vector&lt;string&gt; res;\n    while (ss &gt;&gt; cache) {\n        res.emplace_back(cache);\n    }\n    for (string a: res) {\n        cout &lt;&lt; a &lt;&lt; '+';\n    }\n    cout &lt;&lt; endl;\n\n    // Clear the stringstream before using it for output\n    ss.str(string()); // Clear the contents\n    ss.clear(); // Reset the stream state\n\n    ss &lt;&lt; input;\n    vector&lt;string&gt; other;\n\n    while (getline(ss, cache, ' ')) {\n        other.emplace_back(cache);\n    }\n    for (string a: other)\n        cout &lt;&lt; a &lt;&lt; '+';\n}\n\n//aa+aaa+aa+aaa+a+aa+        \n//+aa+aaa++++aa+aaa+++a+aa+++\n</code></pre>"},{"location":"backend/effectivecpp/#pointer-vs-reference","title":"pointer vs reference","text":"<p>pointer\uff1a</p> <ul> <li>\u200b\u4e0d\u540c\u200b\u65f6\u95f4\u200b\u6307\u5411\u200b\u4e0d\u540c\u200b\u7684\u200b\u7269\u4f53\u200b</li> <li>\u200b\u6709\u200b\u53ef\u80fd\u200b\u6307\u5411\u200bnull</li> </ul> <p>reference\uff1a</p> <ul> <li>\u200b\u4e0d\u4f1a\u200b\u4e3a\u7a7a\u200b\uff08\u200b\u4e00\u5b9a\u200b\u6307\u5411\u200b\u67d0\u4e2a\u200b\u7269\u4f53\u200b\uff09\uff0c\u200b\u4e0d\u7528\u200b\u68c0\u67e5\u200bnull\uff0c\u200b\u6240\u4ee5\u200b\u521b\u5efa\u200b\u7684\u200b\u65f6\u5019\u200b\u5c31\u200b\u521d\u59cb\u5316\u200b\uff08\u200b\u8d4b\u503c\u200b\uff09</li> </ul> <p>const pointer</p> <p>\u200b\u4ece\u53f3\u5f80\u200b\u5de6\u8bfb\u200b\uff0c\u200b\u9047\u5230\u200b <code>*</code> \u200b\u66ff\u6362\u6210\u200b a point to </p> <ul> <li><code>const int * p</code>: p is a pointer to int const</li> <li><code>int const * p</code>: p is a pointer to const int</li> </ul> <p>\u200b\u4e00\u53e5\u200b\u8bdd\u200b\u6982\u62ec\u200b\uff1a <code>*</code> \u200b\u524d\u200b\u4fee\u9970\u200b\u7684\u200b\u88ab\u200b\u6307\u5411\u200b\u5bf9\u8c61\u200b\uff0c <code>*</code> \u200b\u540e\u200b\u662f\u200b\u4fee\u9970\u200b\u6307\u9488\u200b\u3002\u200b\u6765\u6e90\u200b</p> <pre><code>char p1[] = \"hello\";\nchar* npnd = p1;             // non-const pointer,non-const data\nconst char* npcd = p1;       // non-const pointer,const data\nchar* const cpnd = p1;       // const pointer,non-const data\nconst char* const cpcd = p1; // const pointer,const data\n</code></pre>"},{"location":"backend/effectivecpp/#y-p","title":"y = *p++","text":"<p>tldr\uff1a\u200b\u5148\u53d6\u200b\u5185\u5bb9\u200b\uff0c\u200b\u7136\u540e\u200b\u6307\u9488\u200b\u52a0\u4e00\u200b</p> <ol> <li>\u200b\u4ece\u5de6\u5f80\u53f3\u200b\u8bfb\u200b</li> <li><code>*</code> \u200b\u548c\u200b <code>++</code> \u200b\u662f\u4ece\u200b\u53f3\u5411\u200b\u5de6\u200b\u7ed3\u5408\u200b\u7684\u200b\uff0c<code>y = *p++ -&gt; y = *(p++)</code> \u200b\u6211\u4eec\u200b\u77e5\u9053\u200b <code>x = 0; y = x++;</code> y \u200b\u662f\u200b 0\uff0c\u200b\u7c7b\u6bd4\u200b\u8fc7\u6765\u200b\u5c31\u662f\u200b <code>y = *p;p++;</code></li> </ol> <p>\u200b\u518d\u4e3e\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\uff1a<code>++*p</code> \u200b\u8f6c\u200b\u6210\u200b <code>++(*p)</code>\uff0c\u200b\u5c31\u662f\u200b\u628a\u200b\u5185\u5bb9\u200b\u53d6\u51fa\u200b\u6765\u200b\uff0c\u200b\u5185\u5bb9\u200b\u52a0\u4e00\u200b\uff1b<code>++*p</code> \u200b\u7b49\u4ef7\u200b\u4e8e\u200b <code>(*p)++</code>  \u200b\u4f46\u662f\u200b\u4e0d\u200b\u7b49\u4e8e\u200b <code>*p++</code></p> <p>\u200b\u6700\u597d\u200b\u4e0d\u200b\u8fd9\u4e48\u200b\u5199\u200b\uff1b\u200b\u4e0d\u662f\u200b\u6700\u200b\u4e00\u76ee\u4e86\u7136\u200b\ud83d\ude0b</p>"},{"location":"backend/effectivecpp/#_1","title":"\u7c7b\u578b\u8f6c\u6362","text":"<p><code>const_cast&lt; &gt;</code> \u200b\u628a\u200bconst\u200b\u8f6c\u4e3a\u200b\u975e\u200bconst\uff0c\u200b\u53bb\u6389\u200bconstness\u200b\u6216\u8005\u200bvolatileness</p> <pre><code>int x = 10;\nconst int&amp; cx = x;\nconst_cast&lt;int&amp;&gt;(cx) = 2;\n</code></pre> <p><code>dynamic_cast&lt; &gt;</code> \u200b\u5b89\u5168\u200b\u5730\u200b\u628a\u200b\u7236\u7c7b\u200b\u6307\u9488\u200b\u6216\u200b\u5f15\u7528\u200b\u8f6c\u6362\u6210\u200b\u5b50\u7c7b\u200b\u6307\u9488\u200b\u6216\u200b\u5f15\u7528\u200b</p> <ul> <li>\u200b\u6307\u9488\u200b\u8f6c\u6362\u200b\u5931\u8d25\u200b\uff1a\u200b\u4f20\u200b\u4e00\u4e2a\u200bnull\u200b\u6307\u9488\u200b</li> <li>\u200b\u5f15\u7528\u200b\u8f6c\u6362\u200b\u5931\u8d25\u200b\uff1a\u200b\u629b\u51fa\u200b\u5f02\u5e38\u200b<code>std::bad_cast</code></li> </ul> <p><code>static_cast&lt; &gt;</code> \u200b\u7c7b\u578b\u8f6c\u6362\u200b\u529f\u80fd\u200b\u591a\u200b\uff1a</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nenum class num {\n    first = 11,\n    second,\n    third\n};\n\nint main() {\n    num e = num::third;\n    // enum to int\n    int x = static_cast&lt;int&gt;(e);\n    cout &lt;&lt; x;\n    return 0;\n}\n</code></pre>"},{"location":"backend/effectivecpp/#_2","title":"\u4f7f\u7528\u200b\u524d\u5148\u200b\u521d\u59cb\u5316","text":"<ul> <li>\u200b\u63a8\u8350\u200b\u4f7f\u7528\u200b\u521d\u59cb\u5316\u200b\u5217\u8868\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b</li> <li>\u200b\u4e0d\u200b\u5728\u200b\u6784\u9020\u51fd\u6570\u200b\u5185\u200b\u8fdb\u884c\u200b\u8d4b\u503c\u200b\uff08\u200b\u6765\u200b\u63d0\u5347\u200b\u6548\u7387\u200b\uff09</li> <li>\u200b\u521d\u59cb\u5316\u200b\u5217\u8868\u200b\u7684\u200b\u987a\u5e8f\u200b\u548c\u200b\u58f0\u660e\u200b\u987a\u5e8f\u200b\u76f8\u540c\u200b\uff08\u200b\u7f16\u8bd1\u5668\u200b\u7ed9\u200b\u5148\u200b\u58f0\u660e\u200b\u7684\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b\uff09</li> </ul>"},{"location":"backend/effectivecpp/#_3","title":"\u4e0d\u200b\u60f3\u8981\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u7684\u200b\u51fd\u6570","text":"<p>\u200b\u5047\u5982\u200b\u4e0d\u200b\u60f3\u8981\u200b\u7f16\u8bd1\u5668\u200b\u81ea\u52a8\u200b\u4ea7\u751f\u200b\u7684\u200bcopy\u200b\u6784\u9020\u51fd\u6570\u200b\u548c\u200bcopy assignment\u200b\u64cd\u4f5c\u7b26\u200b\u53ef\u4ee5\u200b\u8fd9\u4e48\u200b\u505a\u200b\uff1a</p> <ul> <li>\u200b\u5c06\u200b\u51fd\u6570\u200b\u58f0\u660e\u200b\u4e3a\u200b<code>private</code>\u200b\u5e76\u4e14\u200b\u4e0d\u200b\u5b9e\u73b0\u200b</li> <li>\u200b\u6216\u8005\u200b\u5c06\u200b\u4ed6\u200b\u7684\u200b\u7236\u7c7b\u200b\u7684\u200b\u51fd\u6570\u200b\u58f0\u660e\u200b\u4e3a\u200b<code>private</code>\u200b\u5e76\u200b\u4f7f\u7528\u200b<code>private</code>\u200b\u7ee7\u627f\u200b</li> </ul> \u200b\u57fa\u7c7b\u200b\u6210\u5458\u200b \u200b\u516c\u6709\u200b\u6d3e\u751f\u200b \u200b\u79c1\u6709\u200b\u6d3e\u751f\u200b \u200b\u4fdd\u62a4\u200b\u6d3e\u751f\u200b private unvisited unvisited unvisited protected protected private protected public public private protected"},{"location":"backend/effectivecpp/#overload-and-override","title":"<code>overload</code> and <code>override</code>","text":"<ul> <li><code>overload</code> in same range, same function name,different args</li> <li><code>override</code> in different range(base and derived class), same function name, same args, but the function is virtual</li> <li><code>overwrite</code> in different range, same function name, same args, but the funciton is not virtual, function will hide the same in base class. \u200b\u51fd\u6570\u200b 'writeFunc' \u200b\u4ece\u200b \u200b\u7c7b\u200b 'father' \u200b\u4e2d\u200b\u9690\u85cf\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u975e\u200b\u865a\u62df\u200b\u51fd\u6570\u200b</li> </ul> <p>\u200b\u53c2\u8003\u200b</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass father {\npublic:\n    virtual void func(int a) {\n        cout &lt;&lt; \"in father virtual func\\n\";\n    }\n\n    void writeFunc(int x) {\n        cout &lt;&lt; \"in father overwrite func\\n\";\n    }\n};\n\nclass son : public father {\npublic:\n    //override\n    void func(int a) override {\n        cout &lt;&lt; \"in son override func\\n\";\n    }\n\n    void getMax(int a, int b) {\n        cout &lt;&lt; max(a, b) &lt;&lt; endl;\n    }\n\n    // overload\n    void getMax(int a, int b, int c) {\n        cout &lt;&lt; max(a, max(b, c)) &lt;&lt; endl;\n    }\n\n    //overwrite\n    void writeFunc(int x) {\n        cout &lt;&lt; \"in son wirte func\\n\";\n    }\n};\n\nvoid test() {\n    son s1;\n    s1.func(1);\n    s1.writeFunc(3);\n    s1.getMax(1, 2);\n    s1.getMax(3, 4, 5);\n}\n\nint main() {\n    test();\n    return 0;\n}\n</code></pre>"},{"location":"backend/effectivecpp/#c-qa","title":"C++ Q&amp;A","text":"<p>\u200b\u5f02\u6216\u200b\u4ea4\u6362\u200b\u53d8\u91cf\u200b\u4e0d\u597d\u200b</p> <p>\u200b\u4e3a\u4ec0\u4e48\u200b C++ \u200b\u6ca1\u6709\u200b <code>interface</code> ? </p> <p>\u200b\u6709\u200b\u4e00\u79cd\u200b\u8bf4\u6cd5\u200b\u662f\u200b C++ \u200b\u652f\u6301\u200b\u591a\u91cd\u200b\u7ee7\u627f\u200b\uff0c\u200b\u800c\u200b Java \u200b\u4e0d\u200b\u652f\u6301\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5c31\u200b\u6ca1\u200b\u8bbe\u8ba1\u200b\u5173\u952e\u5b57\u200b </p> <p><code>unorder_map.earse()</code>\uff0c\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\u6709\u200b\u4e00\u79cd\u200b\u79fb\u9664\u200b\u65b9\u5f0f\u200b\u662f\u200b\u6839\u636e\u200b\u952e\u200b\u79fb\u9664\u200b\uff0c\u200b\u5f88\u200b\u81ea\u7136\u200b\u60f3\u5230\u200b\u8fd9\u6837\u200b\u7684\u200b\u60c5\u51b5\u200b <pre><code>unordered_map&lt;int, int&gt; map;\nfor (int i = 1; i &lt;= 3; i++)\n    map[i] = 1;\nfor (auto x : map) {\n    map[x.first]--;\n    if (map[x.second] == 0) {\n        cout &lt;&lt; \"erase \" &lt;&lt; x.first &lt;&lt; endl;\n        map.erase(x.first);\n    }\n}\n</code></pre> \u200b\u7136\u540e\u200b\u5c31\u200b\u6b7b\u5faa\u73af\u200b\u4e86\u200b\uff0c\u200b\u975e\u5e38\u200b\u5947\u602a\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u200b\u5728\u200b\u5faa\u73af\u200b\u91cc\u200b\uff0c\u200b\u4e00\u4e2a\u4e2a\u200b\u7684\u200b\u79fb\u9664\u200b\u5c31\u200b\u6ca1\u200b\u95ee\u9898\u200b\u3002</p> <p><code>\\n</code> \u200b\u4e0d\u4f1a\u200b\u5f3a\u5236\u200b\u5237\u65b0\u200b\uff0c\u200b\u901f\u5ea6\u200b\u5feb\u200b\uff1b<code>endl</code> \u200b\u5f3a\u5236\u200b\u5237\u65b0\u200b\uff0c\u200b\u901f\u5ea6\u6162\u200b</p>"},{"location":"backend/leetcode/","title":"leetcode","text":""},{"location":"backend/leetcode/#_1","title":"\u5012\u6c34","text":"<p>\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5bb9\u91cf\u200b\u4e3a\u200b8, 5, 3\u200b\u7684\u200b\u6876\u200b\uff0c\u200b\u5176\u4e2d\u200b8\u200b\u4e3a\u200b\u6ee1\u200b\uff0c5\u200b\u548c\u200b3\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u53ea\u80fd\u200b\u5012\u200b\u6ee1\u200b\u548c\u200b\u5012\u7a7a\u200b\uff0c\u200b\u60f3\u200b\u4e00\u4e2a\u200b\u529e\u6cd5\u200b\u5f97\u5230\u200b4\u200b\u7684\u200b\u6c34\u200b</p> <p>bfs\uff0c\u200b\u6ce8\u610f\u200b\u641c\u8fc7\u200b\u7684\u200b\u72b6\u6001\u200b\u4e0d\u200b\u5728\u200b\u641c\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u53ea\u80fd\u200b\u5b58\u5230\u200b\u4e0a\u200b\u4e00\u6b65\u200b\u4e0d\u80fd\u200b\u5b58\u5230\u200b\u4e0a\u200b\u4e0a\u6b65\u200b\uff0c\u200b\u5f85\u200b\u89e3\u51b3\u200b</p> slove <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;set&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass state {\n    int bu8;\n    int bu5;\n    int bu3;\n    state * father;\n\npublic:\n    state(int bu8, int bu5, int bu3) : bu8(bu8), bu5(bu5), bu3(bu3) {}\n    vector&lt;state&gt; getPossState() {\n        vector&lt;state&gt; poss;\n        if (bu8 &gt; 0) {\n            if (bu5 &lt; 5) {\n                int loss = min(5 - bu5, bu8);\n                poss.push_back(state(bu8 - loss, bu5 + loss, bu3));\n            }\n            if (bu3 &lt; 3) {\n                int loss = min(3 - bu3, bu8);\n                poss.push_back(state(bu8 - loss, bu5, bu3 + loss));\n            }\n        }\n        if (bu5 &gt; 0) {\n            if (bu8 &lt; 8) {\n                int loss = min(8 - bu8, bu5);\n                poss.push_back(state(bu8 + loss, bu5 - loss, bu3));\n            }\n            if (bu3 &lt; 3) {\n                int loss = min(3 - bu3, bu5);\n                poss.push_back(state(bu8, bu5 - loss, bu3 + loss));\n            }\n        }\n        if (bu3 &gt; 0) {\n            if (bu8 &lt; 8) {\n                int loss = min(8 - bu8, bu3);\n                poss.push_back(state(bu8 + loss, bu5, bu3 - loss));\n            }\n            if (bu5 &lt; 5) {\n                int loss = min(5 - bu5, bu3);\n                poss.push_back(state(bu8, bu5 + loss, bu3 - loss));\n            }\n        }\n        return poss;\n    }\n\n    bool isAnw() {\n        return bu8 == 4 || bu3 == 4 || bu5 == 4;\n    }\n\n    int toInt() {\n        int anw = bu8;\n        anw *= 10;\n        anw += bu5;\n        anw *= 10;\n        anw += bu3;\n        return anw;\n    }\n\n    void setFather(state * fa) {\n        father = fa;\n    }\n\n    state * getFather() {\n        return father;\n    }\n};\n\n\n\nvoid test() {\n    int fat[900]; // fat store its father\n\n    state begin(8, 0, 0);\n    begin.setFather(nullptr);\n    fat[800] = 0;\n\n    queue&lt;state&gt; queue;\n    queue.push(begin);\n    set&lt;int&gt; visited;\n    visited.insert(begin.toInt());\n\n    while (!queue.empty()) {\n        auto top = queue.front();\n        queue.pop();\n\n        for (state x : top.getPossState()) {\n            if (visited.count(x.toInt()) == 0) {\n                visited.insert(x.toInt());\n                queue.push(x);\n                x.setFather(&amp;top);\n\n                fat[x.toInt()] = top.toInt();\n                cout &lt;&lt; x.toInt() &lt;&lt; \" father is \" &lt;&lt; x.getFather()-&gt;toInt()\n                    &lt;&lt; \" father'address is \" &lt;&lt; x.getFather() &lt;&lt; endl;\n            }\n            if (x.isAnw()) {\n                cout &lt;&lt; \"yes\\n\";\n                int k = x.toInt();\n                while (fat[k] != 0) {\n                    cout &lt;&lt; k &lt;&lt; ' ';\n                    k = fat[k];\n                }\n                cout &lt;&lt; endl;\n                // why this is wrong, only can store its father, cannot store\n                // its grandfather?\n\n                while (x.toInt() != 800) {\n                    cout &lt;&lt; x.toInt() &lt;&lt; ' ';\n                    x = *(x.getFather());\n                }\n            }\n        }\n    }\n}\n\n\nint main() {\n    cout &lt;&lt; endl;\n    test();\n\n    return 0;\n}\n</code></pre>"},{"location":"backend/leetcode/#3","title":"3 \u200b\u65e0\u200b\u91cd\u590d\u200b\u5b57\u7b26\u200b\u7684\u200b\u6700\u957f\u200b\u5b50\u4e32","text":"<p>\u200b\u8981\u6c42\u200b\u7684\u200b\u662f\u200b\u6700\u957f\u200b\u5b57\u4e32\u200b\uff08\u200b\u5c31\u662f\u200b\u8981\u200b\u6328\u7740\u200b\u7684\u200b\u5b57\u7b26\u200b\uff09\uff0c\u200b\u4e0d\u662f\u200b\u5b50\u200b\u5e8f\u5217\u200b</p> <p>\u200b\u5c0f\u200b\u6280\u5de7\u200b\uff1a\u200b\u628a\u200b\u5b57\u7b26\u4e32\u200b\u524d\u8fb9\u200b\u52a0\u200b\u4e00\u4e2a\u200b\u7a7a\u683c\u200b\u6216\u8005\u200b\u522b\u7684\u200b\u5360\u4f4d\u200b\uff0c\u200b\u8fd9\u6837\u200b\u8ba1\u6570\u200b\u7684\u200b\u65f6\u5019\u200b <code>dp[i]</code> \u200b\u5c31\u200b\u81ea\u7136\u200b\u7684\u200b\u8868\u793a\u200b\u4ee5\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u5b57\u6bcd\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u6027\u8d28\u200b\uff0c\u200b\u5f00\u200b\u7a7a\u95f4\u200b\u7528\u200b\u65b0\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u6b63\u5e38\u200b\u8bbf\u95ee\u200b</p> <p>\u200b\u89e3\u6cd5\u200b\u4e00\u200b\uff1a2024/1/19 \u200b\u60f3\u200b\u7684\u200b\u662f\u200b dp\uff0c\u200b\u4ee5\u200b <code>dp[i]</code> \u200b\u8868\u793a\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u5b57\u6bcd\u200b\u7ed3\u5c3e\u200b\uff08\u200b\u95ed\u200b\u533a\u95f4\u200b\uff09\u200b\u7684\u200b\u6700\u957f\u200b\u5b50\u4e32\u200b</p> <ul> <li>\u200b\u5982\u679c\u200b <code>str[i]</code> \u200b\u6ca1\u200b\u51fa\u73b0\u200b\u8fc7\u200b\uff0c <code>dp[i]=dp[i-1]+1</code></li> <li>\u200b\u5982\u679c\u200b\u51fa\u73b0\u200b\u8fc7\u200b\u4e86\u200b\uff0c\u200b\u5c31\u662f\u200b <code>dp[i]=i-\u200b\u4e0a\u200b\u4e00\u6b21\u200b\u51fa\u73b0\u200b\u7684\u200b\u4f4d\u7f6e\u200b</code>\uff0c\u200b\u7136\u540e\u200b\u63d0\u4ea4\u200b\u53d1\u73b0\u200b\u9519\u200b\u4e86\u200b <code>abba</code>\uff0c\u200b\u518d\u200b\u5206\u6790\u200b\u4e00\u4e0b\u200b\uff0c<ul> <li>\u200b\u5982\u679c\u200b\u4e0a\u200b\u4e00\u6b21\u200b a \u200b\u51fa\u73b0\u200b\u53f3\u8fb9\u200b\u6709\u200b\u91cd\u590d\u200b <code>eg: bb</code>\uff0c<code>dp[i]=dp[i-1]+1</code></li> <li>\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u91cd\u590d\u200b\uff0c<code>dp[i]=i-\u200b\u4e0a\u200b\u4e00\u6b21\u200b\u51fa\u73b0\u200b\u4f4d\u7f6e\u200b</code>\u3002\u200b\u603b\u4e4b\u200b\u5f97\u51fa\u200b\u5e94\u8be5\u200b\u662f\u200b\u4e24\u8005\u200b\u53d6\u5c0f\u200b</li> </ul> </li> <li>\u200b\u66f4\u65b0\u200b\u51fa\u73b0\u200b\u5f53\u524d\u200b\u5b57\u6bcd\u200b\u51fa\u73b0\u200b\u4f4d\u7f6e\u200b <pre><code>a |qbbc|a\n\nbb|...a....|a\n</code></pre></li> </ul> dp <pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        if (s.empty()) return 0;\n        s = ' ' + s;\n        int n = s.length();\n        vector&lt;int&gt; len(n, 0);\n        unordered_map&lt;char, int&gt; map;\n        for (int i = 1; i &lt; n; i++) {//\u200b\u5f00\u200b\u7a7a\u95f4\u200b\u540e\u200b\u6b63\u5e38\u200b\u8bbf\u95ee\u200b\uff0c\u200b\u4e0d\u7528\u200b\\&lt;=\n            if (map.count(s[i])) {\n                len[i] = min(i - map[s[i]], len[i - 1] + 1);\n            }\n            else len[i] = len[i - 1] + 1;\n            map[s[i]] = i;\n        }\n        return *max_element(len.begin(), len.end());\n    }\n};\n</code></pre> <p>\u200b\u89e3\u6cd5\u200b\u4e8c\u200b\uff1a\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\uff0c\u200b\u5f88\u591a\u200b\u89e3\u91ca\u200b\u90fd\u200b\u662f\u200b\u8fd9\u4e2a\u200b\uff0c\u200b\u5c31\u200b\u4e0d\u200b\u591a\u200b\u8bf4\u200b\u4e86\u200b\uff0c\u200b\u76f4\u63a5\u200b\u770b\u200b\u4ee3\u7801\u200b\u4e5f\u200b\u80fd\u200b\u660e\u767d\u200b</p> \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b <pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        if (s.size() == 0)\n            return 0;\n        unordered_map&lt;char, int&gt; cnt;\n\n        int anw = 0;\n        int l = 0, r = 0;\n        while (r &lt; s.size()) {\n            cnt[s[r]]++;\n            while (cnt[s[r]] &gt; 1) {\n                cnt[s[l]]--;\n                l++;\n            }\n            anw = max(anw, r - l + 1);\n            r++;\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#11","title":"11 \u200b\u76db\u200b\u6700\u591a\u6c34\u200b\u7684\u200b\u5bb9\u5668","text":"<p>\u200b\u53cc\u200b\u6307\u9488\u200b\u79fb\u52a8\u200b\u77ed\u677f\u200b\uff0c\u200b\u6b63\u786e\u6027\u200b\u8bc1\u660e\u200b</p> <pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt; &amp;height) {\n        int anw = 0;\n        int left = 0, right = height.size() - 1;\n        while (left &lt; right) {\n            int area = min(height[left], height[right]) * (right - left);\n            anw = max(anw, area);\n            if (height[left] &lt; height[right]) left++;\n            else right--;\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#15","title":"15 \u200b\u4e09\u6570\u200b\u4e4b\u200b\u548c","text":"<p>\u200b\u5148\u200b\u6392\u5e8f\u200b\uff0c\u200b\u53cc\u200b\u6307\u9488\u200b\uff0c\u200b\u4ece\u200b i+1 \u200b\u548c\u200b end \u200b\u627e\u200b\uff0c\u200b\u95ee\u9898\u200b\u5728\u4e8e\u200b\u53bb\u200b\u91cd\u200b\uff0c\u200b\u6bd4\u5982\u200b\u7528\u4f8b\u200b <code>[-1,0,1,2,-1,-4]</code>, <code>[-2,0,0,2,2]</code>\uff1b\u200b\u7531\u4e8e\u200b\u627e\u200b\u7684\u200b\u65f6\u5019\u200b\u662f\u4ece\u200b <code>[i+1, end]</code> \u200b\u627e\u200b\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u5224\u5b9a\u200b\u5c31\u662f\u200b <code>nums[i] == nums[i-1]</code>,\u200b\u7f51\u4e0a\u200b\u7684\u200b\u9898\u89e3\u200b\u90fd\u200b\u662f\u200b left \u200b\u548c\u200b\u4e0b\u200b\u4e00\u4f4d\u200b\u6bd4\u200b\u662f\u5426\u200b\u91cd\u590d\u200b\uff0c\u200b\u6700\u540e\u200b\u5728\u200b left++\uff0c\u200b\u6211\u200b\u89c9\u5f97\u200b\u8fd9\u6837\u200b\u5f88\u200b\u5bb9\u6613\u200b\u5fd8\u200b left++\uff0c\u200b\u4e0d\u5982\u200b\u76f4\u63a5\u200b\u7528\u200b\u4e24\u4e2a\u200b\u53d8\u91cf\u200b left_used, right_used \u200b\u8bb0\u5f55\u200b\uff0c\u200b\u4e0d\u7528\u200b\u6700\u540e\u200b\u518d\u200b left++\uff0c\u200b\u8fd9\u6837\u200b\u597d\u200b\u4e00\u4e9b\u200b\u3002\u200b\u53e6\u5916\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u63d0\u524d\u200b\u5224\u5b9a\u200b\u662f\u5426\u200b\u7ed3\u675f\u200b\uff0c<code>nums[i]&gt;0</code></p> <p>\u200b\u96be\u5ea6\u200b\u4e0d\u662f\u200b\u5f88\u5927\u200b\uff0c\u200b\u4f46\u662f\u200b\u7ec6\u8282\u200b\u6bd4\u8f83\u200b\u591a\u200b</p> \u200b\u53d8\u91cf\u200b\u4e0d\u7528\u200b\u53d8\u91cf\u200b <pre><code>class Solution {\npublic:\n    void test() {\n        vector&lt;int&gt; origin = {-2, 0, 0, 2, 2};\n        auto anw = threeSum(origin);\n        for (auto x : anw) {\n            for (auto y : x)\n                cout &lt;&lt; y &lt;&lt; ' ';\n            cout &lt;&lt; endl;\n        }\n    }\n\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; anw;\n        sort(nums.begin(), nums.end());\n\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            if (nums[i] &gt; 0)\n                break;\n            if (i &gt;= 1 &amp;&amp; nums[i - 1] == nums[i])\n                continue;\n\n            int left = i + 1, right = nums.size() - 1;\n\n            while (left &lt; right) {\n                int left_use = nums[left], right_use = nums[right];\n                int sum = left_use + right_use;\n                if (sum &gt; -1 * nums[i])\n                    right--;\n                else if (sum &lt; -1 * nums[i])\n                    left++;\n                else {\n                    anw.emplace_back(vector&lt;int&gt;{nums[i], left_use, right_use});\n                    while (left &lt; right &amp;&amp; nums[left] == left_use)\n                        left++;\n                    while (left &lt; right &amp;&amp; nums[right] == right_use)\n                        right--;\n                }\n            }\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    void test() {\n        vector&lt;int&gt; origin = {-2, 0, 0, 2, 2};\n        auto anw = threeSum(origin);\n        for (auto x: anw) {\n            for (auto y: x)\n                cout &lt;&lt; y &lt;&lt; ' ';\n            cout &lt;&lt; endl;\n        }\n    }\n\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt; &amp;nums) {\n        vector&lt;vector&lt;int&gt;&gt; anw;\n        sort(nums.begin(), nums.end());\n\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            if (nums[i] &gt; 0) break;\n            if (i &gt;= 1 &amp;&amp; nums[i - 1] == nums[i])\n                continue;\n\n            int left = i + 1, right = nums.size() - 1;\n\n            while (left &lt; right) {\n                int sum = nums[left] + nums[right];\n                if (sum &gt; -1 * nums[i])\n                    right--;\n                else if (sum &lt; -1 * nums[i])\n                    left++;\n                else {\n                    anw.emplace_back(vector&lt;int&gt;{nums[i], nums[left], nums[right]});\n                    while (left &lt; right &amp;&amp; nums[left] == nums[left + 1])\n                        left++;\n                    left++;\n                    while (left &lt; right &amp;&amp; nums[right] == nums[right - 1])\n                        right--;\n                    right--;\n                }\n            }\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#17","title":"17 \u200b\u7535\u8bdd\u53f7\u7801\u200b\u7ec4\u5408","text":"<p>\u200b\u5178\u578b\u200b\u56de\u6eaf\u200b</p> <pre><code>class Solution {\npublic:\n    unordered_map&lt;char, vector&lt;char&gt;&gt; orders;\n    vector&lt;string&gt; anw;\n    string res;\n\n    vector&lt;string&gt; letterCombinations(string digits) {\n        if(digits.empty()) return vector&lt;string&gt;{};\n        setting();\n        dfs(digits, 0);\n        return anw;\n    }\n\n    void dfs(const string&amp; digits, int now_index) {\n        if (now_index == digits.size()) {\n            anw.push_back(res);\n        }\n        for (int i = 0; i &lt; orders[digits[now_index]].size(); i++) {\n            res.push_back(orders[digits[now_index]][i]);\n            dfs(digits, now_index + 1);\n            res.pop_back();\n        }\n    }\n\n    void setting() {\n        orders['2'] = {'a', 'b', 'c'};\n        orders['3'] = {'d', 'e', 'f'};\n        orders['4'] = {'g', 'h', 'i'};\n        orders['5'] = {'j', 'k', 'l'};\n        orders['6'] = {'m', 'n', 'o'};\n        orders['7'] = {'p', 'q', 'r', 's'};\n        orders['8'] = {'t', 'u', 'v'};\n        orders['9'] = {'w', 'x', 'y', 'z'};\n    }\n};\n</code></pre> <p>\u200b\u8fd8\u6709\u200b\u4e00\u79cd\u200b\u8fed\u4ee3\u200b\u7684\u200b\u505a\u6cd5\u200b\uff0c\u200b\u627e\u200b\u7b1b\u5361\u5c14\u200b\u4e58\u79ef\u200b\uff0c\u200b\u90a3\u200b\u6211\u200b\u53ea\u8981\u200b\u628a\u200b\u4e0a\u6b21\u200b\u7ed3\u679c\u200b\u7684\u200b\u6bcf\u4e00\u9879\u200b\u90fd\u200b\u52a0\u4e00\u200b\u4e00\u4e2a\u200b\u5b57\u6bcd\u200b\u5c31\u884c\u4e86\u200b</p> <pre><code>def calc(phone: str):\n    kmaps = {\n        \"2\": \"abc\",\n        \"3\": \"def\",\n        \"4\": \"ghi\",\n        \"5\": \"jkl\",\n        \"6\": \"mno\",\n        \"7\": \"pqrs\",\n        \"8\": \"tuv\",\n        \"9\": \"wxyz\"\n    }\n    if phone == \"\":\n        return []\n\n    anw = [\"\"]\n    for digit in phone:\n        tem = []\n        for item in anw:\n            for choose in kmaps[digit]:\n                tem.append(item+choose)\n        anw = tem\n    print(anw)\n</code></pre>"},{"location":"backend/leetcode/#22","title":"22 \u200b\u62ec\u53f7\u200b\u751f\u6210","text":"<p>\u200b\u6700\u200b\u5f00\u59cb\u200b\u60f3\u200b\u7684\u200b\u662f\u200b\u5728\u200b\u5f53\u524d\u200b\u57fa\u7840\u200b\u524d\u8fb9\u200b\u52a0\u200b <code>()</code>\uff0c\u200b\u540e\u8fb9\u200b\u52a0\u200b <code>()</code>\uff0c\u200b\u5305\u88f9\u200b\u5f53\u524d\u200b <code>(cur)</code>\u3002\u200b\u7136\u540e\u200b\u9519\u200b\u4e86\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5c11\u200b\u4e86\u200b <code>(())(())</code> \u200b\u8fd9\u79cd\u200b\u3002</p> <p>\u200b\u8fd8\u200b\u5f97\u200b\u662f\u200b\u4e00\u6b21\u200b\u62fc\u63a5\u200b\u4e00\u4e2a\u200b <code>(</code> \u200b\u6216\u8005\u200b <code>)</code></p> <pre><code>class Solution {\npublic:\n    vector&lt;string&gt; generateParenthesis(int n) {\n        dfs(n, n);\n        return anw;\n    }\n\n    vector&lt;string&gt; anw;\n    string res;\n\n    void dfs(int left_can_use, int right_can_use) {\n        if (!left_can_use &amp;&amp; !right_can_use) {\n            anw.push_back(res);\n            return;\n        }\n\n        // \u200b\u4e00\u5b9a\u200b\u4e0d\u200b\u5b58\u5728\u200b\u6b63\u786e\u200b\u7684\u200b\u5339\u914d\u200b )(((((\n        if (left_can_use &gt; right_can_use) return; \n\n        if (left_can_use &gt; 0) {\n            res.push_back('(');\n            dfs(left_can_use - 1, right_can_use);\n            res.pop_back();\n        }\n        if (right_can_use &gt; 0) {\n            res.push_back(')');\n            dfs(left_can_use, right_can_use - 1);\n            res.pop_back();\n        }\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#23-k","title":"23 \u200b\u5408\u5e76\u200bk\u200b\u4e2a\u200b\u94fe\u8868","text":"<p>\u200b\u9898\u89e3\u200b</p> <p>\u200b\u7b2c\u4e00\u79cd\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u6311\u200b\u4e00\u4e2a\u200b\u7b54\u6848\u200b\uff0c\u200b\u5982\u679c\u200b\u540e\u9762\u200b\u8fd8\u6709\u200b\u8282\u70b9\u200b\uff0c\u200b\u6709\u200b\u53ef\u80fd\u200b\u662f\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u7b54\u6848\u200b\uff0c\u200b\u7528\u200b\u6700\u5c0f\u200b\u5806\u5b58\u200b</p> <pre><code>class Solution {\npublic:\n    ListNode *mergeKLists(vector&lt;ListNode *&gt; &amp;lists) {\n        auto cmp = [](ListNode *a, ListNode *b) {\n            return a-&gt;val &gt; b-&gt;val;\n        };\n        priority_queue&lt;ListNode *, vector&lt;ListNode *&gt;, decltype(cmp)&gt; pq;\n        for (auto item: lists) {\n            if (item) pq.push(item);\n        }\n        ListNode dummy(0);\n        ListNode *cur = &amp;dummy;\n        while (!pq.empty()) {\n            auto item = pq.top();\n            pq.pop();\n            if (item-&gt;next) { pq.push(item-&gt;next); }\n            cur-&gt;next = item;\n            cur = cur-&gt;next;\n        }\n        return dummy.next;\n    }\n};\n</code></pre> <p>\u200b\u7b2c\u4e8c\u79cd\u200b\uff0c\u200b\u7c7b\u4f3c\u200b\u5f52\u5e76\u200b\uff0c\u200b\u4e24\u200b\u4e24\u200b\u5408\u5e76\u200b\u6709\u5e8f\u200b\u94fe\u8868\u200b</p> <pre><code>class Solution {\npublic:\n    ListNode *mergeKLists(vector&lt;ListNode *&gt; &amp;lists) {\n        if(lists.empty()) return nullptr;\n        return mergePart(lists, 0, lists.size() - 1);\n    }\n\n    ListNode *mergePart(vector&lt;ListNode *&gt; &amp;lists, int left, int right){\n        if (left &gt;= right) return lists[left];\n        int mid = left + right &gt;&gt; 1;\n        auto leftHead = mergePart(lists, left, mid);\n        auto rightHead = mergePart(lists, mid + 1, right);\n        return mergeTwoList(leftHead, rightHead);\n    }\n\n    ListNode *mergeTwoList(ListNode *a, ListNode *b) {\n        ListNode dummy(0);\n        ListNode *cur = &amp;dummy;\n        while (a &amp;&amp; b) {\n            if (a-&gt;val &lt; b-&gt;val) {\n                cur-&gt;next = a;\n                a = a-&gt;next;\n            }\n            else {\n                cur-&gt;next = b;\n                b = b-&gt;next;\n            }\n            cur = cur-&gt;next;\n        }\n        cur-&gt;next = a ? a : b;\n        return dummy.next;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#24","title":"24 \u200b\u4e24\u200b\u4e24\u200b\u4ea4\u6362\u200b\u94fe\u8868","text":"\u975e\u200b\u9012\u5f52\u200b\u9012\u5f52\u200b <pre><code>class Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode* dummy = new ListNode(0);\n        dummy-&gt;next = head;\n        ListNode* n0 = dummy;\n        ListNode* n1 = head;\n        while (n1 &amp;&amp; n1-&gt;next) { // \u200b\u6709\u200b\u4e24\u4e2a\u200b\u70b9\u6765\u200b\u4e92\u6362\u200b\n            ListNode* n2 = n1-&gt;next;\n            ListNode* n3 = n2-&gt;next;\n\n            n0-&gt;next = n2;\n            n2-&gt;next = n1;\n            n1-&gt;next = n3;\n            n0 = n1;\n            n1 = n3;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    ListNode * swapPairs(ListNode * head) {\n        if (head == nullptr || head-&gt;next == nullptr) // \u200b\u8981\u6c42\u200b\u6709\u200b\u4e24\u4e2a\u200b\u70b9\u6765\u200b\u4e92\u6362\u200b\n            return head;\n\n        ListNode * n1 = head;\n        ListNode * n2 = n1-&gt;next;\n        ListNode * n3 = swapPairs(n2-&gt;next);\n\n        n1-&gt;next = n3;\n        n2-&gt;next = n1;\n        return n2;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#25-k","title":"25 k\u200b\u4e2a\u200b\u4e00\u7ec4\u200b\u53cd\u8f6c\u200b\u94fe\u8868","text":"<p>\u200b\u94fe\u8868\u200b\u64cd\u4f5c\u200b\u8fd8\u200b\u662f\u975e\u200b\u9012\u5f52\u200b\u7b26\u5408\u200b\u76f4\u89c9\u200b</p> \u200b\u975e\u200b\u9012\u5f52\u200b\u9012\u5f52\u200b <pre><code>class Solution {\npublic:\n    ListNode *reverseKGroup(ListNode *head, int k) {\n        ListNode *newHead = new ListNode(0);\n        newHead-&gt;next = head;\n        ListNode *n0 = newHead;\n        ListNode *n1 = n0-&gt;next;\n\n        while (n0) {\n            ListNode *nk = n0;\n            for (int cnt = 0; cnt &lt; k; cnt++) {\n                // nk \u200b\u5e76\u200b\u4e0d\u80fd\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u5982\u679c\u200b\u4e3a\u7a7a\u200b\u8bf4\u660e\u200b\u4e0d\u8db3\u200b k \u200b\u4e2a\u200b\u6765\u200b\u53cd\u8f6c\u200b\n                if (nk-&gt;next) nk = nk-&gt;next; \n                else return newHead-&gt;next;\n            }\n            ListNode *nkp1 = nk-&gt;next;  // nkp1 \u200b\u662f\u200b nk \u200b\u4e0b\u200b\u4e00\u4e2a\u70b9\u200b nk plus 1\n\n            n0-&gt;next = rev(n1, nullptr, k);\n            n1-&gt;next = nkp1;\n\n            n0 = n1;\n            n1 = nkp1;\n        }\n        return newHead-&gt;next;\n    }\n\n    // \u200b\u6b63\u5e38\u200b\u53cd\u8f6c\u200b\u94fe\u8868\u200b\n    ListNode *rev(ListNode *now, ListNode *pre, int k) {\n        if (now == nullptr || k == 0)\n            return pre;\n        ListNode *ne = now-&gt;next;\n        now-&gt;next = pre;\n        return rev(ne, now, k - 1);\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    ListNode * reverseKGroup(ListNode * head, int k) {\n        if(head == nullptr) return nullptr;\n        ListNode * n1 = head;\n        ListNode * nkp1 = n1;\n        for (int i = 0; i &lt; k; i++) {\n            if (nkp1) nkp1 = nkp1-&gt;next;\n            else return head;\n        }\n\n        nkp1 = reverseKGroup(nkp1, k);\n        ListNode * nk = rev(head, nullptr,k); // \u200b\u4e0d\u80fd\u200b\u548c\u200b\u4e0b\u200b\u4e00\u53e5\u200b\u8c03\u6362\u200b\uff0c\u200b\u5148\u200b\u56e0\u4e3a\u200b\u5148\u200b\u53cd\u8f6c\u200b\u5185\u90e8\u200b\uff0c\u200b\u6700\u540e\u200b\u6539\u200b n1 \u200b\u6307\u5411\u200b\n        n1-&gt;next = nkp1;\n        return nk;\n    }\n\n    ListNode * rev(ListNode * now, ListNode * pre, int k) {\n        if (now == nullptr || k == 0)\n            return pre;\n        ListNode * ne = now-&gt;next;\n        now-&gt;next = pre;\n        return rev(ne, now, k - 1);\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#26-80","title":"26 80 \u200b\u6570\u7ec4\u200b\u53bb\u200b\u91cd","text":"<p>\u200b\u5f53\u524d\u200b\u6570\u5b57\u200b\u548c\u200b\u7b54\u6848\u200b\u4e2d\u200b\u5f80\u524d\u200b\u6570\u7b2c\u200b len-k \u200b\u4e2a\u200b\u4e0d\u91cd\u200b\u5c31\u200b\u653e\u200b</p> <pre><code>class Solution {\npublic:\n    int removeDuplicates(vector&lt;int&gt; &amp; nums) {\n        return work(nums, 2);\n    }\n\n    int work(vector&lt;int&gt; nums, int k) {\n        int len = 0;\n        for (int x : nums)\n            if (len &lt; k || nums[len - k] != x)\n                nums[len++] = k;\n        return len;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#31","title":"31 \u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6392\u5217","text":"<p>\u200b\u9898\u89e3\u200b</p> <pre><code>class Solution {\npublic:\n    void nextPermutation(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() == 1)\n            return;\n        if (nums.size() == 2) {\n            swap(nums[0], nums[1]);\n            return;\n        }\n        int k = nums.size() - 2;\n        while (k &gt;= 0 &amp;&amp; nums[k] &gt;= nums[k + 1]) // \u200b\u4ece\u53f3\u200b\u5f80\u200b\u5de6\u200b\u627e\u200b\u7b2c\u4e00\u4e2a\u200b\u4e25\u683c\u200b\u5347\u5e8f\u200b\n            k--;\n        if (k &gt;= 0) { // \u200b\u5224\u65ad\u200b\u4e0d\u662f\u200b\u5168\u200b\u964d\u5e8f\u200b [3,2,1]\n            int n = nums.size() - 1;\n            while (nums[n] &lt;= nums[k] &amp;&amp; n &gt; k)  // \u200b\u4ece\u53f3\u200b\u5f80\u200b\u5de6\u200b\u627e\u200b\u7b2c\u4e00\u4e2a\u200b\u4e25\u683c\u200b\u5927\u4e8e\u200bnums[k]\n                n--;\n            cout &lt;&lt; k &lt;&lt; ' ' &lt;&lt; n;\n            swap(nums[n], nums[k]);\n        }\n\n        sort(nums.begin() + k + 1, nums.end());\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#39","title":"39 \u200b\u7ec4\u5408\u200b\u603b\u548c","text":"<p>\u200b\u548c\u200b 78 \u200b\u5b50\u96c6\u200b\u6709\u70b9\u50cf\u200b\uff0c\u200b\u90fd\u200b\u662f\u200b\u524d\u8fb9\u200b\u6709\u4e9b\u200b\u4e0d\u9009\u200b\uff0c\u200b\u4ece\u200b\u5f53\u524d\u200b\u5f00\u59cb\u200b\u9009\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200b\u56de\u6eaf\u200b</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; res;\n    vector&lt;vector&lt;int&gt;&gt; anw;\n    int target;\n    int now_sum;\n\n    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\n        this-&gt;target = target;\n        std::sort(candidates.begin(), candidates.end());\n        dfs(candidates, 0);\n        return anw;\n    }\n\n    void dfs(vector&lt;int&gt;&amp; nums, int begin_index) {\n        if (now_sum == target) {\n            anw.push_back(res);\n            return;\n        } else if (now_sum &gt; target || begin_index &gt;= nums.size()) {\n            return;\n        }\n\n        for (int i = begin_index; i &lt; nums.size(); i++) {\n            res.push_back(nums[i]);\n            now_sum += nums[i];\n            dfs(nums, i); // \u200b\u8fd9\u4e2a\u200b\u5730\u65b9\u200b\u662f\u200b i \u200b\u4e0d\u662f\u200b begin_index\n            now_sum -= nums[i];\n            res.pop_back();\n        }\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#41","title":"41 \u200b\u7f3a\u5931\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u6b63\u6570","text":"<p>\u200b\u5148\u200b\u7ed9\u51fa\u200b\u7ed3\u8bba\u200b\uff0c\u200b\u7b54\u6848\u200b\u4f1a\u200b\u662f\u200b\u5728\u200b <code>[1, nums.size+1]</code> \u200b\u4e2d\u200b</p> <p>\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\u53ea\u8981\u200b\u628a\u200b\u5927\u5c0f\u200b\u5728\u200b <code>[1,nums.size]</code> \u200b\u7684\u200b\u6570\u5b57\u200b\u653e\u5230\u200b\u5bf9\u5e94\u200b\u7684\u200b\u7b2c\u200b\u51e0\u4f4d\u200b\uff0c\u200b\u6700\u540e\u200b\u67e5\u200b\u4e00\u904d\u200b\u5c31\u200b\u80fd\u200b\u627e\u5230\u200b\u7b54\u6848\u200b</p> <pre><code>class Solution {\npublic:\n    int firstMissingPositive(vector&lt;int&gt; &amp;nums) {\n        int sz = nums.size();\n        for (int i = 0; i &lt; sz; ++i) {\n            while (nums[i] &gt;= 1 &amp;&amp; nums[i] &lt;= sz &amp;&amp;\n                   nums[i] != nums[nums[i] - 1])\n                swap(nums[i], nums[nums[i] - 1]);\n        }\n        for (int i = 0; i &lt; sz; ++i) {\n            if (nums[i] != i+1) return i + 1;\n        }\n        return sz + 1;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#42","title":"42 \u200b\u63a5\u200b\u96e8\u6c34","text":"<p>\u200b\u5a01\u540d\u200b\u8fdc\u626c\u200b\u554a\u200b\uff0c\u200b\u624b\u200b\u6495\u63a5\u200b\u96e8\u6c34\u200b\u6210\u4e3a\u200b\u62db\u8058\u200b\u5e38\u6001\u200b\ud83d\ude05\uff0c\u200b\u5e0c\u671b\u200b\u4e0d\u662f\u200b\u6700\u540e\u200b\u8334\u9999\u8c46\u200b\u7684\u200b\u8334\u200b\u6709\u200b\u51e0\u79cd\u200b\u5199\u6cd5\u200b</p> <p>\u200b\u9898\u89e3\u200b</p> <p>\u200b\u6309\u5217\u6c42\u200b\uff1a\u200b\u4ec0\u4e48\u200b\u65f6\u5019\u200b\u672c\u5217\u200b i \u200b\u80fd\u653e\u200b\u5462\u200b\uff0c\u200b\u4f1a\u200b\u53d1\u73b0\u200b <code>[0, i-1],[i+1, end]</code> \u200b\u5982\u679c\u200b\u4e24\u200b\u533a\u95f4\u200b\u90fd\u200b\u80fd\u200b\u627e\u5230\u200b\u6bd4\u200b i \u200b\u9ad8\u200b\u7684\u200b\uff0c\u200b\u8bf4\u660e\u200b\u80fd\u653e\u200b\uff0c\u200b\u800c\u4e14\u200b\u80fd\u653e\u200b <code>min(a,b) - height[i]</code> \uff08\u200b\u5982\u679c\u200b\u7b49\u4e8e\u200b i \u200b\u7684\u200b\u9ad8\u5ea6\u200b\u76f8\u5f53\u4e8e\u200b\u653e\u200b 0\uff09\u3002\u200b\u53ef\u4ee5\u200b\u6bcf\u6b21\u200b\u90fd\u200b\u627e\u200b\u4e00\u904d\u200b\u5de6\u8fb9\u200b\u548c\u200b\u53f3\u8fb9\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd9\u6837\u200b\u6d6a\u8d39\u65f6\u95f4\u200b\u3002\u200b\u4e4b\u524d\u200b\u6709\u200b\u7684\u200b dp \u200b\u9898\u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u4f4d\u7f6e\u200b\u6ca1\u6709\u200b\u66f4\u597d\u200b\u7684\u200b\u5c31\u200b\u653e\u200b\u672c\u8eab\u200b\u3002\u200b\u53eb\u6cd5\u200b\u597d\u50cf\u200b\u662f\u200b\u5907\u5fd8\u5f55\u200b\u3002\u200b\u53ef\u4ee5\u200b\u7528\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b</p> \u200b\u521d\u59cb\u200b\u7248\u200b\u6539\u8fdb\u200b\u6210\u200bdp <pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt; &amp;height) {\n        int anw = 0;\n        int sz = height.size();\n        for (int i = 0; i &lt; sz; ++i) {\n            int i_left_maxheight = height[i];\n            for (int k = 0; k &lt; i; ++k)\n                i_left_maxheight = max(i_left_maxheight, height[k]);\n\n            int i_right_maxheight = height[i];\n            for (int k = i + 1; k &lt; sz; ++k)\n                i_right_maxheight = max(i_right_maxheight, height[k]);\n\n            anw += min(i_left_maxheight, i_right_maxheight) - height[i];\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt; &amp;height) {\n        int anw = 0;\n        int sz = height.size();\n        vector&lt;int&gt; left_maxheight(sz);\n        vector&lt;int&gt; right_maxheight(sz);\n\n        left_maxheight[0] = height[0];\n        right_maxheight[sz - 1] = height[sz - 1];\n\n        // \u200b\u6709\u5927\u53d6\u200b\u5927\u200b\uff0c\u200b\u6ca1\u5927\u53d6\u200b\u672c\u8eab\u200b\n        for (int i = 1; i &lt; sz; ++i) {\n            left_maxheight[i] = max(left_maxheight[i - 1], height[i]);\n        }\n        for (int i = sz - 2; i &gt;= 0; --i) { \n        // i should begin sz-2, not sz-1\n            right_maxheight[i] = max(right_maxheight[i + 1], height[i]);\n        }\n        for (int i = 0; i &lt; sz; ++i) {\n            anw += min(left_maxheight[i], right_maxheight[i]) - height[i];\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u6309\u5217\u6c42\u200b\u53cc\u200b\u6307\u9488\u200b\uff1a\u200b\u9898\u89e3\u200b\u91cc\u200b dp \u200b\u4f18\u5316\u200b\u6210\u200b\u53cc\u200b\u6307\u9488\u200b\u6ca1\u200b\u770b\u200b\u660e\u767d\u200b\uff0c\u200b\u4f46\u662f\u200b\u7b2c\u4e00\u4e2a\u200b\u8bc4\u8bba\u200b\u5f88\u200b\u597d\u200b\uff0c\u200b\u548c\u200b 12 \u200b\u9898\u6709\u200b\u5f02\u66f2\u540c\u5de5\u200b\u4e4b\u5999\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd9\u4e2a\u200b\u53cc\u200b\u6307\u9488\u200b\u5148\u200b\u7406\u89e3\u200b dp \u200b\u4f1a\u200b\u66f4\u597d\u200b\u7406\u89e3\u200b</p> left &lt; rightleft &lt;= right <pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt; &amp;height) {\n        int n = height.size();\n        int left = 0, right = n - 1;\n        int leftMaxHeight = height[0];\n        int rightMaxHeight = height[n - 1];\n        int anw = 0;\n        while (left &lt; right) {\n            leftMaxHeight = max(leftMaxHeight, height[left]);\n            rightMaxHeight = max(rightMaxHeight, height[right]);\n            if (leftMaxHeight &lt; rightMaxHeight) {\n                anw += leftMaxHeight - height[left];\n                left++;\n            }\n            else {\n                anw += rightMaxHeight - height[right];\n                right--;\n            }\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt; &amp;height) {\n        int anw = 0;\n        int sz = height.size();\n        int left = 0, right = sz - 1;\n        int leftMaxHeight = height[left], rightMaxHeight = height[right];\n\n        left++; // \u200b\u5de6\u53f3\u200b\u8fb9\u754c\u200b\u4e0d\u80fd\u200b\u5b58\u200b\n        right--;\n\n        while (left &lt;= right) { // left=right \u200b\u4e5f\u200b\u662f\u200b\u53ef\u80fd\u200b\u7684\u200b\u7b54\u6848\u200b\n            leftMaxHeight = max(leftMaxHeight, height[left]);\n            rightMaxHeight = max(rightMaxHeight, height[right]);\n            if (leftMaxHeight &lt; rightMaxHeight) {\n                anw += leftMaxHeight - height[left];\n                left++;\n            }\n            else {\n                anw += rightMaxHeight - height[right];\n                right--;\n            }\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u5355\u8c03\u200b\u6808\u200b\uff1a\u200b\u5047\u5982\u200b\u5f53\u524d\u200b\u5757\u200b\u6bd4\u524d\u200b\u4e00\u4e2a\u200b\u4f4e\u200b\uff0c\u200b\u8bf4\u660e\u4f1a\u200b\u6709\u200b\u96e8\u6c34\u200b\uff08\u200b\u4e0b\u6807\u200b\u5165\u6808\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u540e\u7eed\u200b\u4f1a\u200b\u7528\u5230\u200b\u6c34\u5e73\u200b\u8ddd\u79bb\u200b\uff09\uff1b\u200b\u5047\u5982\u200b\u5f53\u524d\u200b\u5757\u200b\u6bd4\u200b\u4e4b\u524d\u200b\u9ad8\u200b\uff0c\u200b\u8bf4\u660e\u200b\u4e4b\u524d\u200b\u7684\u200b\u96e8\u6c34\u200b\u5e94\u8be5\u200b\u505c\u4e0b\u200b\uff0c\u200b\u8fdb\u884c\u200b\u8ba1\u7b97\u200b\u3002\uff08\u200b\u4e00\u884c\u200b\u6309\u200b\u90e8\u5206\u200b\u6c42\u200b\uff09</p> <p>\u200b\u8ba1\u7b97\u200b\u8fc7\u7a0b\u200b\uff1a\u200b\u5148\u200b\u53d6\u51fa\u200b\u6bd4\u200b height[i] \u200b\u4f4e\u200b\u7684\u200b\u9ad8\u5ea6\u200b bottom\uff0c\u200b\u518d\u200b\u627e\u200b bottom \u200b\u5de6\u4fa7\u200b\u7684\u200b\u9ad8\u5ea6\u200b leftheight\uff0c \u200b\u5728\u200b heigh[i] \u200b\u548c\u200b leftheight \u200b\u4e24\u8005\u200b\u53d6\u5c0f\u200b\uff0c\u200b\u4e58\u4ee5\u200b\u6c34\u5e73\u200b\u8ddd\u79bb\u200b</p> <pre><code>        x\nx       x\nxxxxxxxxx\n</code></pre> <pre><code>class Solution {\npublic:\n    void test() {\n        vector&lt;int&gt; height = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};\n        cout &lt;&lt; trap(height);\n    }\n\n    int trap(vector&lt;int&gt; &amp;height) {\n        int anw = 0;\n        int len = height.size();\n        stack&lt;int&gt; stack;\n        for (int i = 0; i &lt; len; ++i) {\n            while (!stack.empty() &amp;&amp; height[i] &gt; height[stack.top()]) {\n                int haveWaterIndex = stack.top();\n                stack.pop();\n\n                if (stack.empty()) break;\n\n                int possibleHeight = min(height[i], height[stack.top()]);\n                int waterHeight = possibleHeight - height[haveWaterIndex];\n                int distance = i - stack.top() - 1;\n                anw += waterHeight * distance;\n            }\n            stack.push(i);\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#48","title":"48 \u200b\u65cb\u8f6c\u200b\u56fe\u50cf","text":"<p>\u200b\u7ebf\u6027\u4ee3\u6570\u200b\uff1a\u200b\u5728\u200b\u60f3\u200b\u6211\u200b\u7684\u200b\u4e8b\u60c5\u200b\uff1f\ud83d\ude0b</p> <p>\u200b\u77e9\u9635\u200b\u8f6c\u7f6e\u200b\u540e\u200b\u505a\u200b\u7ad6\u76f4\u200b\u8f74\u5bf9\u79f0\u200b</p> <pre><code>class Solution {\npublic:\n    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n\n        for(int i=0;i&lt;matrix.size();i++)\n            for(int j=i+1;j&lt;matrix[i].size();j++)\n                swap(matrix[i][j],matrix[j][i]);\n\n        for(int i=0;i&lt;matrix.size();i++)\n            for(int j=0;j&lt;matrix.size()/2;j++)\n                swap(matrix[i][j],matrix[i][matrix.size()-1-j]);\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#51-n","title":"51 N\u200b\u7687\u540e","text":"<p>\u200b\u96be\u70b9\u200b\u4e3b\u8981\u200b\u5728\u200b\u600e\u4e48\u200b\u5224\u65ad\u200b\u659c\u200b\u7740\u200b\uff0c\u200b\u53d1\u73b0\u200b y+x \u200b\u5bf9\u5e94\u200b\u53f3\u4e0a\u200b\u5230\u200b\u5de6\u4e0b\u200b\uff0cy-x \u200b\u5bf9\u5e94\u200b\u4ece\u200b\u5de6\u4e0a\u200b\u5230\u200b\u53f3\u200b\u4e0b\u200b\uff0c\u200b\u4f46\u662f\u200b y-x \u200b\u6709\u200b\u53ef\u80fd\u200b\u662f\u200b\u8d1f\u200b\u7684\u200b\uff0c\u200b\u5c31\u52a0\u200b n \u200b\u8c03\u6210\u200b\u975e\u8d1f\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u7528\u200b\u54c8\u5e0c\u200b\u8868\u200b</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n        martix = vector&lt;string&gt;(n, string(n, '.'));\n        dfs(0, n);\n        return anw;\n    }\n\n    vector&lt;vector&lt;string&gt;&gt; anw;\n    vector&lt;string&gt; martix;\n    bool cols[10] = {false};\n    bool left_to_right[20] = {false};\n    bool right_to_left[20] = {false};\n\n    void dfs(int row, int n) {\n        if (row == n) {\n            anw.push_back(martix);\n            return;\n        }\n        for (int col = 0; col &lt; n; col++) {\n            if (!cols[col] &amp;&amp;\n                !right_to_left[col + row] &amp;&amp;\n                !left_to_right[col - row + n]) {\n\n                cols[col] = right_to_left[col + row] = left_to_right[col - row + n] = true;\n                martix[row][col] = 'Q';\n                dfs(row + 1, n);\n                martix[row][col] = '.';\n                cols[col] = right_to_left[col + row] = left_to_right[col - row + n] = false;\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#53","title":"53 \u200b\u6700\u5927\u200b\u5b50\u200b\u6570\u7ec4\u200b\u548c","text":"<p>\u200b\u7ecf\u5178\u200b dp \u200b\u9898\u200b\u3002\u200b\u65e0\u540e\u6548\u200b\u6027\u200b\uff0c\u200b\u6211\u200b\u7684\u200b\u7406\u89e3\u200b\u662f\u200b\u53ea\u200b\u770b\u200b\u5b83\u200b\u548c\u200b\u5b83\u200b\u4e4b\u524d\u200b\u7684\u200b\u4e8b\u60c5\u200b\uff0c\u200b\u4e0d\u770b\u200b\u540e\u8fb9\u200b\u7684\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5316\u7b80\u200b\u95ee\u9898\u200b\uff1b<code>dp[i]</code> \u200b\u8868\u793a\u200b\u4ee5\u200b i \u200b\u4e3a\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u6700\u5927\u200b\u5b50\u200b\u6570\u7ec4\u200b\u548c\u200b\uff0c\u200b\u6240\u4ee5\u200b <code>dp[i]=max(dp[i-1]+nums[i], nums[i])</code> \uff0c\u200b\u4f18\u5316\u200b\u7a7a\u95f4\u200b\u7684\u8bdd\u200b\u4e0d\u662f\u200b anw=max(anw+nums[i], nums[i]), \u200b\u56e0\u4e3a\u200b\u8fd9\u6837\u200b\u6c42\u200b\u51fa\u6765\u200b\u7684\u200b\u662f\u200b dp[end] \uff0c\u200b\u4e0d\u662f\u200b dp[1..end] \u200b\u4e2d\u200b\u7684\u200b\u6700\u5927\u503c\u200b\u3002\u200b\u7528\u200b\u53e6\u200b\u4e00\u4e2a\u200b sum \u200b\u8bb0\u5f55\u200b\u5c31\u200b\u597d\u200b\u4e86\u200b</p> <pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        int sum = 0;\n        int anw = nums[0];\n        const int sz = nums.size();\n        for (int i = 0; i &lt; sz; ++i) {\n            sum = max(sum + nums[i], nums[i]);\n            anw = max(anw, sum);\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#54","title":"54 \u200b\u87ba\u65cb\u200b\u77e9\u9635","text":"<p>\u200b\u8fd9\u4e2a\u200b\u597d\u50cf\u200b\u4e4b\u524d\u200b\u6284\u8fc7\u200b\u7684\u200b\uff0c\u200b\u73b0\u5728\u200b\u80fd\u200b\u5199\u200b\u51fa\u6765\u200b\u4e86\u200b\ud83d\ude0b\uff0c\u200b\u4f46\u662f\u200b\u7a7a\u95f4\u200b\u5f00\u200b\u7684\u200b\u591a\u200b</p> <pre><code>class Solution {\npublic:\n\n    int m, n;\n    vector&lt;vector&lt;bool&gt;&gt; visited;\n\n    vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt; &amp;matrix) {\n        m = matrix.size();\n        n = matrix[0].size();\n        visited = vector&lt;vector&lt;bool&gt;&gt;(m, vector&lt;bool&gt;(n, false));\n        vector&lt;int&gt; anw(m * n, 0);\n        pair&lt;int, int&gt; move[4];\n        move[0] = {0, 1};\n        move[1] = {1, 0};\n        move[2] = {0, -1};\n        move[3] = {-1, 0};\n\n        for (int x = 0, y = 0, cnt = 0, mv = 0; cnt &lt; matrix.size() * matrix[0].size();) {\n            visited[x][y] = true;\n            anw[cnt++] = matrix[x][y];\n            int nx = x + move[mv].first;\n            int ny = y + move[mv].second;\n            if (isvalid(nx, ny)) x = nx, y = ny;\n            else {\n                mv = (mv + 1) % 4;\n                x += move[mv].first;\n                y += move[mv].second;\n            }\n        }\n        return anw;\n    }\n\n    bool isvalid(int x, int y) {\n        return x &gt;= 0 &amp;&amp; x &lt; m &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; n &amp;&amp; !visited[x][y];\n    }\n};\n</code></pre> <p>\u200b\u4f18\u5316\u200b\uff0c\u200b\u53ea\u7528\u200b 4 \u200b\u4e2a\u200b\u53d8\u91cf\u200b\u7ef4\u62a4\u200b\u4e0a\u4e0b\u5de6\u53f3\u200b\u7684\u200b\u754c\u9650\u200b\uff0c\u200b\u6b7b\u5faa\u73af\u200b\u653e\u200b\uff0c\u200b\u53ea\u8981\u200b\u8fb9\u754c\u200b\u975e\u6cd5\u200b\u8bf4\u660e\u200b\u653e\u5b8c\u200b\u4e86\u200b\uff0c\u200b\u8fd4\u56de\u200b\u5373\u53ef\u200b</p> <pre><code>class Solution {\npublic:\n\n    vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt; &amp;matrix) {\n        vector&lt;int&gt; anw;\n        if (matrix.empty()) return anw;\n\n        int up = 0, down = matrix.size()-1, left = 0, right = matrix[0].size() - 1;\n        while (true) {\n            for (int i = left; i &lt;= right; i++)anw.push_back(matrix[up][i]);\n            if (++up &gt; down) break;\n\n            for (int i = up; i &lt;= down; i++)anw.push_back(matrix[i][right]);\n            if (--right &lt; left) break;\n\n            for (int i = right; i &gt;= left; i--) anw.push_back(matrix[down][i]);\n            if (--down &lt; up) break;\n\n            for (int i = down; i &gt;= up; i--)anw.push_back(matrix[i][left]);\n            if (++left &gt; right) break;\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#55","title":"55 \u200b\u8df3\u8dc3\u200b\u6e38\u620f","text":"<p>\u200b\u8fd9\u4e2a\u200b\u9898\u200b\u76f4\u63a5\u200b\u7ffb\u8bd1\u200b\u4e5f\u200b\u884c\u200b\uff0c\u200b\u770b\u200b\u4ee3\u7801\u200b</p> <pre><code>class Solution {\npublic:\n    bool canJump(vector&lt;int&gt; &amp;nums) {\n        if (nums.size() == 1) return true;\n\n        int canReachMaxIndex = 0;\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            if (canReachMaxIndex &gt;= i)\n                canReachMaxIndex = max(canReachMaxIndex, i + nums[i]);\n            else return false;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#45-2","title":"45 \u200b\u8df3\u8dc3\u200b\u6e38\u620f\u200b2","text":"<p>\u200b\u4e0a\u6765\u200b\u6ca1\u60f3\u5230\u200b\u592a\u597d\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u7528\u200b\u66b4\u529b\u200b\u4e5f\u200b\u8fc7\u200b\u4e86\u200b\uff0c\u200b\u4f46\u200b\u660e\u663e\u200b\u4e0d\u662f\u200b\u597d\u200b\u7684\u200b\u89e3\u6cd5\u200b\u3002</p> <pre><code>class Solution {\npublic:\n    int jump(vector&lt;int&gt; &amp;nums) {\n        vector&lt;int&gt; step(nums.size(), INT_MAX);\n        step[0] = 0;\n        int canGoMaxIndex = 0;\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            if (canGoMaxIndex &gt;= i) {\n                canGoMaxIndex = max(canGoMaxIndex, i + nums[i]);\n                for (int spread = i + 1; spread &lt;= i + nums[i] &amp;&amp; spread &lt; nums.size(); ++spread)\n                    step[spread] = min(step[spread], step[i] + 1);\n            }\n        }\n        return step[nums.size() - 1];\n    }\n};\n</code></pre> <p>\u200b\u770b\u200b\u9898\u89e3\u200b\u53d1\u73b0\u200b\u5176\u5b9e\u200b\u4e0d\u7528\u200b\u5168\u5b58\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u5b58\u5230\u200b\u5230\u200b\u8fb9\u754c\u200b\u9700\u8981\u200b\u51e0\u6b65\u200b\u5c31\u884c\u4e86\u200b\uff0c\u200b\u4eba\u200b\u8bdd\u200b\u5c31\u662f\u200b\uff1aborder \u200b\u4e4b\u5185\u200b(\u200b\u5305\u542b\u200b border)\u200b\u51e0\u6b65\u200b\u53ef\u200b\u8fbe\u200b\uff0c\u200b\u7ed3\u5408\u200b\u4ee3\u7801\u200b\u66f4\u597d\u200b\u7406\u89e3\u200b</p> <pre><code>class Solution {\npublic:\n    int jump(vector&lt;int&gt; &amp;nums) {\n        if(nums.size()==1) return 0;\n\n        int canGoMaxIndex=0,step=0;\n        int broder=0;\n        for(int i=0;i&lt;nums.size();++i){\n            canGoMaxIndex= max(canGoMaxIndex,i+nums[i]);\n            if(i == broder){\n                broder=canGoMaxIndex;\n                step++;\n                if(canGoMaxIndex&gt;=nums.size()-1)  return step;\n            }\n        }\n        return step;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#61","title":"61 \u200b\u65cb\u8f6c\u200b\u94fe\u8868","text":"<p>2024/10/04 \u200b\u5468\u59d3\u200b\u5ba4\u53cb\u200b\u5206\u4eab\u200b\u7ed9\u200b\u6211\u200b\uff0c\u200b\u91cd\u65b0\u200b\u505a\u200b\u4e86\u200b\u4e00\u904d\u200b\uff0c\u200b\u60f3\u200b\u7684\u200b\u662f\u200b\u5148\u6210\u200b\u73af\u200b\uff0c\u200b\u518d\u200b\u65ad\u5f00\u200b</p> <p>\u200b\u53d1\u73b0\u200b\u76f8\u5f53\u4e8e\u200b \u200b\u5012\u200b\u7740\u200b\u8f6c\u200b k \u200b\u6b65\u662f\u200b\u65b0\u200b\u7684\u200b\u5934\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200b\u6b63\u8f6c\u200b length-k \uff0c\u200b\u63a5\u4e0b\u6765\u200b\u5c31\u662f\u200b\u627e\u5230\u200b\u65b0\u5934\u200b\u7684\u200b\u524d\u200b\u4e00\u4e2a\u200b\uff0c\u200b\u65ad\u5f00\u200b\uff0c\u200b\u8fd4\u56de\u200b\u65b0\u5934\u200b</p> <pre><code>class Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if(head==null) return head;\n\n        int length = 0;\n        ListNode lastTail = head;\n\n        for (ListNode temp = head; temp != null; temp = temp.next) {\n            lastTail = temp;\n            length++;\n        }\n\n        lastTail.next = head;\n        k = k % length;\n\n        int toNextHead = length - k;\n        ListNode preNewHead = head;\n        for (int i = 0; i &lt; toNextHead - 1; i++)\n            preNewHead = preNewHead.next;\n\n        ListNode newHead = preNewHead.next;\n        preNewHead.next = null;\n        return newHead;\n    }\n}\n</code></pre> <p>\u200b\u5f00\u59cb\u200b\u76f4\u63a5\u200b\u4e24\u6b21\u200b\u53cd\u8f6c\u200b</p> \u200b\u4e24\u6b21\u200b\u53cd\u8f6c\u200b <pre><code>class Solution {\npublic:\n    ListNode *rotateRight(ListNode *head, int k) {\n        if(head==nullptr) return nullptr;\n        int cnt = 0;\n        for (ListNode *cur = head; cur; cur = cur-&gt;next)\n            cnt++;\n        k %= cnt;\n        if(k==0) return head;\n\n        head = reverseList(head);\n        ListNode dummy(0, head);\n\n        ListNode *n4 = &amp;dummy;\n        ListNode *n5 = dummy.next;\n        for (int i = 0; i &lt; k; i++)\n            n4 = n4-&gt;next;\n        ListNode *n3 = n4-&gt;next;\n        n4-&gt;next = nullptr;\n        dummy.next = reverseList(n5);\n        n5-&gt;next = reverseList(n3);\n\n        return dummy.next;\n    }\n\n    ListNode *reverseList(ListNode *head) {\n        ListNode *pre = nullptr;\n        while (head) {\n            ListNode *ne = head-&gt;next;\n            head-&gt;next = pre;\n            pre = head;\n            head = ne;\n        }\n        return pre;\n    }\n};\n</code></pre> <p>\u200b\u770b\u200b\u9898\u89e3\u200b\u540e\u200b\u53d1\u73b0\u200b\u53ef\u4ee5\u200b\u9996\u5c3e\u76f8\u63a5\u200b\u6210\u73af\u200b\uff0c\u200b\u7136\u540e\u200b\u5408\u7406\u200b\u65ad\u5f00\u200b</p> \u200b\u65ad\u5f00\u200b <pre><code>class Solution {\npublic:\n    ListNode *rotateRight(ListNode *head, int k) {\n        if (head == nullptr || k == 0) return head;\n        // \u200b\u7edf\u8ba1\u200b\u4e2a\u6570\u200b\u5e76\u200b\u6210\u73af\u200b\n        int cnt = 0;\n        ListNode *cur = head;\n        while (cur-&gt;next) {\n            cur = cur-&gt;next;\n            cnt++;\n        }\n        cnt++;\n        cur-&gt;next = head;\n\n        k %= cnt;\n        // \u200b\u627e\u5230\u200b\u65b0\u5934\u200b\u7684\u200b\u524d\u200b\u4e00\u4e2a\u200b \u200b\u5e76\u200b\u65ad\u5f00\u200b\u548c\u200b\u65b0\u5934\u200b\u7684\u200b\u8fde\u63a5\u200b\n        cur = head;\n        for (int i = 0; i &lt; cnt - k - 1; i++)\n            cur = cur-&gt;next;\n\n        ListNode *newHead = cur-&gt;next;\n        cur-&gt;next = nullptr;\n        return newHead;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#69","title":"69 \u200b\u5e73\u65b9\u6839","text":"<p>\u200b\u5982\u679c\u200b x*x \u200b\u5927\u4e8e\u200b n\uff0c\u200b\u4e00\u5b9a\u200b\u4e0d\u662f\u200b\u7b54\u6848\u200b\uff1b\u200b\u5982\u679c\u200b\u7b49\u4e8e\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\uff1b\u200b\u5982\u679c\u200b\u5c0f\u4e8e\u200b\uff0c\u200b\u53ef\u80fd\u200b\u662f\u200b\u7b54\u6848\u200b\u3002\u200b\u56e0\u6b64\u200b\u627e\u200b\u7684\u200b\u662f\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b \u200b\u5e73\u65b9\u200b\u5c0f\u4e8e\u200b\u7b49\u4e8e\u200b n \u200b\u7684\u200b\u6570\u5b57\u200b</p> <p>\u200b\u5f00\u59cb\u200b\u7528\u200b\u4e58\u6cd5\u200b\uff0c\u200b\u7206\u200b\u8303\u56f4\u200b\u4e86\u200b\u3002\u200b\u6539\u7528\u200b\u9664\u6cd5\u200b <pre><code>import java.math.BigInteger;\n\nclass Solution {\n    public int mySqrt(int x) {\n\n        int left = 0, right = x;\n        while (left &lt; right) {\n            int mid = 1 + left + (right - left) / 2;\n//            int pow=mid*mid;\n            if (mid == x / mid) return mid; // pow == x\n            else if (mid &lt; x / mid) left = mid; // pow &lt; x\n            else right = mid - 1;\n        }\n        return left;\n    }\n}\n</code></pre></p>"},{"location":"backend/leetcode/#73-0","title":"73 \u200b\u77e9\u9635\u200b\u7f6e\u200b0","text":"<ul> <li>\u200b\u7b2c\u4e00\u79cd\u200b\u7528\u200b\u96c6\u5408\u200b\u5b58\u200b\u5bf9\u5e94\u200b\u7684\u200b\u884c\u200b\u3001\u200b\u5217\u200b\uff0c\u200b\u6700\u540e\u200b\u96c6\u4e2d\u200b\u7f6e\u200b\u96f6\u200b</li> <li>\u200b\u7b2c\u4e8c\u79cd\u200b\u7528\u200b\u7b2c\u4e00\u884c\u200b\uff0c\u200b\u7b2c\u4e00\u5217\u200b\u505a\u200b\u6807\u8bb0\u200b\uff0c\uff08\u200b\u5148\u200b\u8bb0\u5f55\u200b\u7b2c\u4e00\u884c\u200b\uff0c\u200b\u7b2c\u4e00\u5217\u200b\u8981\u200b\u4e0d\u8981\u200b\u7f6e\u200b0\uff09\uff0c\u200b\u5047\u5982\u200b <code>martix[i][j] = 0</code>\uff0c\u200b\u90a3\u4e48\u200b <code>martix[i][0] = martix[0][j] = 0</code> \uff08\u200b\u6253\u4e0a\u200b\u7f6e\u200b\u96f6\u200b\u6807\u8bb0\u200b\uff09\uff0c\u200b\u6700\u540e\u200b\u96c6\u4e2d\u5904\u7406\u200b</li> </ul> setflag <pre><code>class Solution {\npublic:\n    set&lt;int&gt; rows, cols;\n\n    void setZeroes(vector&lt;vector&lt;int&gt;&gt; &amp;matrix) {\n        for (int row = 0; row &lt; matrix.size(); row++) {\n            for (int col = 0; col &lt; matrix[0].size(); col++)\n                if (matrix[row][col] == 0) {\n                    rows.insert(row);\n                    cols.insert(col);\n                }\n        }\n        for(int row:rows){\n            for(int &amp; item : matrix[row])\n                item=0;\n        }\n        for(int col:cols)\n        {\n            for(auto &amp; i : matrix){\n                i[col]=0;\n            }\n        }\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n\n    void setZeroes(vector&lt;vector&lt;int&gt;&gt; &amp;matrix) {\n        // \u200b\u68c0\u67e5\u200b\u7b2c\u200b 0 \u200b\u884c\u200b \u200b\u7b2c\u200b 0 \u200b\u5217\u200b\n        int col0_flag = false, row0_flag = false;\n        for (int item_row0: matrix[0])\n            if (!item_row0) {\n                row0_flag = true;\n                break;\n            }\n        for (auto &amp;i: matrix)\n            if (!i[0]) {\n                col0_flag = true;\n                break;\n            }\n\n        // \u200b\u68c0\u67e5\u200b\u4e2d\u95f4\u200b\n        for (int row = 1; row &lt; matrix.size(); row++)\n            for (int col = 1; col &lt; matrix[0].size(); col++)\n                if (!matrix[row][col]) {\n                    matrix[row][0] = matrix[0][col] = 0;\n                }\n        // \u200b\u4fee\u6539\u200b\u4e2d\u95f4\u200b\n        for (int i = 1; i &lt; matrix.size(); i++) {\n            if (matrix[i][0] == 0)\n                for (int k = 1; k &lt; matrix[0].size(); k++)\n                    matrix[i][k] = 0;\n        }\n        for (int i = 1; i &lt; matrix[0].size(); i++) {\n            if (matrix[0][i] == 0)\n                for (int k = 1; k &lt; matrix.size(); k++)\n                    matrix[k][i] = 0;\n        }\n\n        // \u200b\u5904\u7406\u200b\u7b2c\u200b 0 \u200b\u884c\u200b \u200b\u7b2c\u200b 0 \u200b\u5217\u200b\n        if (col0_flag)\n            for (auto &amp;i: matrix) \n                i[0] = 0;\n        if (row0_flag)\n            for (int &amp;i: matrix[0])\n                i = 0;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#76","title":"76 \u200b\u6700\u5c0f\u200b\u8986\u76d6\u200b\u5b57\u4e32","text":"<p>\u200b\u66f4\u65b0\u200b\uff1a\u200b\u53cd\u590d\u200b\u505a\u200b\u50cf\u662f\u200b\u5728\u200b\u80cc\u200b\u7b54\u6848\u200b\ud83d\ude07\uff0c\u200b\u672c\u9898\u200b\u5173\u952e\u200b\u662f\u200b\u5229\u7528\u200b\u4e0a\u6765\u200b\u5c31\u200b\u51cf\u4e00\u200b\uff0c\u200b\u6839\u636e\u200b\u611f\u5174\u8da3\u200b\u5b57\u6bcd\u200b\u7684\u200b\u503c\u200b\u53cd\u590d\u200b\u5728\u200b &gt;=0 \u200b\u4e0a\u200b\u5f39\u8df3\u200b\uff0c\u200b\u4e0d\u611f\u5174\u8da3\u200b\u5b57\u6bcd\u200b\u7684\u200b\u503c\u200b\u5728\u200b &lt;=0 \u200b\u4e0a\u200b\u5f39\u8df3\u200b</p> <p>\u200b\u4f18\u5316\u200b\u7248\u672c\u200b</p> <pre><code>import java.util.HashMap;\n\nclass Solution {\n    public String minWindow(String s, String t) {\n        if (s.length() &lt; t.length())\n            return \"\";\n\n        char[] sa = s.toCharArray();\n        char[] ta = t.toCharArray();\n\n        HashMap&lt;Character, Integer&gt; hits = new HashMap&lt;&gt;();\n        for (char c : ta) {\n            hits.put(c, hits.getOrDefault(c, 0) + 1);\n        }\n\n        int left = 0, right = 0;\n        int anwLeft = 0, anwLen = Integer.MAX_VALUE;\n        int succHit = 0;\n        for (; right &lt; s.length(); right++) {\n            char rightChar = sa[right];\n            hits.put(rightChar, hits.getOrDefault(rightChar, 0) - 1);\n            if (hits.get(rightChar) &gt;= 0) {\n                succHit++;\n            }\n            while (succHit == t.length()) {\n                if (right - left + 1 &lt; anwLen) {\n                    anwLen = right - left + 1;\n                    anwLeft = left;\n                }\n                char leftChar = sa[left];\n                hits.put(leftChar, hits.get(leftChar) + 1);\n                if (hits.get(leftChar) &gt; 0)\n                    succHit--;\n                left++;\n            }\n        }\n        return anwLen == Integer.MAX_VALUE ? \"\" : s.substring(anwLeft, anwLeft + anwLen);\n\n    }\n}\n</code></pre> <pre><code>class Solution {\npublic:\n    unordered_map&lt;char, int&gt; letterNeed;\n\n    string minWindow(string s, string t) {\n        if (t.size() &gt; s.size()) return \"\";\n\n        pair&lt;int, int&gt; anw = {INT_MAX, INT_MAX};\n        for (char x: t) letterNeed[x]++;\n\n        int cnt = 0;\n        for (int left = 0, right = 0; right &lt; s.size(); right++) {\n            letterNeed[s[right]]--;  // \u200b\u4e0a\u6765\u200b\u5c31\u200b\u51cf\u200b\u4e0d\u200b\u5224\u65ad\u200b\n            if (letterNeed[s[right]] &gt;= 0) cnt++; // \u200b\u975e\u200b\u7b54\u6848\u200b\u5b57\u6bcd\u200b\u6b64\u65f6\u200b\u4e3a\u200b -1 \n            while (cnt == t.size()) {\n                if (right - left + 1 &lt; anw.second) anw = {left, right - left + 1};\n                letterNeed[s[left]]++;\n                if (letterNeed[s[left]] &gt; 0) cnt--; // \u200b\u975e\u200b\u7b54\u6848\u200b\u5b57\u6bcd\u200b\u6b64\u65f6\u200b\u4e3a\u200b 0\n                left++;\n            }\n        }\n\n        if (anw.second == INT_MAX) return \"\";\n        else return s.substr(anw.first, anw.second);\n    }\n};\n</code></pre> <p>\u200b\u6709\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7684\u200b\u63d0\u793a\u200b\uff0c\u200b\u60f3\u200b\u8d77\u6765\u200b\u662f\u4e0d\u662f\u200b\u5f88\u96be\u200b\uff0c\u200b\u4f46\u662f\u200b\u5199\u200b\u8d77\u6765\u200b\u5c31\u200b\u5bb9\u6613\u200b\u8d85\u65f6\u200b\u3002</p> <p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5982\u679c\u200b\u627e\u5230\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u8986\u76d6\u200b\uff0c\u200b\u5c31\u200b\u66f4\u65b0\u200b\u7b54\u6848\u200b\uff0c\u200b\u518d\u200b\u628a\u200b\u5de6\u200b\u6307\u9488\u200b\u79fb\u52a8\u200b\u5230\u200b\u4e0d\u80fd\u200b\u8986\u76d6\u200b\u7684\u200b\u5730\u65b9\u200b</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u6bcf\u6b21\u200b\u79fb\u52a8\u200b\u4e00\u4e2a\u200b\u5b57\u6bcd\u200b\u7684\u200b\u8ddd\u79bb\u200b\uff0c\u200b\u4e0d\u8981\u200b\u628a\u200b\u975e\u200b\u7b54\u6848\u200b\u5b57\u6bcd\u200b\u7528\u200b while \u200b\u5168\u8df3\u8fc7\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5bb9\u6613\u200b\u51fa\u200b\u95ee\u9898\u200b</p> <p>\u200b\u539f\u59cb\u200b\u7248\u672c\u200b</p> <pre><code>class Solution {\npublic:\n    unordered_map&lt;char, int&gt; cnt;\n    unordered_map&lt;char, int&gt; should;\n\n    string minWindow(string s, string t) {\n        if (t.size() &gt; s.size()) return \"\";\n\n        pair&lt;int, int&gt; anw = {INT_MAX, INT_MAX};\n        for (char x: t) should[x]++;\n\n        int left = 0, right = 0;\n        while (right &lt; s.size()) {\n            if (should[s[right]] &gt; 0) cnt[s[right]]++;\n            right++;\n            while (check()) {\n                if (right - left &lt; anw.second) anw = {left, right - left};\n                if (should[s[left]] &gt; 0) cnt[s[left]]--;\n                left++;\n            }\n        }\n\n        cout &lt;&lt; anw.first &lt;&lt; ' ' &lt;&lt; anw.second;\n        if (anw.first == INT_MAX) return \"\";\n        return s.substr(anw.first, anw.second);\n    }\n\n    bool check() {\n        for (auto item: should) {\n            if (cnt[item.first] &lt; item.second) return false;\n        }\n        return true;\n    }\n\n};\n</code></pre>"},{"location":"backend/leetcode/#78","title":"78 \u200b\u5b50\u96c6","text":"<p>\u200b\u56de\u6eaf\u200b\u6ca1\u200b\u60f3\u200b\u51fa\u6765\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4e00\u4e2a\u200b\u4e00\u4e2a\u200b\u653e\u200b\uff0c\u200b\u5728\u200b\u4e0a\u6b21\u200b\u7684\u200b\u7ed3\u679c\u200b\u7684\u200b\u6bcf\u4e00\u9879\u200b\u52a0\u200b\u4e00\u4e2a\u200b\u65b0\u6570\u200b\u3002\u200b\u6bd4\u5982\u200b <code>[1,2,3]</code> \u200b\u7684\u200b\u5b50\u96c6\u200b\u662f\u200b\u5728\u200b <code>[1,2]</code> \u200b\u7684\u200b\u5b50\u96c6\u200b\u57fa\u7840\u200b\u4e0a\u200b\u6bcf\u9879\u200b\u90fd\u200b\u52a0\u200b <code>3</code></p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; res;\n    vector&lt;vector&lt;int&gt;&gt; anw;\n\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt; &amp;nums) {\n        res={};\n        anw.push_back(res);\n        for (int num: nums) {\n            auto last=anw;\n            for(auto item:last){\n                item.push_back(num);\n                anw.push_back(item);\n            }\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u56de\u6eaf\u200b</p> <p></p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; anw;\n    vector&lt;int&gt; res;\n\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt; &amp;nums) {\n        dfs(nums, 0);\n        return anw;\n    }\n\n    void dfs(vector&lt;int&gt; &amp;nums, int begin_choose_index) {\n        anw.push_back(res);\n\n        if (begin_choose_index == nums.size()) {\n            return;\n        }\n        for (int i = begin_choose_index; i &lt; nums.size(); i++) {\n            res.push_back(nums[i]);\n            dfs(nums, i + 1);\n            res.pop_back();\n        }\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#79","title":"79 \u200b\u5355\u8bcd\u200b\u641c\u7d22","text":"<p>dfs</p> <pre><code>class Solution {\npublic:\n    bool exist(vector&lt;vector&lt;char&gt;&gt; &amp;board, string word) {\n        for (int row = 0; row &lt; board.size(); row++)\n            for (int col = 0; col &lt; board[0].size(); col++)\n                if (dfs(row, col, 0, board, word))\n                    return true;\n        return false;\n    }\n\n    bool dfs(int row, int col, int cnt, vector&lt;vector&lt;char&gt;&gt; &amp;board, string &amp;word) {\n        if (cnt == word.size())\n            return true;\n        if (row &lt; 0 || row &gt;= board.size() || col &lt; 0 || col &gt;= board[0].size())\n            return false;\n\n        char c = board[row][col];\n        if (c != word[cnt])\n            return false;\n\n        board[row][col] = '#'; // visited\n        bool isFind = dfs(row + 1, col, cnt + 1, board, word) ||\n                      dfs(row - 1, col, cnt + 1, board, word) ||\n                      dfs(row, col + 1, cnt + 1, board, word) ||\n                      dfs(row, col - 1, cnt + 1, board, word);\n        board[row][col] = c;\n        return isFind;\n    }\n};\n</code></pre> \u200b\u65e9\u671f\u200b\u7248\u672c\u200b <pre><code>class Solution {\npublic:\n    string target;\n    string now;\n    vector&lt;vector&lt;bool&gt;&gt; used;\n    int dx[4] = {0, 0, -1, 1};\n    int dy[4] = {1, -1, 0, 0};\n\n    bool exist(vector&lt;vector&lt;char&gt;&gt; &amp;board, string word) {\n        target = word;\n        used = vector&lt;vector&lt;bool&gt;&gt;(board.size(),\n                                    vector&lt;bool&gt;(board[0].size(), false));\n        for (int i = 0; i &lt; board.size(); i++)\n            for (int j = 0; j &lt; board[0].size(); j++) {\n                bool anw = dfs(now, 0, i, j, board);\n                if (anw)\n                    return true;\n            };\n        return false;\n    }\n\n    bool dfs(string&amp; now, int posi, int x, int y, vector&lt;vector&lt;char&gt;&gt; &amp;board) {\n\n        if (target[posi] != board[x][y])\n            return false;\n\n        now += board[x][y];\n        used[x][y] = true;\n\n        if (now == target)\n            return true;\n\n        for (int i = 0; i &lt; 4; i++) {\n            int nx = x + dx[i], ny = y + dy[i];\n            if (nx &gt;= 0 &amp;&amp; nx &lt; board.size() &amp;&amp;\n                ny &gt;= 0 &amp;&amp; ny &lt; board[0].size() &amp;&amp;\n                !used[nx][ny])\n                if (dfs(now, posi + 1, nx, ny, board))\n                    return true;\n        }\n\n        now.pop_back();\n        used[x][y] = false;\n\n        return false;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#86","title":"86 \u200b\u5206\u9694\u200b\u94fe\u8868","text":"<p>\u200b\u5f00\u59cb\u200b\u60f3\u200b\u76f4\u63a5\u200b\u5feb\u6162\u200b\u6307\u9488\u200b\u8c03\u6574\u200b\u987a\u5e8f\u200b\uff0c\u200b\u6ca1\u200b\u5199\u200b\u51fa\u6765\u200b\uff0c\u200b\u7136\u540e\u200b\u53d1\u73b0\u200b\u7528\u200b\u4e24\u4e2a\u200b\u94fe\u8868\u200b\u5934\u200b\u76f4\u63a5\u200b\u6311\u51fa\u6765\u200b\u5c31\u200b\u597d\u200b\u4e86\u200b</p> <p>\u200b\u53e6\u5916\u200b\u6709\u200b\u53ef\u80fd\u200b cur_big-&gt;next \u200b\u6307\u5411\u200b\u4e3a\u200b\u5c0f\u4e8e\u200b x \u200b\u7684\u200b\u70b9\u200b \u200b\u6bd4\u5982\u200b <code>1 4 2 x = 3</code> \u200b\u9700\u8981\u200b\u65ad\u5f00\u200b\uff0c\u200b\u8981\u4e48\u200b\u6bcf\u6b21\u200b\u5904\u7406\u200b\uff0c\u200b\u8981\u4e48\u200b\u6700\u540e\u200b\u5904\u7406\u200b</p> \u200b\u6700\u540e\u200b\u5904\u7406\u200b\u6bcf\u6b21\u200b\u5904\u7406\u200b <pre><code>class Solution {\npublic:\n    ListNode *partition(ListNode *head, int x) {\n\n        ListNode small(0);\n        ListNode *cur_small = &amp;small;\n        ListNode big(0);\n        ListNode *cur_big = &amp;big;\n\n        while (head) {\n            if (head-&gt;val &lt; x) {\n                cur_small-&gt;next = head;\n                cur_small = cur_small-&gt;next;\n            }\n            else {\n                cur_big-&gt;next = head;\n                cur_big = cur_big-&gt;next;\n            }\n            head = head-&gt;next;\n        }\n\n        cur_small-&gt;next = big.next;\n        cur_big-&gt;next=nullptr; // important\n        return small.next;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    ListNode *partition(ListNode *head, int x) {\n\n        ListNode small(0);\n        ListNode *cur_small = &amp;small;\n        ListNode big(0);\n        ListNode *cur_big = &amp;big;\n\n        while (head) {\n            ListNode *ne = head-&gt;next;\n            if (head-&gt;val &lt; x) {\n                cur_small-&gt;next = head;\n                cur_small = cur_small-&gt;next;\n                head-&gt;next = nullptr;\n            }\n            else {\n                cur_big-&gt;next = head;\n                cur_big = cur_big-&gt;next;\n                head-&gt;next = nullptr;\n            }\n            head = ne;\n        }\n        cur_small-&gt;next = big.next;\n        return small.next;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#94","title":"94 \u200b\u4e8c\u53c9\u6811\u200b\u4e2d\u5e8f\u200b\u904d\u5386","text":"<p>\u200b\u4eca\u5929\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200b\u597d\u200b\u7406\u89e3\u200b\u7684\u200b\u975e\u200b\u9012\u5f52\u200b\u65b9\u6cd5\u200b</p> <pre><code>class Solution {\npublic:\n\n    vector&lt;int&gt; inorderTraversal(TreeNode *root) {\n        vector&lt;int&gt; anw;\n\n        if (root == nullptr) return anw;\n\n        stack&lt;pair&lt;TreeNode *, bool&gt;&gt; st;\n        st.push(make_pair(root, false));\n        while (!st.empty()) {\n            auto [node, color] = st.top();\n            st.pop();\n            if (node == nullptr) {\n                cout &lt;&lt; \"null\" &lt;&lt; endl;\n                continue;\n            }\n            if (color) {\n                anw.emplace_back(node-&gt;val);\n                cout &lt;&lt; \"anw \" &lt;&lt; node-&gt;val &lt;&lt; endl;\n                continue;\n            }\n            else {\n                st.push(make_pair(node-&gt;right, false));\n                st.push(make_pair(node, true));\n                st.push(make_pair(node-&gt;left, false));\n                cout &lt;&lt; \"push right \" &lt;&lt; node-&gt;val &lt;&lt; \" push left\" &lt;&lt; endl;\n            }\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#98","title":"98 \u200b\u9a8c\u8bc1\u200b\u4e8c\u53c9\u200b\u641c\u7d22\u200b\u6811","text":"<p>\u200b\u548c\u200b 99 \u200b\u4e00\u4e2a\u200b\u601d\u8def\u200b\uff0c\u200b\u5148\u200b\u68c0\u9a8c\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u6709\u6ca1\u6709\u200b\u9006\u5e8f\u200b</p> dfsmirros <pre><code>class Solution {\npublic:\n    long long  last_val = LONG_LONG_MIN;\n\n    bool isValidBST(TreeNode* root) {\n        if (root == nullptr)\n            return true;\n        bool leftValid = isValidBST(root-&gt;left);\n        if (!leftValid)\n            return false;\n        if (last_val &gt;= root-&gt;val)\n            return false;\n        last_val = root-&gt;val;\n        bool rightValid = isValidBST(root-&gt;right);\n        if (!rightValid)\n            return false;\n        return true;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int last_val = INT_MIN;\n    bool ff = false;\n\n    bool isValidBST(TreeNode* root) {\n\n        dfs(root);\n        if (ff)\n            return false;\n        else\n            return true;\n    }\n\n    void dfs(TreeNode* root) {\n        TreeNode* pre = nullptr;\n        TreeNode* now = root;\n        while (now) {\n            TreeNode* mirros = now-&gt;left;\n            if (mirros == nullptr) {\n                if (pre &amp;&amp; pre-&gt;val &gt;= now-&gt;val) {\n                    ff = true;\n                }\n                pre = now;\n                now = now-&gt;right;\n                continue;\n            }\n            while (mirros-&gt;right &amp;&amp; mirros-&gt;right != now) {\n                mirros = mirros-&gt;right;\n            }\n            if (mirros-&gt;right == nullptr) {\n                mirros-&gt;right = now;\n                now = now-&gt;left;\n            } else {\n                if (pre &amp;&amp; pre-&gt;val &gt;= now-&gt;val) {\n                    ff = true;\n                }\n                mirros-&gt;right = nullptr;\n                pre = now;\n                now = now-&gt;right;\n            }\n        }\n    }\n\n}\n;\n</code></pre>"},{"location":"backend/leetcode/#99","title":"99 \u200b\u6062\u590d\u200b\u4e8c\u53c9\u200b\u641c\u7d22\u200b\u6811","text":"<ul> <li>\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u7684\u200b\u7ed3\u679c\u200b\u5e8f\u5217\u200b\u4e2d\u200b\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u9006\u5e8f\u200b\u5bf9\u200b AB \u200b\u7684\u200b A \u200b\u662f\u200b\u5f85\u200b\u6362\u200b\u5143\u7d20\u200b</li> <li>\u200b\u5982\u679c\u200b\u6709\u200b\u7b2c\u4e8c\u4e2a\u200b\u9006\u5e8f\u200b\u5bf9\u200b\uff0c\u200b\u7b2c\u4e8c\u4e2a\u200b\u9006\u5e8f\u200b\u5bf9\u200b CD \u200b\u7684\u200b D \u200b\u662f\u200b\u5f85\u200b\u6362\u200b\u5143\u7d20\u200b</li> <li>\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u7b2c\u4e8c\u4e2a\u200b\u9006\u5e8f\u200b\u5bf9\u200b\uff0c\u200b\u5c31\u662f\u200b AB \u200b\u4e92\u6362\u200b</li> <li>\u200b\u4e3a\u4ec0\u4e48\u200b\u8fd9\u4e48\u200b\u8bf4\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5199\u200b\u4e00\u4e2a\u200b\u5347\u5e8f\u200b\u5e8f\u5217\u200b\u7136\u540e\u200b\u6362\u200b\u5176\u4e2d\u200b\u7684\u200b\u4e24\u4e2a\u200b\u4f4d\u7f6e\u200b</li> </ul> dfsMirros <pre><code>class Solution {\npublic:\n    void recoverTree(TreeNode *root) {\n        dfs(root);\n        swap(fault_left-&gt;val, fault_right-&gt;val);\n    }\n\n    TreeNode *fault_left;\n    TreeNode *fault_right;\n    TreeNode *last = nullptr;\n\n    void dfs(TreeNode *root) {\n        if (root == nullptr) return;\n        dfs(root-&gt;left);\n        if (last == nullptr) last = root;\n        if (last-&gt;val &gt; root-&gt;val) {\n            if (fault_left == nullptr) {\n                fault_left = last;\n                fault_right = root;\n            }\n            else {\n                fault_right = root;\n            }\n        }\n        last = root;\n        dfs(root-&gt;right);\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    void recoverTree(TreeNode * root) {\n        TreeNode * now = root;\n        TreeNode * pre = nullptr;\n        TreeNode * x = nullptr;\n        TreeNode * y = nullptr;\n\n        while (now) {\n            TreeNode * mirros = now-&gt;left;\n            if (mirros == nullptr) {\n                if (pre &amp;&amp; pre-&gt;val &gt; now-&gt;val) {\n                    if (x == nullptr) x = pre;\n                    y = now;\n                }\n                pre = now;\n                now = now-&gt;right;\n                continue;\n            }\n            while (mirros-&gt;right &amp;&amp; mirros-&gt;right != now) {\n                mirros = mirros-&gt;right;\n            }\n            if (mirros-&gt;right == nullptr) {\n                mirros-&gt;right = now;\n                now = now-&gt;left;\n            }\n            else {\n                if (pre &amp;&amp; pre-&gt;val &gt; now-&gt;val) {\n                    if (x == nullptr) x = pre;\n                    y = now;\n                }\n                mirros-&gt;right = nullptr;\n                pre = now;\n                now = now-&gt;right;\n            }\n        }\n        if (x &amp;&amp; y) swap(x-&gt;val, y-&gt;val);\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#105-106","title":"105 106 \u200b\u6784\u5efa\u200b\u4e8c\u53c9\u6811","text":"<p>\u200b\u7b80\u5355\u200b\u7684\u200b\u8bb0\u6cd5\u200b\uff1a\u200b\u7edf\u4e00\u200b\u7528\u200b\u5de6\u5b50\u200b\u6811\u200b\u7684\u200b\u5927\u5c0f\u200b\u53bb\u200b\u8c03\u6574\u200b\u8303\u56f4\u200b\uff0c\u200b\u8282\u7701\u200b\u5fc3\u667a\u200b</p> 105 <pre><code>class Solution {\npublic:\n    unordered_map&lt;int, int&gt; valIndexInorder;\n\n    TreeNode *buildTree(vector&lt;int&gt; &amp;preorder, vector&lt;int&gt; &amp;inorder) {\n\n        for (int i = 0; i &lt; inorder.size(); i++)\n            valIndexInorder[inorder[i]] = i;\n\n        return build(preorder, inorder, 0, preorder.size() - 1, 0,\n                    inorder.size() - 1);\n    }\n\n    TreeNode *build(vector&lt;int&gt; &amp;preorder, vector&lt;int&gt; &amp;inorder, int preleft,\n                    int preright, int inleft, int inright) {\n        if (preleft &gt; preright)\n            return nullptr;\n\n        int val = preorder[preleft];\n        TreeNode *root = new TreeNode(val);\n        int index = valIndexInorder[val];\n        int leftLen = index - inleft;\n\n        root-&gt;left = build(preorder, inorder,\n                        preleft + 1, preleft + leftLen,\n                        inleft, inleft + leftLen - 1);\n        root-&gt;right = build(preorder, inorder,\n                            preleft + leftLen + 1, preright,\n                            inleft + leftLen + 1, inright);\n        return root;\n    }\n};\n</code></pre> 106 <pre><code>class Solution {\npublic:\n    unordered_map&lt;int, int&gt; indexInMidorderOf;\n\n    TreeNode *buildTree(vector&lt;int&gt; &amp;inorder, vector&lt;int&gt; &amp;postorder) {\n        for (int i = 0; i &lt; inorder.size(); i++)\n            indexInMidorderOf[inorder[i]] = i;\n        return build(inorder, 0, inorder.size() - 1,\n                    postorder, 0, postorder.size() - 1);\n    }\n\n    TreeNode *build(vector&lt;int&gt; &amp;inorder, int in_l, int in_r,\n                    vector&lt;int&gt; &amp;postorder, int po_l, int po_r) {\n        if (in_l &gt; in_r || po_l &gt; po_r) return nullptr;\n\n        TreeNode *root = new TreeNode(postorder[po_r]);\n        int rootIndexofMidorder = indexInMidorderOf[postorder[po_r]];\n        int leftSonSize = rootIndexofMidorder - in_l;\n\n        root-&gt;left = build(inorder, in_l, in_l + leftSonSize - 1,\n                        postorder, po_l, po_l + leftSonSize - 1);\n\n        root-&gt;right = build(inorder, in_l + leftSonSize + 1, in_r,\n                            postorder, po_l + leftSonSize, po_r - 1);\n        return root;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#114","title":"114 \u200b\u4e8c\u53c9\u6811\u200b\u8f6c\u200b\u94fe\u8868","text":"<ol> <li>\u200b\u5148\u5e8f\u200b\u904d\u5386\u200b\uff0c\u200b\u524d\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u7684\u200b\u53f3\u200b\u513f\u5b50\u200b\u6539\u6210\u200b\u5f53\u524d\u200b\u70b9\u200b\uff0c\u200b\u5de6\u200b\u513f\u5b50\u200b\u4e3a\u7a7a\u200b</li> <li>\u200b\u628a\u200b\u53f3\u200b\u513f\u5b50\u200b\u6302\u5230\u200b\u5de6\u5b50\u200b\u6811\u200b\u7684\u200b\u6700\u53f3\u200b\u8282\u70b9\u200b\uff0c\u200b\u7136\u540e\u200b\u628a\u200b\u5f53\u524d\u200b\u70b9\u53f3\u200b\u513f\u5b50\u200b\u6539\u6210\u200b\u5de6\u200b\uff0c\u200b\u5de6\u200b\u513f\u5b50\u200b\u4e3a\u7a7a\u200b\u3002</li> </ol> \u200b\u9012\u5f52\u200b\u975e\u200b\u9012\u5f52\u200b\u89c4\u5f8b\u200b <pre><code>class Solution {\npublic:\n    void flatten(TreeNode *root) {\n        TreeNode dummy(0);\n        pre = &amp;dummy;\n        dfs(root);\n    }\n\n    TreeNode *pre = nullptr;\n\n    void dfs(TreeNode *root) {\n        if (root == nullptr)\n            return;\n\n        TreeNode *leftson = root-&gt;left;\n        TreeNode *rightson = root-&gt;right;\n\n        pre-&gt;left = nullptr;\n        pre-&gt;right = root;\n        pre = root;\n\n        dfs(leftson);\n        dfs(rightson);\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    void flatten(TreeNode *root) {\n        if (root == nullptr) return;\n        TreeNode du(0);\n        TreeNode *pre = &amp;du;\n        stack&lt;pair&lt;TreeNode *, bool&gt;&gt; st;\n        st.push({root, false});\n        while (!st.empty()) {\n            auto [node, color] = st.top();\n            st.pop();\n            if (node == nullptr) continue;\n            if (color) {\n                pre-&gt;right = node;\n                pre-&gt;left = nullptr;\n\n                pre = node;\n            }\n            else {\n                st.push({node-&gt;right, false});\n                st.push({node-&gt;left, false});\n                st.push({node, true});\n            }\n        }\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    void flatten(TreeNode* root) {\n        if (root == nullptr)\n            return;\n        while (root) {\n            TreeNode* move = root-&gt;left;\n            while (move &amp;&amp; move-&gt;right)\n                move = move-&gt;right;\n            if (move) {\n                move-&gt;right = root-&gt;right;\n                root-&gt;right = root-&gt;left;\n                root-&gt;left = nullptr;\n            }\n            root = root-&gt;right;\n        }\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#117","title":"117 \u200b\u586b\u5145\u200b\u53f3\u200b\u6307\u9488","text":"<p>\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b</p> <pre><code>class Solution {\npublic:\n    Node* connect(Node* root) {\n        if (root == nullptr)\n            return root;\n        queue&lt;Node*&gt; qu;\n        qu.push(root);\n        while (!qu.empty()) {\n            int sz = qu.size();\n            for (int i = 0; i &lt; sz; i++) {\n                auto item_a = qu.front();\n                    qu.pop();\n                if (i != sz - 1) {\n                    item_a-&gt;next = qu.front();\n                }\n                if (item_a-&gt;left)\n                    qu.push(item_a-&gt;left);\n                if (item_a-&gt;right)\n                    qu.push(item_a-&gt;right);\n            }\n        }\n\n        return root;\n    }\n};\n</code></pre> <p>\u200b\u6bcf\u5c42\u200b\u76f8\u5f53\u4e8e\u200b\u4e00\u4e2a\u200b\u94fe\u8868\u200b\uff0c\u200b\u5047\u5982\u200b\u7b2c\u200b i \u200b\u5c42\u200b\u5df2\u7ecf\u200b\u5efa\u7acb\u200b\u597d\u200b\u94fe\u8868\u200b\uff0c\u200b\u904d\u5386\u200b\u7b2c\u200b i \u200b\u5c42\u65f6\u200b\u53ef\u4ee5\u200b\u5efa\u4e0b\u200b\u4e00\u5c42\u200b\u7684\u200b</p> <pre><code>class Solution {\npublic:\n    Node *connect(Node *root) {\n\n        if (root == nullptr) return nullptr;\n\n        Node *head = root;\n        while (head) {\n            Node next_level_head(0); // \u200b\u5f00\u200b\u4e00\u4e2a\u200b dummy head\n            Node *next_level_p = &amp;next_level_head;\n            for (Node *cur_level_p = head; cur_level_p; cur_level_p = cur_level_p-&gt;next) {\n                if (cur_level_p-&gt;left) {\n                    next_level_p-&gt;next = cur_level_p-&gt;left;\n                    next_level_p = next_level_p-&gt;next;\n                }\n                if (cur_level_p-&gt;right) {\n                    next_level_p-&gt;next = cur_level_p-&gt;right;\n                    next_level_p = next_level_p-&gt;next;\n                }\n            }\n            head = next_level_head.next;\n        }\n        return root;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#118","title":"118 \u200b\u6768\u8f89\u4e09\u89d2","text":"<p>\u200b\u96be\u5ea6\u200b\u4e0d\u200b\u5927\u200b\uff0c\u200b\u95ee\u9898\u200b\u5728\u4e8e\u200b\u7a7a\u95f4\u200b</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generate(int numRows) {\n        vector&lt;vector&lt;int&gt;&gt; ret(numRows);\n        for (int i = 0; i &lt; numRows; ++i) {\n            ret[i].resize(i + 1);\n            ret[i][0] = ret[i][i] = 1;\n            for (int j = 1; j &lt; i; ++j) {\n                ret[i][j] = ret[i - 1][j] + ret[i - 1][j - 1];\n            }\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#121-1","title":"121 \u200b\u4e70\u5356\u200b\u80a1\u7968\u200b1","text":"<p>\u200b\u76f8\u5f53\u4e8e\u200b\u6c42\u200b a[j]-a[i] \u200b\u7684\u200b\u6700\u5927\u503c\u200b\uff08j&gt;i\uff09</p> <p>\u200b\u66b4\u529b\u200b\u5c31\u662f\u200b\u53cc\u91cd\u200b\u5faa\u73af\u200b\uff0c\u200b\u4f46\u662f\u200b\u5176\u5b9e\u200b\u53ef\u4ee5\u200b\u4e00\u4e2a\u200b\u5faa\u73af\u200b\uff0c\u200b\u5229\u7528\u200b\u65e0\u540e\u6548\u200b\u6027\u200b\uff0c\u200b\u5f53\u200b\u6211\u4eec\u200b\u626b\u200b\u5230\u200b\u4e0b\u6807\u200b\u4e3a\u200b i \u200b\u7684\u200b\u5143\u7d20\u200b\u65f6\u200b\uff0c\u200b\u53ea\u8981\u200b\u6709\u200b a[0..i-1] \u200b\u7684\u200b\u6700\u5c0f\u503c\u200b\u5c31\u200b\u597d\u200b\u4e86\u200b\uff0c\u200b\u800c\u200b\u8fd9\u4e2a\u200b\u6700\u5c0f\u503c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u626b\u5230\u200b i \u200b\u4e4b\u524d\u200b\u5c31\u200b\u5728\u200b\u7ef4\u62a4\u200b</p> <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int hold = INT_MAX; // \u200b\u53ef\u4ee5\u200b\u7b80\u5316\u200b\u5224\u65ad\u200b\u00b7\n        int anw = 0;\n        for (int price : prices) {\n            if (hold &lt; price)\n                anw = max(anw, price - hold);\n            hold = min(hold, price);\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#124","title":"124 \u200b\u4e8c\u53c9\u6811\u200b\u4e2d\u200b\u7684\u200b\u6700\u5927\u200b\u8def\u5f84\u200b\u548c","text":"<p>\u200b\u521a\u200b\u5f00\u59cb\u200b\u60f3\u5230\u200b\u7c7b\u4f3c\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\uff0c\u200b\u627e\u5230\u200b\u5de6\u5b50\u200b\u6811\u200b\u548c\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u6700\u5927\u200b\u8def\u5f84\u200b\u548c\u200b\uff0c\u200b\u518d\u200b\u548c\u200b\u6839\u52a0\u200b\u4e00\u8d77\u200b\uff0c\u200b\u65b9\u5411\u200b\u662f\u200b\u5bf9\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u5e94\u8be5\u200b\u4e0d\u662f\u200b\u8fd4\u56de\u200b\u6700\u5927\u200b\u8def\u5f84\u200b\u548c\u200b\uff0c\u200b\u800c\u662f\u200b\u4ee5\u200b <code>root.left/right</code> \u200b\u4e3a\u200b\u4e00\u7aef\u200b\u7684\u200b\u7ed3\u679c\u200b</p> <p>\u200b\u6b63\u200b\u89e3\u200b\uff1a\u200b\u5904\u7406\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\uff0c\u200b\u627e\u5230\u200b\u5de6\u5b50\u200b\u6811\u200b\u548c\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u6700\u5927\u200b\u8def\u5f84\u200b\u548c\u200b <code>left,right</code> \u3002\u200b\u52a8\u6001\u200b\u66f4\u65b0\u200b <code>anw</code> \uff08\u200b\u770b\u200b <code>left, right</code> \u200b\u6709\u6ca1\u6709\u200b\u8d21\u732e\u200b\uff0c\u200b\u6709\u200b\u8d21\u732e\u200b\u5c31\u200b\u52a0\u5230\u200b <code>sum</code>\uff09\u3002 \u200b\u53e6\u5916\u200b dfs \u200b\u627e\u200b\u7684\u200b\u662f\u200b\u5b50\u6811\u200b\uff08\u200b\u5047\u5982\u200b\u662f\u200b\u5de6\u5b50\u200b\u6811\u200b\uff09\u200b\u4e3a\u200b\u4e00\u7aef\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002\u200b\u76f4\u63a5\u200b\u770b\u200b\u4ee3\u7801\u200b\u53ef\u80fd\u200b\u66f4\u597d\u200b\u7406\u89e3\u200b</p> slove 124 <pre><code>class Solution {\npublic:\n    int anw = -0x3f3f3f;\n    int maxPathSum(TreeNode * root) {\n        dfs(root);\n        return anw;\n    }\n\n    int dfs(TreeNode * root) {\n        if (root == nullptr)\n            return 0;\n\n        int val = root-&gt;val;\n        int left = dfs(root-&gt;left);\n        int right = dfs(root-&gt;right);\n        if (left &gt; 0)\n            val += left;\n        if (right &gt; 0)\n            val += right;\n        anw = max(anw, val);\n\n        return max(root-&gt;val, max(left, right) + root-&gt;val);\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#128","title":"128 \u200b\u6700\u957f\u200b\u8fde\u7eed\u200b\u5e8f\u5217","text":""},{"location":"backend/leetcode/#_2","title":"\u54c8\u5e0c\u200b\u8868","text":"<p>\u200b\u4e00\u200b\u5f00\u59cb\u200b\u60f3\u200b\u7684\u200b\u662f\u200b\u54c8\u5e0c\u200b\u8868\u200b\u8bb0\u5f55\u200b\u51fa\u6ca1\u200b\u51fa\u73b0\u200b\uff0c\u200b\u7136\u540e\u200b\u6700\u5927\u200b\u8303\u56f4\u200b\u5185\u200b\u904d\u5386\u200b+ while \u200b\u5faa\u73af\u200b\uff0c\u200b\u8d85\u65f6\u200b\u4e86\u200b\uff0c\u200b\u540e\u6765\u200b\u6539\u8fdb\u200b\u6210\u200b\u8fd9\u6837\u200b</p> <pre><code>class Solution {\npublic:\n    int longestConsecutive(vector&lt;int&gt;&amp; nums) {\n        int anw = 0;\n        if (nums.empty())\n            return 0;\n        map&lt;int, bool&gt; appear;\n        for (int x : nums)\n            appear[x] = true;\n        for (int x : nums) {\n            int len = 1;\n            while (appear[x - len])\n                len++;\n            anw = max(anw, len);\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u7136\u540e\u200b\u53c8\u200b\u8d85\u65f6\u200b\u4e86\u200b\uff0c\u200b\u770b\u200b\u4e86\u200b\u7b54\u6848\u200b\u540e\u200b\u53d1\u73b0\u200b\u6709\u200b\u5f88\u591a\u200b\u5197\u4f59\u200b\uff0c\u200b\u6bd4\u5982\u8bf4\u200b\u5047\u5982\u200b\u5f80\u56de\u200b\u67e5\u200b(\u200b\u5411\u200b\u5c0f\u6570\u200b)\uff0c4 \u200b\u5c31\u200b\u4e00\u5b9a\u200b\u6bd4\u200b 3 \u200b\u6548\u679c\u200b\u597d\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6709\u200b 4 \u200b\u5c31\u200b\u4e0d\u67e5\u200b 3</p> <pre><code>class Solution {\npublic:\n    int longestConsecutive(vector&lt;int&gt;&amp; nums) {\n        int anw = 1;\n        if (nums.empty())\n            return 0;\n        unordered_map&lt;int, bool&gt; appear;\n        for (int x : nums)\n            appear[x] = true;\n        for (int x : nums) {\n            int len = 1;\n            if (appear[x + 1])\n                continue;\n            while (appear[x - len])\n                len++;\n            anw = max(anw, len);\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5f80\u524d\u200b\u67e5\u200b\uff0c\u200b\u6709\u200b 3 \u200b\u5c31\u200b\u4e0d\u67e5\u200b 4\uff0c\u200b\u4f46\u662f\u200b\u8fd9\u4e2a\u200b\u8868\u73b0\u200b\u4e0d\u597d\u200b\uff0c\uff08\u200b\u6211\u200b\u5206\u6790\u200b\u7406\u8bba\u200b\u4e0a\u200b\u5e94\u8be5\u200b\u5dee\u4e0d\u591a\u200b\uff0c\u200b\u5b9e\u9645\u200b\u53ef\u80fd\u200b\u662f\u200b\u4f18\u5316\u200b\u95ee\u9898\u200b\u6216\u8005\u200b\u8bbe\u8ba1\u200b\u95ee\u9898\u200b\uff1f\uff09</p> <p>gpt \u200b\u7ed9\u51fa\u200b\u7684\u200b\u7b54\u6848\u200b\u662f\u200b</p> <ul> <li>\u200b\u5982\u679c\u200b nums \u200b\u4e2d\u200b\u5347\u5e8f\u200b\u591a\u200b\uff0c\u200b\u5f80\u5927\u200b\u4e86\u200b\u6570\u5feb\u200b <code>if (appear[x + 1]) continue;</code></li> <li>\u200b\u5982\u679c\u200b nums \u200b\u964d\u5e8f\u200b\u591a\u200b\uff0c\u200b\u5f80\u200b\u5c0f\u6570\u200b\u5feb\u200b <code>if (appear[x + 1]) continue;</code></li> <li>\u200b\u770b\u8d77\u6765\u200b\u6709\u70b9\u200b\u5408\u7406\u200b</li> </ul> <p>The performance difference could arise from the order in which the numbers are checked for consecutiveness. It depends on the distribution of numbers in the nums vector. If the numbers are more likely to be consecutive in increasing order, the first approach might perform better. Conversely, if the numbers are more likely to be consecutive in decreasing order, the second approach might be more efficient.</p> \u200b\u5411\u200b\u5927\u6570\u200b <pre><code>class Solution {\npublic:\n    int longestConsecutive(vector&lt;int&gt;&amp; nums) {\n        int anw = 1;\n\n        if (nums.empty())\n            return 0;\n        unordered_map&lt;int, bool&gt; appear;\n        for (int x : nums)\n            appear[x] = true;\n        for (int x : nums) {\n\n            int len = 1;\n            if(appear[x-1]) continue;\n            while (appear[x + len])\n                len++;\n            anw = max(anw, len);\n        }\n\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#_3","title":"\u52a8\u6001\u200b\u89c4\u5212","text":"<p>\u200b\u7b2c\u4e8c\u79cd\u200b\u89e3\u6cd5\u200b\uff1a\u200b\u52a8\u6001\u200b\u89c4\u5212\u200b\uff0c\u200b\u611f\u89c9\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u4e0d\u770b\u200b\u7b54\u6848\u200b\u662f\u200b\u4e0d\u200b\u5bb9\u6613\u200b\u60f3\u200b\u51fa\u6765\u200b\u7684\u200b\u3002</p> <pre><code>class Solution {\npublic:\n    int longestConsecutive(vector&lt;int&gt;&amp; nums) {\n        unordered_map&lt;int, int&gt; appear;\n        int anw = 0;\n\n        for (int x : nums) {\n            if (appear[x] == 0) {\n                int total_len = 1;\n                int left_len = appear[x - 1];\n                int right_len = appear[x + 1];\n                //eg: [1, 2, 3] 4 [5, 6]\n                total_len =total_len+ left_len + right_len;\n                appear[x - left_len] =appear[x]= appear[x + right_len] = total_len;\n                anw = max(anw, total_len);\n            }\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#_4","title":"\u5e76\u200b\u67e5\u96c6","text":"<p>\u200b\u7b2c\u4e09\u79cd\u200b\u89e3\u6cd5\u200b\uff1a\u200b\u5e76\u200b\u67e5\u96c6\u200b\u601d\u60f3\u200b</p> <p>\u200b\u5b58\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6570\u200b\uff0c\u200b\u8fd9\u6837\u200b\u627e\u5230\u200b\u6700\u8fdc\u200b\u7684\u200b\u6570\u200b right\uff0cright-x \u200b\u5c31\u662f\u200b\u7b54\u6848\u200b\uff0c\u200b\u7406\u8bba\u200b\u4e0a\u200b\u5b58\u4e0b\u200b\u4e00\u4e2a\u200b\u548c\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u5dee\u4e0d\u591a\u200b\uff0c\u200b\u4f46\u662f\u200b\u5b58\u4e0a\u200b\u4e00\u4e2a\u200b\u5c31\u200b\u4f1a\u200b\u8d85\u65f6\u200b</p> <pre><code>class Solution {\npublic:\n    unordered_map&lt;int, int&gt; map;\n\n    int findmap(int x) {\n        if (map.count(x)) {\n            map[x] = findmap(map[x]);// \u200b\u8def\u5f84\u200b\u538b\u7f29\u200b\n            return map[x];\n        }\n        else return x;\n    }\n\n    int longestConsecutive(vector&lt;int&gt; &amp;nums) {\n        int anw = 0;\n        for (int x: nums) map[x] = x + 1;\n        for (int x: nums) {\n            int len = findmap(x) - x;\n            anw = max(anw, len);\n        }\n        return anw;\n    }\n};\n\nclass Union {\n    static const int N = 10;\n\n    int root[N];\n    int size[N];\npublic:\n    Union() {\n        for (int i = 0; i &lt; N; i++) {\n            root[i] = i;\n            size[i] = 1;\n        }\n    }\n\n    void unionab(int a, int b) {\n        int root_a = get_root(a);\n        int root_b = get_root(b);\n        int atreeSize = size[root_a];\n        int btreeSize = size[root_b];\n\n        if (atreeSize &lt; btreeSize) {\n            root[root_a] = root_b;\n            size[root_b] += atreeSize;\n        }\n        else {\n            root[root_b] = root_a;\n            size[root_a] += btreeSize;\n        }\n    }\n\n    int get_root(int x) {\n//        while (root[x] != x) {\n//            root[x]=root[root[x]];// this can short path\n//            x = root[x];\n//        }// \u200b\u4e24\u79cd\u200b\u5199\u6cd5\u200b\n        if (root[x] != x)\n            root[x] = get_root(root[x]);\n        return x;\n    }\n\n    bool isConnected(int a, int b) {\n        return get_root(a) == get_root(b);\n    }\n\n    void print() {\n        for (int i = 0; i &lt; N; ++i) {\n            printf(\"root %d is %d\\n\", i, root[i]);\n        }\n    }\n};\n</code></pre> TLE <pre><code>class Solution {\npublic:\n    unordered_map&lt;int, int&gt; map;\n\n    int findmap(int x) {\n        if (map.count(x)) {\n            map[x] = findmap(map[x]);\n            // \u200b\u8def\u5f84\u200b\u538b\u7f29\u200b\n            return map[x];\n        }\n        else return x;\n    }\n\n    int longestConsecutive(vector&lt;int&gt; &amp;nums) {\n        int anw = 0;\n        for (int x: nums) map[x] = x - 1;\n        for (int x: nums) {\n            int len = x - findmap(x);\n            anw = max(anw, len);\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#131","title":"131 \u200b\u5206\u5272\u200b\u56de\u6587\u200b\u4e32","text":"<p>\u200b\u548c\u200b 78 \u200b\u5b50\u96c6\u200b\u6709\u70b9\u50cf\u200b\uff0c\u200b\u4f46\u662f\u200b\u5b50\u96c6\u200b\u90a3\u4e2a\u200b\u662f\u200b\u8def\u4e0a\u200b\u5168\u200b\u6536\u96c6\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u90e8\u5206\u200b\u6536\u96c6\u200b</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; partition(string s) {\n        dfs(0, s);\n        return anw;\n    }\n\n    vector&lt;vector&lt;string&gt;&gt; anw;\n    vector&lt;string&gt; res;\n\n    void dfs(int begin_index, const string s) {\n        if (begin_index == s.size()) {\n            anw.push_back(res);\n            return;\n        }\n        for (int i = begin_index; i &lt; s.size(); i++) {\n            string substr = s.substr(begin_index, i - begin_index + 1);\n            if (isSim(substr))\n                res.push_back(substr);\n            else\n                continue;\n            dfs(i + 1, s);\n            res.pop_back();\n        }\n    }\n\n    bool isSim(const string s) {\n        for (int i = 0; i &lt; s.size() / 2; i++) {\n            if (s[i] != s[s.size() - 1 - i])\n                return false;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#138","title":"138 \u200b\u968f\u673a\u200b\u94fe\u8868\u200b\u590d\u5236","text":"<p>\u200b\u7b2c\u4e00\u79cd\u200b\uff0c\u200b\u7528\u200b\u54c8\u5e0c\u200b\u8868\u200b</p> <pre><code>class Solution {\npublic:\n    unordered_map&lt;Node *, Node *&gt; mp;\n    Node * copyRandomList(Node * head) {\n        Node * dummy = new Node(0);\n        Node * now = dummy;\n        Node * h = head;\n\n        while (h) {\n            now-&gt;next = new Node(h-&gt;val);\n            mp[h] = now-&gt;next;\n            h = h-&gt;next;\n            now = now-&gt;next;\n        }\n\n        h = head;\n        now = dummy-&gt;next;\n        while (h) {\n            now-&gt;random = mp[h-&gt;random];\n            now = now-&gt;next;\n            h = h-&gt;next;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre> <p>\u200b\u7b2c\u4e8c\u79cd\u200b\u9898\u89e3\u200b</p> <p>\u200b\u7528\u200b\u865a\u62df\u200b\u8282\u70b9\u200b\uff0c\u200b\u9632\u6b62\u200b\u539f\u200b\u94fe\u8868\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u70b9\u200b\u3002</p> <pre><code>class Solution {\npublic:\n    Node *copyRandomList(Node *head) {\n        if (head == nullptr)\n            return nullptr;\n        auto h = head;\n        auto now = head;\n        while (h) {\n            now = new Node(h-&gt;val);\n            now-&gt;next = h-&gt;next;\n            h-&gt;next = now;\n            h = h-&gt;next-&gt;next;\n        }\n\n        h = head;\n        while (h) {\n            if (h-&gt;random)\n                h-&gt;next-&gt;random = h-&gt;random-&gt;next;\n            h = h-&gt;next-&gt;next;\n        }\n\n        h = head;\n        Node *dummy = new Node(0);\n        dummy-&gt;next=head;\n        now = dummy;\n\n        while (h) {\n            now-&gt;next = h-&gt;next;\n            h-&gt;next = h-&gt;next-&gt;next;\n            now = now-&gt;next;\n            h = h-&gt;next;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#146-lru","title":"146 LRU \u200b\u7f13\u5b58","text":"<p>\u200b\u53cc\u5411\u200b\u94fe\u8868\u200b\u52a0\u200b\u54c8\u5e0c\u200b\u8868\u200b\uff0c\u200b\u9760\u8fd1\u200b\u5934\u200b\u7684\u200b\u662f\u200b\u6700\u8fd1\u200b\u4f7f\u7528\u200b\u7684\u200b\u3002\u200b\u6bcf\u6b21\u200b\u64cd\u4f5c\u200b\u5148\u200b\u68c0\u67e5\u200b\u6709\u6ca1\u6709\u200b\uff0c\u200b\u6709\u200b\u7684\u8bdd\u200b\u5c31\u200b\u5148\u200b\u5220\u9664\u200b\u5b83\u200b\u4e0e\u200b\u5de6\u53f3\u200b\u7684\u200b\u8054\u7cfb\u200b\u518d\u200b\u8c03\u5230\u200b\u5934\u90e8\u200b\uff08\u200b\u4e0d\u7136\u7684\u8bdd\u200b\u94fe\u8868\u200b\u7684\u200b\u6307\u5411\u200b\u5c31\u200b\u4e71\u200b\u4e86\u200b\uff09\u3002\u200b\u7406\u89e3\u200b\u8d77\u6765\u200b\u96be\u5ea6\u200b\u4e0d\u200b\u5927\u200b\uff0c\u200b\u4f46\u662f\u200b\u5199\u200b\u8d77\u6765\u200b\u592a\u200b\u5bb9\u6613\u200b\u51fa\u9519\u200b\u4e86\u200b\u3002</p> 1 edbetter <pre><code>class MyNode {\npublic:\n    MyNode* prev;\n    MyNode* next;\n    int val;\n    int key;\n\n    MyNode(int _val) : val(_val) {}\n\n    MyNode(int _key, int _val) : key(_key), val(_val) {}\n};\n\nclass LRUCache {\npublic:\n    unordered_map&lt;int, MyNode*&gt; map;\n    MyNode* dummy;\n    int cap;\n    LRUCache(int capacity) {\n        cap = capacity;\n        dummy = new MyNode(0);\n        dummy-&gt;next = dummy;\n        dummy-&gt;prev = dummy;\n    }\n\n    int get(int key) {\n        if (map.find(key) == map.end())\n            return -1;\n        auto item = map[key];\n        removeRelationship(item);\n        setToFront(item);\n        return item-&gt;val;\n    }\n\n    void put(int key, int value) {\n        if (map.find(key) == map.end()) {\n            auto item = new MyNode(key, value);\n            map[key] = item;\n            setToFront(item);\n\n            if (map.size() &gt; cap) {\n                auto todel = dummy-&gt;prev;\n                map.erase(todel-&gt;key);\n                removeRelationship(todel);\n                delete todel;\n            }\n        } \n        else {\n            removeRelationship(map[key]);\n            setToFront(map[key]);\n            map[key]-&gt;val = value;\n        }\n    }\n\n    void removeRelationship(MyNode* item) {\n        item-&gt;prev-&gt;next = item-&gt;next;\n        item-&gt;next-&gt;prev = item-&gt;prev;\n    }\n\n    void setToFront(MyNode* item) {\n        item-&gt;next = dummy-&gt;next;\n        item-&gt;prev = dummy;\n        item-&gt;next-&gt;prev = item;\n        item-&gt;prev-&gt;next = item;\n    }\n};\n</code></pre> <pre><code>class mynode {\npublic:\n    int key, value;\n    mynode *left;\n    mynode *right;\n\n    mynode(int val) : value(val) {}\n\n    mynode(int k, int v) : key(k), value(v) {}\n};\n\nclass LRUCache {\npublic:\n    unordered_map&lt;int, mynode *&gt; map;\n    mynode *dummy;\n    int cap;\n\n    LRUCache(int capacity) {\n        cap = capacity;\n        dummy = new mynode(0);\n        dummy-&gt;left = dummy;\n        dummy-&gt;right = dummy;\n    }\n\n    int get(int key) {\n        auto item = getNode(key);\n        return item ? item-&gt;value : -1;\n    }\n\n    void put(int key, int value) {\n        auto item = getNode(key);\n        if (item != nullptr) {\n            item-&gt;value = value;\n            return;\n        }\n        else {\n            item = new mynode(key, value);\n            map[key] = item;\n            setToFront(item);\n\n            if (map.size() &gt; cap) {\n                auto delNode = dummy-&gt;left;\n                delRelationship(delNode);\n                map.erase(delNode-&gt;key);\n                delete delNode;\n            }\n        }\n\n    }\n\n    mynode *getNode(int key) {\n        if (map.find(key) == map.end()) return nullptr;\n        auto item = map[key];\n        delRelationship(item);\n        setToFront(item);\n        return item;\n    }\n\n    void delRelationship(mynode *item) {\n        item-&gt;left-&gt;right = item-&gt;right;\n        item-&gt;right-&gt;left = item-&gt;left;\n    }\n\n    void setToFront(mynode *item) {\n        item-&gt;left = dummy;\n        item-&gt;right = dummy-&gt;right;\n        item-&gt;left-&gt;right = item;\n        item-&gt;right-&gt;left = item;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#148","title":"148 \u200b\u6392\u5e8f\u200b\u94fe\u8868","text":"<p>\u200b\u5f52\u5e76\u200b\u6392\u5e8f\u200b</p> <pre><code>class Solution {\npublic:\n    ListNode *sortList(ListNode *head) {\n        if (head == nullptr) return nullptr; // \u200b\u7279\u5224\u539f\u200b\u94fe\u8868\u200b\u4e3a\u7a7a\u200b\n\n        if (head-&gt;next == nullptr) return head;  // \u200b\u5f52\u5e76\u200b\u7ec8\u6b62\u200b\n\n        ListNode *left = head;\n        ListNode *leftPartEnd = getLeftPartEnd(head);\n        ListNode *right = leftPartEnd-&gt;next;\n        leftPartEnd-&gt;next = nullptr;\n\n        left = sortList(left);\n        right = sortList(right);\n        return merge(left, right);\n\n    }\n\n    // \u200b\u5947\u6570\u200b\u4e2a\u200b\u8282\u70b9\u200b\u8fd4\u56de\u200b\u4e2d\u95f4\u200b\uff0c\u200b\u5076\u6570\u200b\u4e2a\u200b\u8282\u70b9\u200b\u8fd4\u56de\u200b\u5de6\u200b\u90e8\u5206\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\n    ListNode *getLeftPartEnd(ListNode *head) {\n        ListNode *slow = head;\n        ListNode *fast = head-&gt;next;\n        while (fast &amp;&amp; fast-&gt;next) {\n            slow = slow-&gt;next;\n            fast = fast-&gt;next-&gt;next;\n        }\n        return slow;\n    }\n\n    ListNode *merge(ListNode *left, ListNode *right) {\n        ListNode dummy(0);\n        ListNode *cur = &amp;dummy;\n        while (left &amp;&amp; right) {\n            if (left-&gt;val &lt; right-&gt;val) {\n                cur-&gt;next = left;\n                left = left-&gt;next;\n            }\n            else {\n                cur-&gt;next = right;\n                right = right-&gt;next;\n            }\n            cur = cur-&gt;next;\n        }\n        if (left) cur-&gt;next = left;\n        else cur-&gt;next = right;\n        return dummy.next;\n    }\n\n};\n</code></pre> <p>\u200b\u7b2c\u4e8c\u79cd\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u4ece\u5934\u200b\u6392\u5e8f\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b 1, 2, 4 ...</p> <pre><code>class Solution {\npublic:\n    ListNode *sortList(ListNode *head) {\n\n        int length = getLength(head);\n        ListNode dummy(0);\n        dummy.next = head;\n\n        for (int i = 1; i &lt; length; i*=2) {\n            ListNode *sortedTail = &amp;dummy;\n            ListNode *cur = sortedTail-&gt;next;\n            while (cur) {\n                ListNode *left = cur;\n                ListNode *right = cut(left, i);\n                cur = cut(right, i);\n                ListNode *newSortedHead = merge(left, right);\n                sortedTail-&gt;next = newSortedHead;\n                while (sortedTail-&gt;next) sortedTail = sortedTail-&gt;next;\n            }\n        }\n        return dummy.next;\n    }\n\n    ListNode *merge(ListNode *left, ListNode *right) {\n        ListNode dummy(0);\n        ListNode *cur = &amp;dummy;\n        while (left &amp;&amp; right) {\n            if (left-&gt;val &lt; right-&gt;val) {\n                cur-&gt;next = left;\n                left = left-&gt;next;\n            }\n            else {\n                cur-&gt;next = right;\n                right = right-&gt;next;\n            }\n            cur = cur-&gt;next;\n        }\n        if (left) cur-&gt;next = left;\n        else cur-&gt;next = right;\n        return dummy.next;\n    }\n\n    ListNode *cut(ListNode *head, int cnt) {\n        for (int i = 1; i &lt; cnt &amp;&amp; head; i++) {\n            head = head-&gt;next;\n        }\n        if (!head) return nullptr;\n\n        ListNode *ne = head-&gt;next;\n        head-&gt;next = nullptr;\n        return ne;\n    }\n\n    int getLength(ListNode *head) {\n        int cnt = 0;\n        while (head) {\n            cnt++;\n            head = head-&gt;next;\n        }\n        return cnt;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#155","title":"155 \u200b\u6700\u5c0f\u200b\u6808","text":"<p>\u200b\u7528\u200b\u4e00\u4e2a\u200b\u8f85\u52a9\u200b\u6808\u5b58\u200b\u6700\u5c0f\u503c\u200b\uff0cpush \u200b\u5982\u679c\u200b <code>val &lt;= minst.top</code> push \u200b\u8fdb\u200b\uff0c\u200b\u4e0d\u7136\u200b\u8df3\u8fc7\u200b\uff0c\u200b\u5047\u5982\u200b\u8bf4\u200b\u662f\u200b 5\uff0c 3\uff0c 4 \u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u53ea\u8981\u200b 3 \u200b\u4e0d\u200b\u4ece\u200b\u771f\u5b9e\u200b\u6808\u200b\u51fa\u6765\u200b\uff0c\u200b\u65e0\u8bba\u200b\u540e\u9762\u200b 4 \u200b\u600e\u4e48\u200b\u8fdb\u51fa\u200b\u771f\u5b9e\u200b\u6808\u200b\u90fd\u200b\u4e0d\u200b\u6539\u53d8\u200b\u6700\u5c0f\u503c\u200b\u3002\u200b\u4f46\u200b\u5982\u679c\u200b\u53c8\u200b\u6765\u200b\u4e00\u4e2a\u200b 3 \u200b\u5c31\u8981\u200b\u8fdb\u200b\u8f85\u52a9\u200b\u6808\u200b\uff0c\u200b\u662f\u200b\u4e3a\u4e86\u200b\u5f39\u200b\u51fa\u200b\u540e\u6765\u200b\u7684\u200b 3 \u200b\u65f6\u200b\uff0c\u200b\u8f85\u52a9\u200b\u6808\u200b\u6700\u5c0f\u503c\u200b\u8fd8\u662f\u200b 3\uff08\u200b\u4e4b\u524d\u200b\u5148\u6765\u200b\u7684\u200b\u90a3\u4e2a\u200b\uff09</p> <p>\u200b\u53e6\u5916\u200b\u4e3a\u4ec0\u4e48\u200b\u4e0d\u662f\u200b\u6240\u6709\u200b\u6570\u5b57\u200b\u7684\u200b\u5355\u8c03\u200b\u6808\u200b\uff1f\u200b\u8fd8\u662f\u200b 5\uff0c 3\uff0c 4 \u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u5f53\u200b 4 \u200b\u4ece\u200b\u771f\u5b9e\u200b\u6808\u5f39\u200b\u51fa\u200b\u7684\u200b\u65f6\u5019\u200b\u662f\u200b\u4e0d\u80fd\u200b\u64cd\u4f5c\u200b\u5230\u200b\u5355\u8c03\u200b\u6808\u200b\u7684\u200b <code>|| 5 4 3 (</code></p>"},{"location":"backend/leetcode/#189","title":"189 \u200b\u8f6e\u8f6c\u200b\u6570\u7ec4","text":"<p>\u200b\u7ebf\u6027\u4ee3\u6570\u200b\uff1a\u200b\u5728\u200b\u60f3\u200b\u6211\u200b\u7684\u200b\u4e8b\u60c5\u200b\uff1f\ud83d\ude0b</p> \\[(a^Tb^T)^T=ba\\] <p>\u200b\u77e9\u9635\u200b\u7684\u200b\u8f6c\u7f6e\u200b\u6216\u8005\u200b\u6c42\u9006\u6709\u200b\u4e0a\u8fb9\u200b\u7684\u200b\u6027\u8d28\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53d1\u73b0\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u9006\u5e8f\u200b\u4e5f\u200b\u7b26\u5408\u200b\u8fd9\u4e2a\u200b\u6027\u8d28\u200b\u3002\u200b\u9006\u5e8f\u200b\u6620\u5c04\u200b\u8f6c\u7f6e\u200b\uff0c\u200b\u5355\u5c04\u200b\u51fd\u6570\u200b\uff0c\u200b\u5148\u200b\u5206\u522b\u200b\u9006\u5e8f\u200b\uff0c\u200b\u518d\u200b\u5168\u90e8\u200b\u9006\u5e8f\u200b\u5373\u53ef\u200b\u3002</p> <p>\u200b\u7ec6\u8282\u200b\u5904\u7406\u200b\uff1a\u200b\u8f6e\u8f6c\u200b k \u200b\u4e2a\u200b\u76f8\u5f53\u4e8e\u200b\u628a\u200b\u524d\u200b size-k \u200b\u4e2a\u6570\u200b\u653e\u5230\u200b\u6700\u540e\u200b\uff0c\u200b\u5f53\u200b k=size \u200b\u76f8\u5f53\u4e8e\u200b\u524d\u200b 0 \u200b\u4e2a\u200b\u653e\u5230\u200b\u6700\u540e\u200b\uff0c\u200b\u5c31\u662f\u200b\u539f\u6837\u200b\u4e0d\u200b\u52a8\u200b\uff0c\u200b\u6240\u4ee5\u200b <code>if k &gt; nums.size k = k % nums.size</code></p> 24ms7ms <pre><code>class Solution {\npublic:\n    void test() {\n        vector&lt;int&gt; te = {1, 2, 3, 4, 5, 6, 7};\n        rotate(te, 3);\n    }\n    void rotate(vector&lt;int&gt;&amp; nums, int k) {\n        k %= nums.size();\n        reverse(nums.begin(), nums.begin() + nums.size() - k);\n        reverse(nums.begin() + nums.size() - k, nums.end());\n        reverse(nums.begin(), nums.end());\n        return;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    void test() {\n        vector&lt;int&gt; te = {1, 2, 3, 4, 5, 6, 7};\n        rotate(te, 3);\n    }\n\n\n    void rotate(vector&lt;int&gt; &amp;nums, int k) {\n\n        if (k &lt;= nums.size()) {\n            reverse(nums.begin(), nums.begin() + nums.size() - k);\n            reverse(nums.begin() + nums.size() - k, nums.end());\n            reverse(nums.begin(), nums.end());\n            return;\n        }\n        else {\n            rotate(nums, k - nums.size());\n        }\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#198","title":"198 \u200b\u6253\u5bb6\u52ab\u820d","text":"<p>\u200b\u5f00\u59cb\u200b\u60f3\u200b\u7684\u200b\u4e0d\u200b\u5bf9\u200b\uff0c\u200b\u4e0d\u7528\u200b\u6807\u8bb0\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u5077\u200b\u6ca1\u200b\u5077\u200b\uff0c\u200b\u76f4\u63a5\u200b\u53d6\u200b\u5c31\u884c\u4e86\u200b</p> \u200b\u7a7a\u95f4\u200bOnO1 <pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt; &amp;nums) {\n        if(nums.empty()) return 0;\n        if(nums.size()==1) return nums[0];\n        vector&lt;int&gt;dp(nums.size(),0);\n        dp[0]=nums[0];\n        dp[1]=max(nums[1],nums[0]);\n\n        for (int i = 2; i &lt;nums.size() ; ++i) {\n            dp[i]= max(dp[i-1],dp[i-2]+nums[i]);\n        }\n        return dp[nums.size()-1];\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        if (nums.empty()) {\n            return 0;\n        }\n        int size = nums.size();\n        if (size == 1) {\n            return nums[0];\n        }\n        int first = nums[0], second = max(nums[0], nums[1]);\n        for (int i = 2; i &lt; size; i++) {\n            int temp = second;\n            second = max(first + nums[i], second);\n            first = temp;\n        }\n        return second;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#199","title":"199 \u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u53f3\u200b\u89c6\u56fe","text":"<p>\u200b\u89c2\u5bdf\u200b\u5230\u200b\u7b54\u6848\u200b\u662f\u200b\u6bcf\u5c42\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; rightSideView(TreeNode* root) {\n\n        vector&lt;int&gt; anw;\n        if (root == nullptr)\n            return anw;\n        queue&lt;TreeNode*&gt; qu;\n        qu.push(root);\n        while (!qu.empty()) {\n            int k = qu.size();\n            for (int i = 0; i &lt; k; i++) {\n                TreeNode* item = qu.front();\n                qu.pop();\n                if (i == k - 1)\n                    anw.push_back(item-&gt;val);\n                if (item-&gt;left)\n                    qu.push(item-&gt;left);\n                if (item-&gt;right)\n                    qu.push(item-&gt;right);\n            }\n        }\n        return anw;\n    }\n};\n</code></pre> <p>dfs\uff1a\u200b\u6839\u53f3\u200b\u5de6\u200b\uff0c\u200b\u5982\u679c\u200b\u7b54\u6848\u200b\u4e2a\u6570\u200b\u548c\u200b\u5c42\u6570\u200b\uff08\u200b\u4ece\u200b 0 \u200b\u5f00\u59cb\u200b\uff09\u200b\u76f8\u540c\u200b\uff0c\u200b\u653e\u5165\u200b</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; anw;\n\n    vector&lt;int&gt; rightSideView(TreeNode *root) {\n\n        if (root == nullptr) return anw;\n        dfs(root, 0);\n        return anw;\n    }\n\n    void dfs(TreeNode *root, int depth) {\n        if (root == nullptr) return;\n        if (depth == anw.size()) anw.push_back(root-&gt;val);\n\n        dfs(root-&gt;right, depth + 1);\n        dfs(root-&gt;left, depth + 1);\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#202","title":"202 \u200b\u5feb\u4e50\u200b\u6570","text":"<p>\u200b\u5e76\u200b\u4e0d\u200b\u5feb\u4e50\u200b</p> <p>\u200b\u5b98\u65b9\u200b\u9898\u89e3\u200b\u5199\u200b\u7684\u200b\u633a\u200b\u597d\u200b\uff0c\u200b\u8865\u5145\u200b\u8bf4\u660e\u200b\uff0c\u200b\u5982\u679c\u200b x \u200b\u957f\u5ea6\u200b\u5927\u4e8e\u200b 3\uff0c\u200b\u6700\u7ec8\u200b x \u200b\u4f1a\u200b\u5c0f\u4e8e\u200b\u7b49\u4e8e\u200b 243\uff08999 -&gt; 243\uff09\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u7ed5\u6765\u200b\u7ed5\u200b\u53bb\u200b\u7ed5\u200b\u5230\u200b\u957f\u5ea6\u200b\u4e3a\u200b 3 \u200b\u72b6\u6001\u200b\u9876\u591a\u4f1a\u200b\u6709\u200b 243 \u200b\u4e2a\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u72b6\u6001\u200b\u6570\u200b\u6709\u9650\u200b\uff08\u200b\u6700\u200b\u591a\u200b 243\uff09\u200b\u4f46\u662f\u200b\u64cd\u4f5c\u200b\u65e0\u9650\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8981\u4e48\u200b\u6210\u200b\u73af\u7ed5\u200b\u56de\u5230\u200b\u672c\u8eab\u200b\uff0c\u200b\u8981\u4e48\u200b\u5230\u200b 1 \u200b\u51fa\u53e3\u200b</p> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u73af\u200b</p> \u200b\u54c8\u5e0c\u200b\u8868\u200b\u5feb\u6162\u200b\u6307\u9488\u200b <pre><code>class Solution {\npublic:\n    bool isHappy(int n) {\n        unordered_map&lt;int, bool&gt; appear;\n        while (true) {\n            n = getNext(n);\n            if (n == 1) return true;\n            if (appear[n] == false) appear[n] = true;\n            else return false;\n        }\n    }\n\n    int getNext(int n) {\n        int anw = 0;\n        while (n &gt; 0) {\n            int x = n % 10;\n            anw += x * x;\n            n /= 10;\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    bool isHappy(int n) {\n        int slow = getNext(n), fast = getNext(getNext(n));\n        while (fast != 1 &amp;&amp; slow != fast) {\n            slow = getNext(slow);\n            fast = getNext(getNext(fast));\n        }\n        return fast == 1;\n    }\n\n    int getNext(int n) {\n        int anw = 0;\n        while (n &gt; 0) {\n            int x = n % 10;\n            anw += x * x;\n            n /= 10;\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#205","title":"205 \u200b\u540c\u6784\u200b\u5b57\u7b26\u4e32","text":"<p>\u200b\u79bb\u6563\u6570\u5b66\u200b\u6700\u200b\u6709\u7528\u200b\u7684\u200b\u4e00\u6b21\u200b</p> <ol> <li>\u200b\u4e00\u4e2a\u200b\u54c8\u5e0c\u200b\u8868\u200b\u4e0d\u80fd\u200b\u7ef4\u62a4\u200b\u591a\u200b\u5bf9\u200b\u4e00\u200b\uff0c\u200b\u8981\u4e48\u200b\u7528\u200b\u4e24\u4e2a\u200b\uff0c\u200b\u8981\u4e48\u200b\u5224\u65ad\u200b\u4e24\u6b21\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b\u6362\u200b\u4e00\u79cd\u200b\u601d\u8def\u200b\uff0c\u200b\u5168\u90fd\u200b\u8f6c\u200b\u6210\u200b\u7b2c\u4e09\u65b9\u200b\uff0c\u200b\u6c49\u8bed\u200b\u548c\u200b\u65e5\u8bed\u200b\u5168\u90fd\u200b\u6362\u6210\u200b\u82f1\u8bed\u200b\uff0c\u200b\u68c0\u6d4b\u200b\u82f1\u8bed\u200b\u662f\u4e0d\u662f\u200b\u4e00\u6837\u200b\u5c31\u884c\u4e86\u200b\uff0c\u200b\u5177\u4f53\u200b\u4e3a\u200b\u5bf9\u5e94\u200b\u6210\u200b\u9996\u6b21\u200b\u51fa\u73b0\u200b\u7684\u200b\u4e0b\u6807\u200b</li> </ol> <pre><code>abca\n\n0120\n\ndefd\n</code></pre> \u200b\u5224\u200b\u4e24\u6b21\u200b\u8f6c\u200b\u4e0b\u6807\u200b <pre><code>class Solution {\npublic:\n\n    bool isIsomorphic(string s, string t) {\n        return checkT2S(s, t) &amp;&amp; checkT2S(t, s);\n    }\n\n    bool checkT2S(string t, string s) {\n        unordered_map&lt;char, char&gt; ttos;\n        for (int i = 0; i &lt; s.size(); i++) {\n            if (ttos.find(t[i]) == ttos.end()) {\n                ttos[t[i]] = s[i];\n            }\n            else if (ttos[t[i]] != s[i]) return false;\n        }\n        return true;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n\n    bool isIsomorphic(string s, string t) {\n        return toIndexString(s) == toIndexString(t);\n    }\n\n    string toIndexString(string s) {\n        int cnt = 0;\n        unordered_map&lt;char, int&gt; toindex;\n        string res;\n        for (char x: s) {\n            if (toindex.find(x) == toindex.end()) {\n                toindex[x] = cnt;\n                // \u200b\u9632\u6b62\u200b 21 0 2 10 \u200b\u4e0d\u80fd\u200b\u533a\u5206\u200b\uff0c\u200b\u6240\u4ee5\u200b\u52a0\u200b\u7a7a\u683c\u200b\n                res +=' '+ to_string(cnt);\n                cnt++;\n            }\n            else res +=' '+ to_string(toindex[x]);\n        }\n        cout&lt;&lt;res&lt;&lt;'\\n';\n        return res;\n    }\n\n\n};\n</code></pre>"},{"location":"backend/leetcode/#211","title":"211 \u200b\u6dfb\u52a0\u200b\u4e0e\u200b\u641c\u7d22\u200b\u5355\u8bcd","text":"<p>\u200b\u524d\u7f00\u200b\u6811\u200b\uff0c\u200b\u4e3b\u8981\u200b\u662f\u200b\u641c\u7d22\u200b\u7684\u200b\u65f6\u5019\u200b\u600e\u4e48\u200b\u5904\u7406\u200b\u901a\u914d\u7b26\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8fdb\u884c\u200b\u4e00\u4e2a\u200b dfs</p> <pre><code>class WordDictionary {\npublic:\n    bool isend;\n    WordDictionary *next[26];\n\n    WordDictionary() {\n        isend = false;\n        fill(next, next + 26, nullptr);\n    }\n\n    void addWord(string word) {\n        WordDictionary *cur = this;\n        for (char x: word) {\n            int id = x - 'a';\n            if (cur-&gt;next[id] == nullptr) cur-&gt;next[id] = new WordDictionary();\n            cur = cur-&gt;next[id];\n        }\n        cur-&gt;isend = true;\n    }\n\n    bool search(string word) {\n        return search_core(this, word, 0);\n    }\n\n    bool search_core(WordDictionary *cur, string &amp;word, int cnt) {\n        if (cnt == word.size()) return cur-&gt;isend;\n        if (word[cnt] == '.') {\n            for (auto &amp;x: cur-&gt;next)\n                if (x != nullptr &amp;&amp; search_core(x, word, cnt + 1))\n                    return true;\n            return false;\n        }\n        else {\n            int id = word[cnt] - 'a';\n            if (cur-&gt;next[id] == nullptr) return false;\n            return search_core(cur-&gt;next[id], word, cnt + 1);\n        }\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#212-2","title":"212 \u200b\u5355\u8bcd\u200b\u641c\u7d22\u200b2","text":"<p>\u200b\u4e00\u773c\u200b\u7206\u200b\u641c\u200b\uff0c\u200b\u95ee\u9898\u200b\u5728\u4e8e\u200b\u600e\u4e48\u200b\u51cf\u5c11\u200b\u65e0\u6548\u200b\u7684\u200b\u641c\u7d22\u200b\u3002</p> <ol> <li>\u200b\u6709\u200b\u5f88\u591a\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u7528\u200b trie</li> <li>\u200b\u641c\u8fc7\u200b\u7684\u200b\u72b6\u6001\u200b\u4e0d\u200b\u5728\u200b\u641c\u200b</li> <li>\u200b\u4e0d\u200b\u5728\u200b trie \u200b\u7684\u200b\u4e0d\u200b\u641c\u200b</li> </ol> <pre><code>class Trie {\n    bool isend;\n\npublic:\n    string word;\n    vector&lt;Trie*&gt; next;\n\n    Trie() {\n        isend = false;\n        next.assign(26, nullptr);\n    }\n\n    void add(string&amp; word) {\n        Trie* cur = this;\n        for (char x : word) {\n            int id = x - 'a';\n            if (cur-&gt;next[id] == nullptr)\n                cur-&gt;next[id] = new Trie();\n            cur = cur-&gt;next[id];\n        }\n        cur-&gt;word = word;\n        cur-&gt;isend = true;\n    }\n};\n\nclass Solution {\n    vector&lt;string&gt; anw;\n    Trie trie;\n\npublic:\n    vector&lt;string&gt; findWords(vector&lt;vector&lt;char&gt;&gt;&amp; board,\n                             vector&lt;string&gt;&amp; words) {\n        for (auto x : words)\n            trie.add(x);\n        for (int row = 0; row &lt; board.size(); row++)\n            for (int col = 0; col &lt; board[0].size(); col++)\n                dfs(row, col, &amp;trie, board);\n        return anw;\n    }\n\n    void dfs(int row, int col, Trie* cur, vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n        if (row &lt; 0 || row &gt;= board.size() || col &lt; 0 || col &gt;= board[0].size())\n            return;\n        char c = board[row][col];\n        if (c == '#' || cur-&gt;next[c - 'a'] == nullptr)\n            return;\n\n        cur = cur-&gt;next[c - 'a']; // trie \u200b\u770b\u200b\u4e0b\u200b\u4e00\u4f4d\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6709\u200b dummy \u200b\u5934\u200b\n        if (!cur-&gt;word.empty()) {\n            anw.emplace_back(cur-&gt;word);\n            cur-&gt;word.clear(); // \u200b\u9632\u6b62\u200b\u591a\u6b21\u200b\u6dfb\u52a0\u200b\u5230\u200b\u7b54\u6848\u200b\n        }\n\n        board[row][col] = '#';  // \u200b\u8bbf\u95ee\u200b\u8fc7\u200b\u4e86\u200b\u5c31\u200b\u4fee\u6539\u200b\u6807\u5fd7\u200b\u4f4d\u200b\n        dfs(row + 1, col, cur, board);\n        dfs(row - 1, col, cur, board);\n        dfs(row, col + 1, cur, board);\n        dfs(row, col - 1, cur, board);\n        board[row][col] = c;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#213-2","title":"213 \u200b\u6253\u5bb6\u52ab\u820d\u200b2","text":"<p>\u200b\u770b\u6210\u200b\u662f\u200b 0-n-1 \u200b\u548c\u200b 1-n \u200b\u4e24\u200b\u90e8\u5206\u200b</p> <pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt; &amp;nums) {\n        if (nums.size() == 1) return nums[0];\n        if (nums.size() == 2) return max(nums[1], nums[0]);\n\n        int anw0 = choose(nums, 0, nums.size() - 2);\n        int anw1 = choose(nums, 1, nums.size() - 1);\n      //  cout &lt;&lt;anw0&lt;&lt;' ' &lt;&lt; anw1;\n        return max(anw0, anw1);\n    }\n\n    int choose(vector&lt;int&gt; &amp;nums, int begin, int end) {\n        vector&lt;int&gt; anw(end - begin + 1);\n        anw[0] = nums[begin];\n        anw[1] = max(nums[begin], nums[begin + 1]);\n        if (begin == 1)\n            for (int i = 2; i &lt; anw.size(); i++)\n                anw[i] = max(anw[i - 1], anw[i - 2] + nums[i + 1]);\n        else {\n            for (int i = 2; i &lt; anw.size(); i++)\n                anw[i] = max(anw[i - 1], anw[i - 2] + nums[i]);\n        }\n        return anw[anw.size() - 1];\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#215-k","title":"215 \u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200b\u7b2c\u200bK\u200b\u4e2a\u200b\u6700\u5927\u200b\u5143\u7d20","text":"<p>\u200b\u5feb\u901f\u200b\u9009\u62e9\u200b\uff0c\u200b\u7ecf\u5178\u200b\u9898\u76ee\u200b\u3002</p> <p>\u200b\u666e\u901a\u200b\u5feb\u6392\u200b\uff1a\u200b\u6bcf\u6b21\u200b\u5feb\u6392\u200b\u540e\u200b <code>[lo,j]</code> \u200b\u7684\u200b\u5143\u7d20\u200b\u662f\u200b <code>&lt;=x</code> \u200b\u7684\u200b\uff0c<code>[j+1,hi]</code> \u200b\u7684\u200b\u5143\u7d20\u200b\u662f\u200b <code>&gt;=x</code> \u200b\u7684\u200b\uff0c\u200b\u5f53\u200b <code>lo==hi</code> \u200b\u5c31\u662f\u200b\u7b54\u6848\u200b\u3002\u200b\u8981\u200b\u627e\u200b\u7b2c\u200b k \u200b\u5927\u200b\uff0c\u200b\u76f4\u63a5\u200b\u6570\u7ec4\u200b\u5f04\u200b\u6210\u200b\u964d\u5e8f\u200b\uff0c\u200b\u5bfb\u627e\u200b\u4e0b\u6807\u200b\u4e3a\u200b k-1 \u200b\u7684\u200b\u5143\u7d20\u200b</p> <pre><code>class Solution {\npublic:\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        return quick(nums, 0, nums.size() - 1, k - 1);\n    }\n\n    int quick(vector&lt;int&gt;&amp; nums, int lo, int hi, int k) {\n        if (lo &gt;= hi)\n            return nums[k];\n        int i = lo - 1, j = hi + 1;\n        int x = nums[lo + hi &gt;&gt; 1];\n        while (i &lt; j) {\n            do i++; while (nums[i] &gt; x);\n            do j--; while (nums[j] &lt; x);\n            if (i &lt; j)\n                swap(nums[i], nums[j]);\n        }\n        if (k &lt;= j)\n            return quick(nums, lo, j, k);\n        else\n            return quick(nums, j + 1, hi, k);\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#225","title":"225 \u200b\u4e24\u4e2a\u200b\u961f\u5217\u200b\u5b9e\u73b0\u200b\u6808","text":"<p>\u200b\u6bcf\u6b21\u200b\u653e\u200b\u7684\u200b\u65f6\u5019\u200b\u5148\u200b\u653e\u5230\u200b\u8f85\u52a9\u200b\u961f\u5217\u200b\uff0c\u200b\u628a\u200b\u4e3b\u200b\u961f\u5217\u200b\u7684\u200b\u5185\u5bb9\u200b\u5168\u200b\u5bfc\u5165\u200b\u8f85\u52a9\u200b\uff0c\u200b\u5728\u200b\u628a\u200b\u8f85\u52a9\u200b\u961f\u5217\u200b\u5bfc\u5165\u200b\u4e3b\u200b\u961f\u5217\u200b</p> <p>\u200b\u6216\u8005\u200b\u653e\u200b\u7684\u200b\u65f6\u5019\u200b\u5148\u200b\u653e\u5230\u200b\u4e3b\u200b\u961f\u5217\u200b\uff0c\u200b\u51fa\u200b\u7684\u200b\u65f6\u5019\u200b\u5148\u200b\u628a\u200b\u524d\u200b n-1 \u200b\u4e2a\u200b\u653e\u5230\u200b\u8f85\u52a9\u200b\u961f\u5217\u200b\uff0c\u200b\u5f39\u200b\u51fa\u200b\u7b54\u6848\u200b\uff0c\u200b\u518d\u200b\u628a\u200b\u8f85\u52a9\u200b\u961f\u5217\u200b\u5185\u5bb9\u200b\u632a\u56de\u4e3b\u200b\u961f\u5217\u200b</p> <pre><code>class MyStack {\npublic:\n    queue&lt;int&gt; que;\n    queue&lt;int&gt; aux;\n\n    MyStack() {\n\n    }\n\n    void push(int x) {\n        aux.push(x);\n        while (!que.empty()) {\n            aux.push(que.front());\n            que.pop();\n        }\n        swap(que, aux);\n    }\n\n    int pop() {\n        int r = que.front();\n        que.pop();\n        return r;\n    }\n\n    int top() {\n        int r = que.front();\n        return r;\n    }\n\n    bool empty() {\n        return que.empty();\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#229-2","title":"229 \u200b\u591a\u6570\u200b\u5143\u7d20\u200b2","text":"<ul> <li>\u200b\u5982\u679c\u200b\u5df2\u7ecf\u200b\u51fa\u73b0\u200b\u4e86\u200b\uff0c\u200b\u6b21\u6570\u200b\u52a0\u4e00\u200b</li> <li>\u200b\u5982\u679c\u200b\u6ca1\u200b\u51fa\u73b0\u200b<ul> <li>\u200b\u6876\u200b\u8fd8\u200b\u80fd\u200b\u653e\u200b\uff0c\u200b\u5c31\u200b\u653e\u5230\u200b\u6876\u200b\u91cc\u200b</li> <li>\u200b\u6ca1\u6709\u200b\u591a\u4f59\u200b\u7684\u200b\u6876\u200b\uff0c\u200b\u6240\u6709\u200b\u7684\u200b\u6b21\u6570\u200b\u51cf\u4e00\u200b</li> </ul> </li> </ul> <p>\u200b\u53ef\u80fd\u200b\u6709\u200b\u51fa\u73b0\u200b\u5728\u200b\u6570\u7ec4\u200b\u9760\u200b\u540e\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u4f1a\u200b\u5360\u200b\u5230\u200b\u6876\u200b\u91cc\u200b\uff0c\u200b\u6240\u4ee5\u200b\u91cd\u65b0\u200b\u7edf\u8ba1\u200b\u4e00\u6b21\u200b\uff08\u200b\u6876\u200b\u7684\u200b\u4e2a\u6570\u200b\u591a\u4e8e\u200b 1\uff09,\u200b\u6216\u8005\u200b\u62b5\u6d88\u200b\u4e86\u200b\u4e00\u90e8\u5206\u200b\u6b63\u786e\u200b\u6570\u5b57\u200b\u6b21\u6570\u200b <code>eg:[2, 2, 1, 3]</code></p> <p>\u200b\u6876\u200b\u7684\u200b\u4e2a\u6570\u200b\uff1a\u200b\u5047\u5982\u200b\u8bf4\u200b\u8981\u200b\u627e\u200b\u8d85\u8fc7\u200b <code>n/k</code> \u200b\u4e2a\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u6876\u200b\u7684\u200b\u4e2a\u6570\u200b\u5c31\u662f\u200b <code>k-1</code> \u3002\u200b\u5047\u5982\u200b\u53d6\u200b <code>x</code> \u200b\u4e2a\u200b\uff0c <code>x*(n/k) &lt;= n  ---&gt; x &lt;= k</code> \uff0c\u200b\u53c8\u200b\u56e0\u4e3a\u200b\u8d85\u8fc7\u200b <code>n/k</code> \uff0c\u200b\u6240\u4ee5\u200b\u53d6\u200b <code>k-1</code></p> <pre><code>class Solution {\npublic:\n    //first \u200b\u5b58\u200b\u6570\u5b57\u200b\uff0csecond \u200b\u5b58\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b\n    pair&lt;int, int&gt; bucket[2];\n\n    void write(int x) { \n        // item \u200b\u53d6\u200b\u5f15\u7528\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8981\u200b\u4fee\u6539\u200b\u91cc\u8fb9\u200b\u7684\u200b\u5143\u7d20\u200b,\u200b\u4e0d\u7136\u7684\u8bdd\u200b\u91cc\u8fb9\u200b\u7684\u200b\u503c\u200b\u4e0d\u53d8\u200b\n        for (auto &amp;item: bucket)\n            if (item.first == x) {\n                item.second++;\n                return;\n            }\n        for (auto &amp;item: bucket)\n            if (item.second == 0) {\n                item.first = x;\n                item.second = 1;\n                return;\n            }\n        for (auto &amp;item: bucket)\n            item.second--;\n\n    }\n\n    vector&lt;int&gt; majorityElement(vector&lt;int&gt; &amp;nums) {\n        bucket[0].first = bucket[1].first = INT_MAX;\n        for (auto x: nums) {\n            write(x);\n        }\n\n        vector&lt;int&gt; res;\n        bucket[0].second = bucket[1].second = 0;\n\n        for (auto x: nums) {\n            if (x == bucket[0].first)\n                bucket[0].second++;\n            else if (x == bucket[1].first)\n                bucket[1].second++;\n        }\n        if (bucket[0].second &gt; nums.size() / 3)\n            res.push_back(bucket[0].first);\n        if (bucket[1].second &gt; nums.size() / 3)\n            res.push_back(bucket[1].first);\n        return res;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#230-k","title":"230 \u200b\u4e8c\u53c9\u200b\u641c\u7d22\u200b\u6811\u200b\u7b2c\u200bk\u200b\u4e2a\u200b\u5143\u7d20","text":"<p>\u200b\u4e2d\u5e8f\u904d\u200b\u5386\u65f6\u200b\u7edf\u8ba1\u200b\u4e2a\u6570\u200b</p> <pre><code>class Solution {\npublic:\n    int kthSmallest(TreeNode *root, int k) {\n\n        this-&gt;k = k;\n        dfs(root);\n        return anw;\n    }\n\n    int k, anw, cnt;\n\n    void dfs(TreeNode *root) {\n        if (root == nullptr) return;\n        dfs(root-&gt;left);\n        cnt++;\n        if (cnt == k) {\n            anw = root-&gt;val;\n            return;\n        }\n        dfs(root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#232","title":"232 \u200b\u4e24\u4e2a\u200b\u6808\u200b\u5b9e\u73b0\u200b\u961f\u5217","text":"<p>push \u200b\u7684\u200b\u65f6\u5019\u200b\u597d\u200b\u8bf4\u200b\uff0c\u200b\u5728\u200b pop \u200b\u7684\u200b\u65f6\u5019\u200b\u6ca1\u6709\u200b\u5fc5\u8981\u200b\u5168\u200b\u5012\u817e\u200b\uff0c\u200b\u53ea\u6709\u200b\u5728\u200b\u8f93\u51fa\u200b\u6808\u4e3a\u200b\u7a7a\u200b\u7684\u200b\u65f6\u5019\u200b\u518d\u200b\u5012\u817e\u200b\u5c31\u884c\u4e86\u200b</p> solve <pre><code>class MyQueue {\nprivate:\n    stack&lt;int&gt; inSt;\n    stack&lt;int&gt; outSt;\npublic:\n    MyQueue() {\n    }\n\n    void push(int x) {\n        inSt.push(x);\n    }\n\n    int pop() {\n        if (outSt.empty()) {\n            while (!inSt.empty()) {\n                outSt.push(inSt.top());\n                inSt.pop();\n            }\n        }\n        int x = outSt.top();\n        outSt.pop();\n        return x;\n    }\n\n    int peek() {\n        if (outSt.empty()) {\n            while (!inSt.empty()) {\n                outSt.push(inSt.top());\n                inSt.pop();\n            }\n        }\n        return outSt.top();\n    }\n\n    bool empty() {\n        return inSt.empty() &amp;&amp; outSt.empty();\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#236","title":"236 \u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u6700\u8fd1\u200b\u516c\u5171\u200b\u7956\u5148","text":"<p>\u200b\u53ea\u200b\u611f\u89c9\u200b\u51fa\u662f\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\uff08\u200b\u5f53\u65f6\u200b\u7ea2\u76ae\u4e66\u200b\u56fe\u8bba\u200b\u770b\u200b\u6709\u6ca1\u6709\u200b\u73af\u200b\uff09\uff0c\u200b\u4f46\u662f\u200b\u5728\u200b\u7956\u5148\u200b\u662f\u200b\u672c\u8eab\u200b\u548c\u200b\u4e0a\u8fb9\u200b\u8282\u70b9\u200b\u5361\u200b\u4e86\u200b</p> <pre><code>class Solution {\npublic:\n    TreeNode *lowestCommonAncestor(TreeNode *root, TreeNode *p, TreeNode *q) {\n        // \u200b\u627e\u5230\u200b\u5c31\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6700\u4e0a\u5c42\u200b\n        if (root == nullptr || root == q | root == p) return root;\n        TreeNode *left = lowestCommonAncestor(root-&gt;left, p, q);\n        TreeNode *right = lowestCommonAncestor(root-&gt;right, p, q);\n        if (left &amp;&amp; right) return root;\n        else left ? left : right;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#238","title":"238 \u200b\u9664\u200b\u81ea\u8eab\u200b\u4ee5\u5916\u200b\u6570\u7ec4\u200b\u7684\u200b\u4e58\u79ef","text":"<p>\u200b\u524d\u7f00\u200b\u548c\u200b\u601d\u8def\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u662f\u200b\u524d\u7f00\u200b\u4e58\u200b\u548c\u200b\u540e\u7f00\u200b\u4e58\u200b\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt; &amp;nums) {\n        int sz = nums.size();\n        vector&lt;int&gt; anw(sz, 1);\n        int right_mul=1;\n        for (int i = 1; i &lt; sz; ++i) {\n            anw[i]=anw[i-1]*nums[i-1];\n        }\n        for(int i=sz-2;i&gt;=0;--i){\n            right_mul*=nums[i+1];\n            anw[i]=anw[i]*right_mul;\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#239","title":"239 \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u6700\u5927\u503c","text":"<p>\u200b\u6700\u200b\u5f00\u59cb\u200b\u60f3\u5230\u200b\u7684\u200b\u662f\u200b\u7a97\u53e3\u200b\u65b0\u8fdb\u200b\u7684\u200b\u503c\u200b\u66f4\u200b\u5927\u200b\uff0c\u200b\u90a3\u4e48\u200b\u7a97\u53e3\u200b\u91cc\u200b\u6240\u6709\u200b\u6bd4\u200b\u5b83\u200b\u5c0f\u200b\u7684\u200b\u90fd\u200b\u4e0d\u662f\u200b\u7b54\u6848\u200b\u4e86\u200b\uff0c\u200b\u770b\u200b\u63d0\u793a\u200b\u53d1\u73b0\u200b\u662f\u200b\u53cc\u7aef\u200b\u961f\u5217\u200b\u5b58\u200b\u5019\u9009\u200b\u7b54\u6848\u200b\uff0c\u200b\u4e0d\u662f\u200b\u7b54\u6848\u200b\u4e0d\u7528\u200b\u5b58\u200b\u3002\u200b\u8fd9\u200b\u4e5f\u200b\u662f\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\uff08\u200b\u53ef\u4ee5\u200b\u76f8\u7b49\u200b\u5143\u7d20\u200b\uff09\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5e94\u7528\u200b</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt; &amp;nums, int k) {\n\n        deque&lt;int&gt; deque;\n        vector&lt;int&gt; anw;\n        for (int right = 0, left = 0; right &lt; nums.size(); right++) {\n            while (!deque.empty() &amp;&amp; nums[right] &gt; deque.back()) {\n                deque.pop_back();\n            }\n            deque.push_back(nums[right]);\n\n            if (right - left + 1 &gt; k) {\n                if (nums[left] == deque.front()) deque.pop_front();\n                left++;\n            }\n            if (right-left+1 == k)\n                anw.push_back(deque.front());\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#240","title":"240 \u200b\u641c\u7d22\u200b\u4e8c\u7ef4\u200b\u77e9\u9635","text":"<p>\u200b\u4ece\u200b\u53f3\u4e0a\u89d2\u200b\u5f80\u5de6\u8fb9\u200b\u548c\u200b\u4e0b\u8fb9\u200b\u770b\u200b\u662f\u200b\u4e8c\u53c9\u6811\u200b</p> <pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n\n        int row=0,col=matrix[0].size()-1;\n        while (row&gt;=0&amp;&amp;row&lt;matrix.size()&amp;&amp;col&gt;=0&amp;&amp; col&lt;matrix[0].size()){\n            if(matrix[row][col]==target) return true;\n            else if(matrix[row][col]&lt;target) row++;\n            else col--;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#274-h","title":"274 H\u200b\u6307\u6570","text":"<p>\u200b\u770b\u8d77\u6765\u200b\u633a\u200b\u7b80\u5355\u200b\uff0c\u200b\u505a\u200b\u8d77\u6765\u200b\u96be\u200b</p> <p>\u200b\u6709\u200b H \u200b\u4e2a\u6570\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b H\uff0c\u200b\u627e\u200b\u6700\u5927\u200b\u7684\u200b H</p> <ol> <li>\u200b\u53d1\u73b0\u200b H \u200b\u5728\u200b [0, size]\uff0c\u200b\u53ef\u4ee5\u200b\u4e8c\u5206\u200b\u627e\u200b\u6709\u200b\u81f3\u5c11\u200b H \u200b\u4e2a\u6570\u200b\u5927\u4e8e\u200b H \u200b\u7684\u200b\u53f3\u200b\u7aef\u70b9\u200b</li> <li>\u200b\u5148\u6392\u200b\u4e2a\u5e8f\u200b\uff0c\u200b\u5047\u5982\u200b\u8981\u200b\u770b\u200b\u662f\u4e0d\u662f\u200b\u6709\u200b 4 \u200b\u4e2a\u6570\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b 4\uff0c\u200b\u600e\u4e48\u200b\u627e\u200b\u5462\u200b\uff0c\u200b\u5e94\u8be5\u200b\u662f\u4ece\u200b\u6570\u7ec4\u200b\u540e\u9762\u200b\u5f80\u524d\u200b\u770b\u200b\u56db\u4e2a\u200b\uff0c\u200b\u5982\u679c\u200b\u7b2c\u56db\u4e2a\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b\u56db\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8bf4\u660e\u200b\u7b26\u5408\u200b\u3002\u200b\u6839\u636e\u200b\u8fd9\u4e2a\u200b\u6761\u4ef6\u200b\u53ef\u4ee5\u200b\u4ece\u524d\u200b\u5f80\u540e\u200b\u627e\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4ece\u540e\u200b\u5f80\u524d\u200b\u627e\u200b</li> <li>\u200b\u7528\u6876\u200b\u8bb0\u5f55\u200b\uff0c\u200b\u8d85\u8fc7\u200b size \u200b\u7684\u200b\u76f8\u5f53\u4e8e\u200b\u5f15\u7528\u200b\u4e3a\u200b size\uff0c\u200b\u4ece\u540e\u200b\u5f80\u524d\u200b\u627e\u5230\u200b\u7b2c\u4e00\u4e2a\u200b\u6ee1\u8db3\u200b \u200b\u5f15\u7528\u200b\u52a0\u200b\u548c\u200b &gt;= H \u200b\u7684\u200b H</li> </ol> <p>\u200b\u603b\u7ed3\u200b\uff1a\u200b\u7528\u200b\u4e8c\u5206\u200b\u548c\u200b\u6876\u200b\u6bd4\u8f83\u200b\u597d\u200b\uff0c\u200b\u6392\u5e8f\u200b\u4e5f\u200b\u884c\u200b</p> \u200b\u4e8c\u5206\u200b\u4ece\u524d\u200b\u5f80\u540e\u200b\u4ece\u540e\u200b\u5f80\u524d\u200b\u6876\u200b <pre><code>class Solution {\npublic:\n    int hIndex(vector&lt;int&gt;&amp; citations) {\n        int n = citations.size();\n\n        int left = 0, right = n;\n        while (left &lt; right) {\n            int mid = left + right + 1 &gt;&gt; 1;\n            if (check(mid, citations))\n                left = mid;\n            else\n                right = mid - 1;\n        }\n        return left;\n    }\n\n    bool check(int mid, vector&lt;int&gt;&amp; nums) {\n        int cnt = 0;\n        for (int x : nums) {\n            if (x &gt;= mid)\n                cnt++;\n        }\n        return cnt &gt;= mid;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int hIndex(vector&lt;int&gt;&amp; citations) {\n        sort(citations.begin(), citations.end());\n\n        int anw = 0;\n        int n = citations.size();\n        for (int i = 1; i &lt;= n; i++) {\n            if (citations[n-i]&gt;=i)\n                anw = i;\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int hIndex(vector&lt;int&gt;&amp; citations) {\n        sort(citations.begin(), citations.end());\n\n        int n = citations.size();\n        for (int i = n; i &gt;=1; i--) {\n            if (citations[n-i]&gt;=i)\n                return i;\n        }\n        return 0;\n    }\n};\n</code></pre> <pre><code>#include&lt;vector&gt;\n\nclass Solution {\npublic:\n    int hIndex(vector&lt;int&gt;&amp; citations) {\n        int n = citations.size();\n        vector&lt;int&gt;f(n + 1);\n\n        for (int x : citations)\n            f[min(n, x)]++;\n\n        int total = 0;\n        for (int i = n; i &gt;= 0; i--)\n        {\n            total += f[i];\n            // \u200b\u4ece\u540e\u200b\u5f80\u524d\u200b\u627e\u5230\u200b\u7b2c\u4e00\u4e2a\u200b \u200b\u6709\u200b k \u200b\u4e2a\u6570\u200b &gt;= k\n            if (total &gt;= i) return i;\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#283-0","title":"283 \u200b\u79fb\u52a8\u200b0","text":"<p>\u200b\u8054\u52a8\u200b 26 27\uff0c\u200b\u628a\u200b\u975e\u200b\u96f6\u200b\u90fd\u200b\u6361\u200b\u51fa\u6765\u200b</p> <pre><code>class Solution {\n    public void moveZeroes(int[] nums) {\n        int newCount = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (nums[i] != 0) {\n                nums[newCount++] = nums[i];\n            }\n        }\n        for (int i = newCount; i &lt; nums.length; i++)\n            nums[i] = 0;\n    }\n}\n\nclass SolutionUpdate {\n    public void moveZeroes(int[] nums) {\n        int newCount = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (nums[i] != 0) {\n                int temp=nums[newCount];\n                nums[newCount++] = nums[i];\n                nums[i]=temp;\n            }\n        }\n\n    }\n}\n</code></pre> <p>\u200b\u4e0b\u8fb9\u200b\u662f\u200b\u4e3a\u4e86\u200b\u7528\u200b\u53cc\u200b\u6307\u9488\u200b\u800c\u7528\u200b\uff0c\u200b\u611f\u89c9\u200b\u6bd4\u8f83\u200b\u50f5\u786c\u200b</p> <p>\u200b\u4e00\u79cd\u200b\u662f\u200b\u53cc\u200b\u6307\u9488\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u6307\u5411\u200b\u65b0\u200b\u7684\u200b\u5f00\u59cb\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u627e\u200b\u5e94\u8be5\u200b\u51fa\u73b0\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4f4d\u200b</p> <pre><code>class Solution {\npublic:\n    void moveZeroes(vector&lt;int&gt; &amp;nums) {\n        int choose = 0;\n        for (int new_begin = 0; new_begin &lt; nums.size(); ++new_begin) {\n            while (choose &lt; nums.size() &amp;&amp; !nums[choose]) choose++;\n            if (choose &lt; nums.size())\n                nums[new_begin] = nums[choose++];\n            else {\n                while (new_begin&lt;nums.size())\n                    nums[new_begin++]=0;\n                break;\n            }\n        }\n    }\n};\n</code></pre> <p>\u200b\u4e0d\u592a\u597d\u200b\u7684\u200b\u505a\u6cd5\u200b\u662f\u200b\u4e92\u6362\u200b\uff0c\u200b\u9047\u5230\u200b\u4e00\u4e2a\u200b 0\uff0c\u200b\u5c31\u200b\u627e\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u975e\u200b 0\uff0c\u200b\u8fdb\u884c\u200b\u4e92\u6362\u200b\uff0c\u200b\u6ca1\u6709\u200b\u975e\u96f6\u200b\u5c31\u200b\u7ed3\u675f\u200b\uff0c\u200b\u4f46\u662f\u200b\u9700\u8981\u200b\u68c0\u67e5\u200b <code>[1, 0]</code> \u200b\u8fd9\u79cd\u200b</p> <pre><code>class Solution {\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) {\n\n        int next = 0;\n        while (next &lt; nums.size() &amp;&amp; nums[next] != 0)\n            next++;     // find first 0\n        while (next &lt; nums.size() &amp;&amp; nums[next] == 0)\n            next++;     // find first positive num after first 0\n\n        for (int new_start = 0; new_start &lt; nums.size(); ++new_start) {\n            if (nums[new_start] == 0) {\n                while (next &lt; nums.size() &amp;&amp; nums[next] == 0)\n                    next++;\n                if (next &gt;= nums.size())\n                    break;\n                else\n                    swap(nums[new_start], nums[next]);\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#287","title":"287 \u200b\u5bfb\u627e\u200b\u91cd\u590d\u200b\u6570","text":"<p>\u200b\u4ee5\u200b[1,3,4,2,2]\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u5982\u679c\u200b\u6709\u200b\u76f8\u540c\u200b\u6570\u5b57\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200b\u4f1a\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u73af\u200b</p> <p>\u200b\u6838\u5fc3\u200b\uff1a \u200b\u4e0b\u6807\u200b\u548c\u200b\u5185\u5bb9\u200b\u4e00\u8d77\u200b\u505a\u200b\u6307\u5411\u200b</p> \u200b\u4e0b\u6807\u200b 0 1 3 2 4 \u200b\u5185\u5bb9\u200b 1 3 2 4 2(\u200b\u6210\u73af\u200b) \u200b\u8282\u70b9\u200b 1 3 2 4 2 <p>\u200b\u7136\u540e\u200b\u5c31\u200b\u548c\u200b\u73af\u5f62\u200b\u94fe\u8868\u200b2\u200b\u4e00\u4e2a\u200b\u505a\u6cd5\u200b\uff0c\u200b\u5224\u73af\u200b\u627e\u200b\u5165\u53e3\u200b</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; num;\n\n    int next(int x) { return num[x]; }\n\n    int findDuplicate(vector&lt;int&gt; &amp;nums) {\n        num = nums;\n        int slow = 0;\n        int fast = 0;\n        do {\n            slow = next(slow);\n            fast = next(next(fast));\n        } while (slow != fast);\n\n        fast = 0;\n        while (fast != slow) {\n            fast = next(fast);\n            slow = next(slow);\n        }\n        return fast;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#347-k","title":"347 \u200b\u524d\u200b K \u200b\u4e2a\u200b\u9ad8\u9891\u200b\u5143\u7d20","text":"<p>\u200b\u54c8\u5e0c\u200b\u8868\u200b\u8bb0\u5f55\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b\uff0c\u200b\u7528\u200b\u6700\u5927\u200b\u5806\u200b\u6311\u51fa\u200b\u7b54\u6848\u200b</p> <pre><code>class Solution {\npublic:\n    unordered_map&lt;int, int&gt; map;\n    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;&gt; pq;\n\n    vector&lt;int&gt; topKFrequent(vector&lt;int&gt; &amp;nums, int k) {\n        vector&lt;int&gt; anw;\n        for (int x: nums) map[x]++;\n        for (auto item: map)pq.emplace(item.second, item.first);\n        for (int i = 0; i &lt; k; ++i) {\n            auto item = pq.top();\n            pq.pop();\n            anw.push_back(item.second);\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#367","title":"367 \u200b\u6709\u6548\u200b\u7684\u200b\u5b8c\u5168\u200b\u5e73\u65b9\u200b\u6570","text":"<p>\u200b\u548c\u200b 69 \u200b\u9898\u200b\u8054\u52a8\u200b\uff0c\u200b\u5148\u200b\u627e\u5230\u200b\u5e73\u65b9\u6839\u200b\u7684\u200b\u6574\u6570\u200b\uff0c\u200b\u7136\u540e\u200b\u5224\u65ad\u200b\uff1b\u200b\u6216\u8005\u200b <code>n^2 = (1+3...+2n-1)</code> \u200b\u7528\u200b\u5947\u6570\u200b\u80fd\u200b\u4e00\u76f4\u200b\u51cf\u5230\u200b\u96f6\u200b\u5c31\u662f\u200b\u5b8c\u5168\u200b\u5e73\u65b9\u200b\u6570\u200b <pre><code>class Solution {\n\n    public boolean isPerfectSquare(int num) {\n        int x = 1;\n        while (num &gt;= x) {\n            num -= x;\n            x += 2;\n        }\n        return num == 0;\n    }\n\n    public boolean isPerfectSquare2(int num) {\n        int x = mysqrt(num);\n        return x*x == num;\n    }\n\n    private int mysqrt(int num) {\n        int left = 0, right = num;\n        while (left &lt; right) {\n            int mid = 1 + left + (right - left) / 2;\n            if (mid &lt;= num / mid) left = mid;\n            else right = mid - 1;\n        }\n        return left;\n    }\n}\n</code></pre></p>"},{"location":"backend/leetcode/#394","title":"394 \u200b\u5b57\u7b26\u4e32\u200b\u89e3\u7801","text":"<p>\u200b\u770b\u8d77\u6765\u200b\u633a\u200b\u7b80\u5355\u200b\u7684\u200b\uff0c\u200b\u505a\u200b\u8d77\u6765\u200b\u5c31\u200b\u4e0d\u662f\u200b\u4e00\u200b\u56de\u4e8b\u200b\u4e86\u200b\u3002\u200b\u76f4\u63a5\u200b\u80cc\u4e0b\u6765\u200b\uff0c\u200b\u53e6\u5916\u200b\u4e0d\u8981\u200b\u4e00\u6b21\u200b\u5904\u7406\u200b\u592a\u200b\u591a\u200b\uff0c\u200b\u6bd4\u5982\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200b\u6570\u5b57\u200b\u4e0d\u8981\u200b\u518d\u5f00\u200b while \u200b\u5904\u7406\u200b\uff0c\u200b\u4e0d\u7136\u7684\u8bdd\u200b\u5728\u200b\u4e0b\u6807\u200b\u4e0a\u200b\u5c31\u200b\u4f1a\u200b\u5f88\u200b\u96be\u200b\u5904\u7406\u200b\u3002</p> <pre><code>class Solution {\npublic:\n    string decodeString(string s) {\n\n        // \u200b\u5b58\u200b\u7684\u200b\u662f\u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b\u4e32\u200b\u5e94\u8be5\u200b\u91cd\u590d\u200b\u591a\u5c11\u200b\u6b21\u200b\uff0c\u200b\u548c\u200b\u4e0a\u200b\u4e00\u6b21\u200b\u5904\u7406\u7ed3\u679c\u200b\n        stack&lt;pair&lt;int, string&gt;&gt; st;\n        int num = 0;\n        string current_process;\n        for (char i: s) {\n            if (i &gt;= '0' &amp;&amp; i &lt;= '9') {\n                num *= 10;\n                num += (i - '0');\n            }\n            else if (i == '[') {\n                st.emplace(num, current_process);\n                num = 0;\n                current_process.clear();\n            }\n            else if (i == ']') {\n                int n = st.top().first;\n                // n\u200b\u6307\u793a\u200b\u7684\u200b\u662f\u200bcurrent\u200b\u7684\u200b\u5faa\u73af\u200b\u6b21\u6570\u200b\uff0c\u200b\u4e0d\u662f\u200blast_result\u200b\u7684\u200b\n                string last_result = st.top().second;\n                st.pop();\n                for (int k = 0; k &lt; n; k++)\n                    last_result.append(current_process);\n\n                current_process = last_result;\n            }\n            else {\n                current_process += i;\n            }\n        }\n        return current_process;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#402-k","title":"402 \u200b\u79fb\u6389\u200bK\u200b\u4f4d\u200b\u6570\u5b57","text":"<p>\u200b\u5047\u5982\u200b\u53ea\u8981\u200b\u5220\u200b 1 \u200b\u4f4d\u200b <code>4321,2341,4231</code> \u200b\u5f88\u5bb9\u200b\u5c31\u200b\u770b\u51fa\u200b\u7b54\u6848\u200b\u5e94\u8be5\u200b\u5220\u9664\u200b 4</p> <p>\u200b\u5468\u59d3\u200b\u5ba4\u53cb\u200b\u76f4\u89c9\u200b\u5f88\u200b\u654f\u9510\u200b\u554a\u200b\uff0c\u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u5904\u7406\u200b\u7684\u200b\u90a3\u200b\u4e00\u4f4d\u200b\u524d\u8fb9\u200b\u6709\u200b\u6bd4\u200b\u5b83\u200b\u5927\u200b\u7684\u200b\uff0c\u200b\u5927\u200b\u7684\u200b\u5c31\u200b\u5e94\u8be5\u200b\u5220\u9664\u200b\uff0c\u200b\u5f88\u200b\u81ea\u7136\u200b\u7684\u200b\u60f3\u5230\u200b\u770b\u200b\u524d\u8fb9\u200b\u7684\u200b\u72b6\u6001\u200b\u5c31\u200b\u7528\u200b\u6808\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u9898\u200b\u5c31\u662f\u200b\u5355\u8c03\u200b\u6808\u200b\uff08\u200b\u6216\u8005\u8bf4\u200b\u662f\u200b\u4ece\u524d\u200b\u5230\u200b\u540e\u200b\u9009\u200b\u7684\u200b\u65f6\u5019\u200b\u5c3d\u91cf\u200b\u9009\u200b\u4e00\u4e9b\u200b\u5c0f\u200b\u7684\u200b\u6570\u5b57\u200b\uff0c\u200b\u6bd4\u5982\u200b <code>2341</code> \u200b\u9009\u200b 4 \u200b\u4e0d\u9009\u200b 1\uff09</p> <p>\u200b\u8fd8\u6709\u200b\u4e00\u4e9b\u200b\u7ec6\u8282\u200b</p> <ul> <li>\u200b\u524d\u5bfc\u200b\u96f6\u200b\uff0c\u200b\u6700\u200b\u5f00\u59cb\u200b\u505a\u6cd5\u200b\u662f\u200b\u628a\u200b 0 \u200b\u4e5f\u200b\u538b\u6808\u200b\uff0c\u200b\u6700\u540e\u200b\u4e00\u8d77\u200b\u5904\u7406\u200b\uff0c\u200b\u53e6\u200b\u4e00\u79cd\u200b\u662f\u200b\u5728\u200b\u5faa\u73af\u200b\u65f6\u200b\u5c31\u200b\u5904\u7406\u200b\uff08\u200b\u4ec0\u4e48\u200b\u65f6\u5019\u200b\u4e0d\u80fd\u200b\u5165\u6808\u200b\u5462\u200b\uff0c\u200b\u5c31\u662f\u200b\u6808\u4e3a\u200b\u7a7a\u4e14\u200b\u5f53\u524d\u200b\u5904\u7406\u200b\u4e3a\u200b 0\uff0c\u200b\u53cd\u8fc7\u6765\u200b\u5c31\u662f\u200b\u4ec0\u4e48\u200b\u65f6\u5019\u200b\u80fd\u5165\u200b\u6808\u200b\uff09</li> <li>\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u5f00\u59cb\u200b\u662f\u200b\u7528\u200b <code>anw= x+ anw</code> \u200b\u7136\u540e\u200b MLE \u200b\u4e86\u200b\uff0c\u200b\u7528\u200b <code>anw += x</code> \u200b\u52a0\u200b <code>reverse</code> \u200b\u5c31\u200b\u4e0d\u4f1a\u200b</li> <li>\u200b\u53ef\u80fd\u200b\u6ca1\u200b\u5220\u9664\u200b\u591f\u200b\uff0c\u200b\u5c31\u200b\u5f39\u6808\u200b</li> </ul> primarybetter <pre><code>class Solution {\npublic:\n    string removeKdigits(string num, int k) {\n\n        if (k &gt;= num.size()) return \"0\";\n\n        stack&lt;char&gt; st;\n        int removedCnt = 0;\n        for (char x: num) {\n            while (!st.empty() &amp;&amp; st.top() &gt; x &amp;&amp; removedCnt &lt; k) {\n                st.pop();\n                removedCnt++;\n            }\n            st.push(x);\n        }\n\n        while (removedCnt &lt; k) { // \u200b\u9632\u6b62\u200b\u6ca1\u200b\u5220\u9664\u200b\u591f\u200b\n            st.pop();\n            removedCnt++;\n        }\n\n        string anw;\n        while (!st.empty()) {\n            anw += st.top();\n            st.pop();\n        }\n\n        std::reverse(anw.begin(), anw.end());\n\n        int begin = 0; // \u200b\u5220\u9664\u200b\u524d\u5bfc\u200b\u96f6\u200b\n        while (begin &lt; anw.size() &amp;&amp; anw[begin] == '0') begin++;\n        anw = anw.substr(begin);\n\n        if (anw.empty() || anw[0] == '0') return \"0\";\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    string removeKdigits(string num, int k) {\n\n        if (k &gt;= num.size()) return \"0\";\n\n        stack&lt;char&gt; st;\n        int removedCnt = 0;\n        for (char x: num) {\n            while (!st.empty() &amp;&amp; st.top() &gt; x &amp;&amp; removedCnt &lt; k) {\n                st.pop();\n                removedCnt++;\n            }\n            if (!st.empty() || x != '0')\n                st.push(x);\n        }\n\n        while (removedCnt &lt; k&amp;&amp;!st.empty()) {\n            st.pop();\n            removedCnt++;\n        }\n\n        string anw;\n        while (!st.empty()) {\n            anw += st.top();\n            st.pop();\n        }\n        std::reverse(anw.begin(), anw.end());\n\n        if (anw.empty()) return \"0\";\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#437","title":"437 \u200b\u8def\u5f84\u200b\u603b\u548c","text":"<pre><code>class Solution {\npublic:\n    unordered_map&lt;long long, int&gt; map;\n    int anw = 0;\n\n    int pathSum(TreeNode *root, int targetSum) {\n        map[0] = 1;\n        dfs(root, 0, targetSum);\n        return anw;\n    }\n\n    void dfs(TreeNode *root, long long sum, int targetSum) {\n        if (root == nullptr) return;\n\n        sum += root-&gt;val;\n        if (map.count(sum - targetSum))\n            anw += map[sum - targetSum];\n\n        map[sum]++;\n        dfs(root-&gt;left, sum, targetSum);\n        dfs(root-&gt;right, sum, targetSum);\n        map[sum]--;\n\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#438","title":"438 \u200b\u627e\u5230\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\u6240\u6709\u200b\u5b57\u6bcd\u200b\u5f02\u4f4d\u200b\u8bcd","text":"<p>\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b</p> <pre><code>class Solution {\npublic:\n    map&lt;char, int&gt; cnt;\n    map&lt;char, int&gt; should;\n\n    bool check(const string&amp; p) {\n        for (auto item : should) {\n            if (cnt[item.first] != item.second)\n                return false;\n        }\n        return true;\n    }\n\n    vector&lt;int&gt; findAnagrams(string s, string p) {\n        for (char x : p)\n            should[x]++;\n\n        vector&lt;int&gt; anw;\n        int left, right;\n        for (left = 0, right = 0; right &lt; s.size(); right++) {\n            cnt[s[right]]++;\n            while (right - left + 1 &gt; p.size()) { // \u200b\u957f\u5ea6\u200b\u8d85\u200b\u4e86\u200b\u5c31\u200b\u7f29\u5c0f\u200b\n                cnt[s[left]]--;\n                left++;\n            }\n            if (right - left + 1 == p.size() &amp;&amp; check(p)) { // \u200b\u627e\u5230\u200b\u4e86\u200b\u7b54\u6848\u200b\n                anw.push_back(left);\n                // \u200b\u4e0b\u8fb9\u200b\u53ef\u6709\u53ef\u65e0\u200b\n                // cnt[s[left]]--;  \n                // left++;\n            }\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#543","title":"543 \u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u76f4\u5f84","text":"<p>\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\u627e\u5230\u200b\u5de6\u5b50\u200b\u6811\u200b\u7684\u200b\u6700\u5927\u200b\u6df1\u5ea6\u200b\uff0c\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u6700\u5927\u200b\u6df1\u5ea6\u200b\uff0c\u200b\u52a0\u200b\u8d77\u6765\u200b\u5c31\u662f\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u4e3a\u6839\u200b\u7684\u200b\u76f4\u5f84\u200b\uff0c\u200b\u6709\u200b\u53ef\u80fd\u200b\u4e0d\u200b\u7ecf\u8fc7\u200b\u6839\u200b\u8282\u70b9\u200b\uff0c\u200b\u6240\u4ee5\u200b\u7528\u200b\u5168\u5c40\u53d8\u91cf\u200b</p> <pre><code>class Solution {\npublic:\n    int anw = 0;\n    int diameterOfBinaryTree(TreeNode* root) {\n        if (root == nullptr) return 0;\n        dfs(root);\n        return anw;\n    }\n\n    int dfs(TreeNode* root) {\n        if (root == nullptr) return 0;\n        int left = dfs(root-&gt;left);\n        int right = dfs(root-&gt;right);\n        anw = max(anw, left + right);\n        return max(left, right) + 1;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#560-k","title":"560 \u200b\u548c\u200b\u4e3a\u200b K \u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4","text":"<p>\u200b\u5f00\u59cb\u200b\u4ee5\u4e3a\u200b\u662f\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\uff0c\u200b\u4f46\u662f\u200b\u5e26\u200b\u8d1f\u6570\u200b\uff0c\u200b\u505a\u200b\u4e0d\u200b\u51fa\u6765\u200b\uff0c\u200b\u63d0\u793a\u200b\u6709\u200b\u524d\u7f00\u200b\u548c\u200b\uff0c\u200b\u4e4b\u540e\u200b\u66b4\u529b\u200b\u627e\u200b\u7684\u200b</p> <pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt; &amp;nums, int k) {\n\n        vector&lt;int&gt; prefix(nums.size() , 0);\n        prefix[0] = nums[0];\n        for (int i = 1; i &lt; prefix.size(); i++) {\n            prefix[i] = prefix[i - 1] + nums[i];\n        }\n\n       int anw=0;\n        for(int i=0;i&lt;prefix.size();i++){\n            if(prefix[i]==k) anw++;\n            for(int r=i+1;r&lt;prefix.size();r++){\n                if(prefix[r]-prefix[i]==k) anw++;\n            }\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u770b\u200b\u4e86\u200b\u9898\u89e3\u200b\uff0c\u200b\u524d\u7f00\u200b\u548c\u200b\u52a0\u200b\u54c8\u5e0c\u200b\u8868\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u76f8\u5f53\u4e8e\u200b\u627e\u200b <code>prefix[j]-prefix[i]=k, j&gt;i</code> \u200b\u8fdb\u884c\u200b\u79fb\u9879\u200b\u540e\u200b <code>prefix[j]-k=prefix[i], j&gt;i</code> \u200b\u53ef\u4ee5\u200b\u770b\u6210\u200b\u4e24\u6570\u200b\u4e4b\u200b\u548c\u200b\u90a3\u9053\u9898\u200b\uff0c\u200b\u975e\u5e38\u200b\u7684\u200b\u5de7\u5999\u200b</p> <p>\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200b <code>prefix[j] = k</code> \u200b\u7684\u200b\u60c5\u51b5\u200b <code>eg: [1, 0] k = 1</code>\uff0c\u200b\u6709\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b</p> <ol> <li>\u200b\u4e0a\u6765\u200b\u5c31\u200b\u8bb0\u5f55\u200b <code>mp[0] = 1</code></li> <li>\u200b\u5faa\u73af\u200b\u5185\u7279\u200b\u5224\u200b</li> </ol> \u200b\u672a\u200b\u4f18\u5316\u200b\u4f18\u5316\u200b1\u200b\u4f18\u5316\u200b2 <pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt; &amp;nums, int k) {\n\n        vector&lt;int&gt; prefix(nums.size(), 0);\n        prefix[0] = nums[0];\n        for (int i = 1; i &lt; prefix.size(); i++) {\n            prefix[i] = prefix[i - 1] + nums[i];\n        }\n        unordered_map&lt;int, int&gt; mp;\n        mp[0] = 1;\n        int anw = 0;\n        for (int i = 0; i &lt; prefix.size(); i++) {\n            if (mp.find(prefix[i] - k) != mp.end())\n                anw += mp[prefix[i] - k];\n            mp[prefix[i]]++;\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt; &amp;nums, int k) {\n        int anw=0,sum=0;\n        unordered_map&lt;int,int&gt;mp;\n        mp[0]=1;\n        for(int num:nums){\n            sum+=num;\n            if(mp.find(sum-k)!=mp.end())\n                anw+=mp[sum-k];\n            mp[sum]++;\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt; &amp;nums, int k) {\n        int anw=0,sum=0;\n        unordered_map&lt;int,int&gt;mp;\n    //  mp[0]=1;  // \u200b\u4e0d\u200b\u8fdb\u884c\u200b mp[0]=1 \u200b\u5c31\u200b\u7279\u5224\u200b\n        for(int num:nums){\n            sum+=num;\n            if(sum==k) anw++;\n            if(mp.find(sum-k)!=mp.end()) // \u200b\u8fd9\u200b\u884c\u200b\u6ca1\u6709\u200b\u4e5f\u200b\u884c\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6ca1\u6709\u200b\u7684\u200b\u9879\u200b\u7ed3\u679c\u200b\u4e3a\u200b0\n                anw+=mp[sum-k];\n            mp[sum]++;\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#739","title":"739 \u200b\u6bcf\u65e5\u200b\u6e29\u5ea6","text":"<p>2024-01-03 \u200b\u770b\u5230\u200b\u516c\u4f17\u200b\u53f7\u53d1\u200b\u7684\u200b\uff0c\u200b\u5f53\u65f6\u200b\u6709\u4e2a\u200b\u6726\u80e7\u200b\u7684\u200b\u601d\u8def\u200b\uff0c\u200b\u60f3\u5230\u200b\u7528\u200b\u5355\u8c03\u200b\u6808\u200b\uff0c\u200b\u7136\u540e\u200b\u53d1\u73b0\u200b\u529b\u6263\u200b\u66fe\u7ecf\u200b\u4ea4\u200b\u8fc7\u200b\u8fd9\u4e2a\u200b\u9898\u200b\uff0c\u200b\u590d\u4e60\u200b\u4e00\u4e0b\u200b</p> <p>\u200b\u5f00\u59cb\u200b\u662f\u200b\u8fd9\u4e48\u200b\u60f3\u200b\u7684\u200b\uff0c\u200b\u7528\u200b <code>[1, 5, 4, 2, 7]</code> \u200b\u8bd5\u200b\u4e86\u200b\u4e00\u4e0b\u200b\uff0c\u200b\u7b54\u6848\u200b\u662f\u200b <code>[1, 3, 2, 1, 0]</code> \uff0c\u200b\u4ece\u540e\u200b\u5f80\u524d\u200b\u6765\u200b\uff0c\uff08\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u7b54\u6848\u200b\u4e00\u5b9a\u200b\u662f\u200b 0\uff09\uff0c7 \u200b\u5148\u538b\u6808\u200b\uff0c2 \u200b\u6bd4\u200b 7 \u200b\u5c0f\u200b\uff0c\u200b\u7b54\u6848\u200b\u662f\u200b 1\uff0c4 \u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6c14\u6e29\u200b\u5e94\u8be5\u200b\u662f\u200b 7\uff0c\u200b\u4f46\u662f\u200b\u6808\u91cc\u200b\u73b0\u5728\u200b\u6709\u4e2a\u200b 2 \uff0c\u200b\u4e0d\u662f\u200b\u6211\u4eec\u200b\u60f3\u8981\u200b\u7684\u200b\u5c31\u200b\u5f39\u51fa\u200b\uff0c\u200b\u6240\u4ee5\u200b\u603b\u7ed3\u200b\u51fa\u200b\uff0c\u200b\u5f53\u524d\u200b\u6307\u5411\u200b\u5143\u7d20\u200b\u6bd4\u6808\u200b\u9876\u200b\u5c0f\u200b\u5c31\u200b\u5165\u6808\u200b\uff0c\u200b\u6bd4\u6808\u200b\u9876\u200b\u5927\u200b\u5c31\u200b\u4e0d\u65ad\u200b\u5f39\u6808\u200b\uff0c\u200b\u5982\u679c\u200b\u7b49\u4e8e\u200b\u6808\u9876\u200b\u5462\u200b\uff0c\u200b\u4e3e\u4e2a\u200b\u4f8b\u5b50\u200b\u5c31\u200b\u597d\u200b\u4e86\u200b <code>[2, 2, 7]</code>\uff0c\u200b\u5f88\u200b\u5bb9\u6613\u200b\u5c31\u200b\u5f97\u51fa\u200b\u5e94\u8be5\u200b\u5f39\u6808\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u627e\u200b\u7684\u200b\u662f\u200b\u6bd4\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\u5927\u200b\u7684\u200b\u6c14\u6e29\u200b\u3002</p> \u200b\u5012\u5e8f\u200b <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt; &amp;temperatures) {\n        stack&lt;int&gt; st;\n        int n = temperatures.size();\n        vector&lt;int&gt; anw(n);\n\n        for (int i = n - 1; i &gt;= 0; i--) {\n            while (!st.empty() &amp;&amp; temperatures[i] &gt;= temperatures[st.top()]) {\n                st.pop();\n            }\n            if (!st.empty())\n                anw[i] = st.top() - i;\n            else anw[i] = 0;\n\n            st.push(i);\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u7136\u540e\u200b\u770b\u200b\u4e86\u200b\u4e00\u4e0b\u200b\u7b54\u6848\u200b\uff0c\u200b\u4ed6\u200b\u662f\u200b\u6b63\u5e8f\u200b\u5904\u7406\u200b\u7684\u200b\uff0c\u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\u6bd4\u6808\u200b\u9876\u200b\u5927\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5e94\u8be5\u200b\u7528\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\u66f4\u65b0\u200b\u4e4b\u524d\u200b\u60f3\u8981\u200b\u7684\u200b\u7b54\u6848\u200b\uff0c\uff08\u200b\u5c31\u662f\u200b\u627e\u200b\u4e86\u200b\u9ad8\u200b\u7684\u200b\u6c14\u6e29\u200b\uff09\uff0c\u200b\u53cd\u4e4b\u200b\u76f4\u63a5\u200b\u5165\u6808\u200b</p> \u200b\u6b63\u5e8f\u200b <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt; &amp;temperatures) {\n        stack&lt;int&gt; st;\n        int n = temperatures.size();\n        vector&lt;int&gt; anw(n);\n\n        for (int i = 0; i &lt; n; i++) {\n            while (!st.empty() &amp;&amp; temperatures[i] &gt; temperatures[st.top()]) {\n                int top = st.top();\n                anw[top] = i - top;\n                st.pop();\n            }\n            st.push(i);\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u4e8b\u540e\u200b\u60f3\u4e00\u60f3\u200b\uff0c\u200b\u5176\u5b9e\u200b\u90fd\u200b\u5dee\u4e0d\u591a\u200b\uff0c\u200b\u751a\u81f3\u200b\u6b63\u5e8f\u200b\u66f4\u200b\u76f4\u89c2\u200b\uff0c\u200b\u7b26\u5408\u200b\u9898\u200b\u7684\u200b\u64cd\u4f5c\u200b\u8bf4\u6cd5\u200b\u3002\u200b\u6b63\u5e8f\u200b\u5904\u7406\u200b\u76f8\u5f53\u4e8e\u200b\u662f\u200b\u5b58\u200b\u5df2\u77e5\u200b\u7684\u200b\u4f4e\u6e29\u200b\uff0c\u200b\u7528\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u6c14\u6e29\u200b\u66f4\u65b0\u200b\u8fc7\u53bb\u200b\u3002\u200b\u9006\u5e8f\u200b\u76f8\u5f53\u4e8e\u200b\u662f\u200b\u5b58\u200b\u5df2\u77e5\u200b\u7684\u200b\u9ad8\u6e29\u200b\uff0c\u200b\u7528\u200b\u4f4e\u6e29\u200b\u53bb\u200b\u627e\u200b\u9ad8\u6e29\u200b\u3002</p> <p>\u200b\u6d1b\u8c37\u200b\u539f\u9898\u200b\u7b2c\u4e00\u4e2a\u200b\u9898\u89e3\u200b\u8fd9\u4e48\u200b\u770b\u200b\u66f4\u597d\u200b\u7406\u89e3\u200b</p> <pre><code>-------------`\n     2  4  7 |\n-------------          \n</code></pre> <p>\u200b\u505a\u200b\u51fa\u6765\u200b\u4e86\u200b\uff0cfeel good\ud83e\udd70</p>"},{"location":"backend/leetcode/#784","title":"784 \u200b\u5b57\u6bcd\u200b\u5927\u5c0f\u5199\u200b\u5168\u200b\u6392\u5217","text":"<p>\u200b\u4e0d\u80fd\u200b\u7528\u200b\u6bcf\u6b21\u200b\u90fd\u200b\u6536\u96c6\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6ca1\u6cd5\u200b\u533a\u5206\u200b <code>ab pos=1</code> \u200b\u548c\u200b <code>ab pos=2</code> \uff0c\u200b\u5bfc\u81f4\u200b\u91cd\u590d\u200b\u6536\u96c6\u200b</p> <p>\u200b\u5e94\u8be5\u200b\u7528\u200b\u4e0b\u6807\u200b\u8d85\u754c\u200b\u505a\u200b\u6536\u96c6\u200b\u6761\u4ef6\u200b</p> <p>\u200b\u4f4d\u200b\u56fe\u200b\u505a\u6cd5\u200b\uff0c\u200b\u7edf\u8ba1\u200b\u5b57\u6bcd\u200b\u4e2a\u6570\u200b\uff0c\u200b\u603b\u5171\u200b\u6709\u200b <code>2^chars</code> \u200b\u53ef\u80fd\u200b\uff0c\u200b\u9047\u5230\u200b\u5b57\u7b26\u200b\uff0c\u200b\u770b\u200b\u662f\u200b\u7eaf\u200b\u5b57\u4e32\u200b\u7684\u200b\u7b2c\u200b k \u200b\u4f4d\u200b\uff0c\u200b\u5982\u679c\u200b\u5728\u200b \u200b\u7b2c\u200b poss \u200b\u4e2a\u200b\u53ef\u80fd\u200b\u4e2d\u200b\u7b2c\u200b k \u200b\u4f4d\u4e3a\u200b 1\uff0c\u200b\u653e\u5927\u200b\u5199\u200b\uff1b\u200b\u53cd\u4e4b\u200b\u653e\u200b\u5c0f\u5199\u200b</p> wrong <pre><code>class Solution {\npublic:\n    vector&lt;string&gt; anw;\n    vector&lt;string&gt; letterCasePermutation(string s) {\n        dfs(0, s);\n        return anw;\n    }\n    void dfs(int pos, string s) {\n        if (pos == s.size())\n            return;\n        if (isdigit(s[pos])) {\n            dfs(pos + 1, s);\n            return;\n        }\n        else if (isupper(s[pos])) {\n            anw.emplace_back(s);\n            dfs(pos + 1, s);\n            s[pos] = tolower(s[pos]);\n            anw.emplace_back(s);\n            dfs(pos + 1, s);\n        }\n        else {\n            anw.emplace_back(s);\n            dfs(pos + 1, s);\n            s[pos] = toupper(s[pos]);\n            anw.emplace_back(s);\n            dfs(pos + 1, s);\n        }\n    }\n};\n</code></pre> \u200b\u6b63\u5e38\u200b\u601d\u8def\u200b\u6539\u8fdb\u200b\u4f4d\u200b\u56fe\u200b <pre><code>class Solution {\n    vector&lt;string&gt; ret;\n\n    // \u200b\u53d6\u4e0d\u53d6\u200b\u5f15\u7528\u200b\u90fd\u200b\u5bf9\u200b\n    void dfs(string &amp; s, int pos) {\n        while (pos &lt; s.size() &amp;&amp; isdigit(s[pos]))\n            ++pos;\n        if (pos &gt;= s.size())\n            return ret.push_back(s);\n\n        if (islower(s[pos])) {\n            dfs(s, pos + 1);\n\n            s[pos] = toupper(s[pos]);\n            dfs(s, pos + 1);\n        }\n        else {\n            dfs(s, pos + 1);\n\n            s[pos] = tolower(s[pos]);\n            dfs(s, pos + 1);\n        }\n    }\n\npublic:\n    vector&lt;string&gt; letterCasePermutation(string s) {\n        dfs(s, 0);\n        return ret;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    void dfs(string &amp;s, int pos, vector&lt;string&gt; &amp;res) {\n        while (pos &lt; s.size() &amp;&amp; isdigit(s[pos])) {\n            pos++;\n        }\n        if (pos == s.size()) {\n            res.emplace_back(s);\n            return;\n        }\n        dfs(s, pos + 1, res);\n    // 65^32=97, 97^32=65 \n    // a-&gt;A A-&gt;a\n        s[pos] ^= 32;\n        dfs(s, pos + 1, res);\n    }\n\n    vector&lt;string&gt; letterCasePermutation(string s) {\n        vector&lt;string&gt; ans;\n        dfs(s, 0, ans);\n        return ans;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;string&gt; letterCasePermutation(string s) {\n        vector&lt;string&gt; anw;\n        int char_cnt = 0;\n        for (char x : s)\n            if (isalpha(x))\n                char_cnt++;\n\n        int total_possible = 1 &lt;&lt; char_cnt;\n\n        for (int poss = 0; poss &lt; total_possible; poss++) {\n            string tem;\n            for (int si = 0, k_in_chars = 0; si &lt; s.size(); si++) {\n                if (isdigit(s[si]))\n                    tem += s[si];\n                else {\n                    if (poss &amp; (1 &lt;&lt; k_in_chars++))\n                        tem += toupper(s[si]);\n                    else\n                        tem += tolower(s[si]);\n                }\n            }\n            anw.emplace_back(tem);\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#844","title":"844 \u200b\u6bd4\u8f83\u200b\u542b\u200b\u9000\u683c\u200b\u7684\u200b\u5b57\u7b26\u4e32","text":"<p>\u200b\u6700\u200b\u76f4\u63a5\u200b\u7684\u200b\u60f3\u6cd5\u200b\uff1a\u200b\u6a21\u62df\u200b</p> <pre><code>class Solution {\n\n    public boolean backspaceCompare(String s, String t) {\n        return getTrim(s).equals(getTrim(t));\n    }\n\n    private static String getTrim(String s) {\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (s.charAt(i) != '#') {\n                stringBuilder.append(s.charAt(i));\n            } else {\n                if (!stringBuilder.isEmpty())\n                    stringBuilder.deleteCharAt(stringBuilder.length() - 1);\n            }\n        }\n        return stringBuilder.toString();\n    }\n}\n</code></pre> <p>\u200b\u8054\u52a8\u200b \u200b\u79fb\u52a8\u200b0 \u200b\u90a3\u4e2a\u200b\u9898\u200b\uff0c\u200b\u628a\u200b\u5173\u952e\u200b\u7684\u200b\u5185\u5bb9\u200b\u63d0\u51fa\u200b\u6765\u200b</p> <pre><code>class Solution {\n    public boolean backspaceCompare(String s, String t) {\n        return changeString(s).equals(changeString(t));\n    }\n\n    public static String changeString(String str) {\n        char[] x = str.toCharArray();\n        int slow = 0;\n        for (int fast = 0; fast &lt; x.length; fast++) {\n            if (x[fast] != '#')\n                x[slow++] = x[fast];\n            else {\n                if (slow &gt; 0)\n                    slow--;\n            }\n        }\n\n        return String.valueOf(x, 0, slow);\n\n    }\n}\n</code></pre> <p>\u200b\u4ece\u540e\u200b\u5f80\u524d\u200b\u770b\u200b\u3002\u200b\u5220\u9664\u200b\u5bf9\u200b\u5b57\u7b26\u4e32\u200b\u540e\u9762\u200b\u7684\u200b\u5b57\u7b26\u200b\u5c31\u200b\u4e0d\u8d77\u4f5c\u7528\u200b\u4e86\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u627e\u5230\u200b\u8981\u200b\u6bd4\u8f83\u200b\u7684\u200b\u5b57\u7b26\u200b</p> <p>\u200b\u5173\u952e\u200b\u662f\u200b\u6216\u200b\u6761\u4ef6\u200b\uff1a\u200b\u56e0\u4e3a\u200b\u53ef\u80fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u8dd1\u200b\u5b8c\u200b\u4e86\u200b\uff0c\u200b\u4f46\u662f\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u662f\u200b <code>x#</code> \u200b\u8fd9\u79cd\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4e0d\u80fd\u200b\u662f\u200b\u4e0e\u200b\u6761\u4ef6\u200b</p> <pre><code>public class Solution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        solution.test();\n    }\n\n    void test() {\n        String s = \"nzp#o#g\";\n        String t = \"b#nzp#o#g\";\n        // after compare char n ,si = -1 and ti = 1 so use or condition\n        System.out.println(this.backspaceCompare(s, t));\n    }\n\n    public boolean backspaceCompare(String s, String t) {\n\n        int sCnt = 0, tCnt = 0;\n        int si = s.length() - 1, ti = t.length() - 1;\n        while (si &gt;= 0 &amp;&amp; ti &gt;= 0) {\n            while (si &gt;= 0) {\n                if (s.charAt(si) == '#') {\n                    sCnt++;\n                    si--;\n                } else if (sCnt &gt; 0) {\n                    sCnt--;\n                    si--;\n                } else {\n                    break;\n                }\n            }\n            while (ti &gt;= 0) {\n                if (t.charAt(ti) == '#') {\n                    tCnt++;\n                    ti--;\n                } else if (tCnt &gt; 0) {\n                    tCnt--;\n                    ti--;\n                } else {\n                    break;\n                }\n            }\n            if (si &gt;= 0 &amp;&amp; ti &gt;= 0) {\n                if (s.charAt(si) != t.charAt(ti)) {\n                    return false;\n                }\n                si--;\n                ti--;\n            } else {\n                if (si &gt;= 0 || ti &gt;= 0) return false;\n            }\n\n        }\n        System.out.println(\"si: \" + si);\n        System.out.println(\"ti: \" + ti);\n        return true;\n    }\n}\n</code></pre>"},{"location":"backend/leetcode/#890","title":"890 \u200b\u67e5\u627e\u200b\u548c\u200b\u66ff\u6362\u200b\u6a21\u5f0f","text":"<p>\u200b\u9898\u200b\u975e\u5e38\u200b\u597d\u200b\u5730\u200b\u7ed9\u51fa\u200b\u63d0\u793a\u200b\uff1a\u200b\u662f\u200b\u53cc\u5c04\u200b\u5173\u7cfb\u200b\uff0c\u200b\u4e0d\u80fd\u200b <code>f(a) = 1 f(a) = 2</code> \u200b\u540c\u65f6\u200b\u5b58\u5728\u200b\uff0c\u200b\u53ea\u80fd\u200b\u662f\u200b<code>f(a) = 1 f(1) = a</code>\u200b\u540c\u65f6\u200b\u6210\u7acb\u200b</p> <p>\u200b\u53ef\u4ee5\u200b\u5217\u51fa\u200b\u8868\u683c\u200b</p> a-&gt;1 1-&gt;a null \u200b\u4e0d\u200b\u5b58\u5728\u200b\u54c8\u5e0c\u200b\u6620\u5c04\u200b null null add null yes err null no err yes null err no null err yes no err no yes err no no err yes yes continue <pre><code>import java.util.*;\n\nclass Solution {\n    public List&lt;String&gt; findAndReplacePattern(String[] words, String pattern) {\n        int[] word2pattern = new int[26];\n        int[] pattern2word = new int[26];\n        List&lt;String&gt; anw = new ArrayList&lt;String&gt;();\n        for (String word : words) {\n            Arrays.fill(word2pattern, -1);\n            Arrays.fill(pattern2word, -1);\n            boolean ok = true;\n            for (int i = 0; ok &amp;&amp; i &lt; word.length(); i++) {\n                int w = word.charAt(i) - 'a';\n                int p = pattern.charAt(i) - 'a';\n                if (pattern2word[p] == -1 &amp;&amp; word2pattern[w] == -1) {\n                    pattern2word[p] = w;\n                    word2pattern[w] = p;\n                } else if (pattern2word[p] == w &amp;&amp; word2pattern[w] == p) continue;\n                else ok = false;\n            }\n            if (ok) anw.add(word);\n        }\n        return anw;\n    }\n}\n</code></pre> <p>\u200b\u7136\u540e\u200b\u53d1\u73b0\u200b\u8868\u683c\u200b\u4e2d\u95f4\u200b\u53ef\u4ee5\u200b\u5408\u5e76\u200b\u6210\u200b <code>pattern2word[p] != w</code>\uff0c\u200b\u56e0\u4e3a\u200b\u4e0d\u200b\u5b58\u5728\u200b\u7684\u200b -1 \u200b\u521a\u597d\u200b\u4e5f\u200b\u80fd\u200b\u7528\u200b\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u7a7a\u200b\u5f02\u5e38\u200b</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public List&lt;String&gt; findAndReplacePattern(String[] words, String pattern) {\n        int[] word2pattern = new int[26];\n        int[] pattern2word = new int[26];\n        List&lt;String&gt; anw = new ArrayList&lt;String&gt;();\n        for (String word : words) {\n            Arrays.fill(word2pattern, -1);\n            Arrays.fill(pattern2word, -1);\n            boolean ok = true;\n            for (int i = 0; ok &amp;&amp; i &lt; word.length(); i++) {\n                int w = word.charAt(i) - 'a';\n                int p = pattern.charAt(i) - 'a';\n                if (pattern2word[p] == -1 &amp;&amp; word2pattern[w] == -1) {\n                    pattern2word[p] = w;\n                    word2pattern[w] = p;\n                } else if (pattern2word[p] != w)\n                    ok = false;\n            }\n            if (ok) anw.add(word);\n        }\n        return anw;\n    }\n}\n</code></pre> <p>\u200b\u7b2c\u4e8c\u79cd\u200b\u65b9\u6cd5\u200b\u5c31\u662f\u200b\u5b98\u65b9\u200b\u505a\u200b\u4e24\u6b21\u200b\u68c0\u67e5\u200b</p> <pre><code>class Solution {\n    public List&lt;String&gt; findAndReplacePattern(String[] words, String pattern) {\n        List&lt;String&gt; ans = new ArrayList&lt;String&gt;();\n        for (String word : words) {\n            if (match(word, pattern) &amp;&amp; match(pattern, word)) {\n                ans.add(word);\n            }\n        }\n        return ans;\n    }\n\n    public boolean match(String word, String pattern) {\n        Map&lt;Character, Character&gt; map = new HashMap&lt;Character, Character&gt;();\n        for (int i = 0; i &lt; word.length(); ++i) {\n            char x = word.charAt(i), y = pattern.charAt(i);\n            if (!map.containsKey(x)) {\n                map.put(x, y);\n            } else if (map.get(x) != y) { \n                return false;\n            }\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"backend/leetcode/#904","title":"904 \u200b\u6c34\u679c\u200b\u6210\u7bee","text":"<p>\u200b\u5c31\u662f\u200b\u627e\u200b\u4e00\u6bb5\u200b\u533a\u95f4\u200b\u5c3d\u53ef\u80fd\u200b\u957f\u200b\uff0c\u200b\u533a\u95f4\u200b\u5185\u200b\u53ea\u6709\u200b\u4e24\u79cd\u200b\u5143\u7d20\u200b</p> <p>\u200b\u7528\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u7528\u200b\u53d8\u91cf\u200b\u5b58\u503c\u200b\u53bb\u200b\u5220\u9664\u200b\uff0c\u200b\u539f\u56e0\u200b\u4e0b\u8fb9\u200b java</p> <pre><code>import java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static java.lang.Integer.max;\n\nclass Solution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        int[] nums = {3, 3, 3, 1, 2, 1, 1, 2, 3, 3, 4};\n        System.out.println(solution.totalFruit(nums));\n    }\n\n    private int totalFruit(int[] nums) {\n        int left = 0, right = 0;\n        int anw = 0;\n        HashMap&lt;Integer, Integer&gt; cnt = new HashMap&lt;&gt;();\n        for (; right &lt; nums.length; right++) {\n            cnt.put(nums[right], cnt.getOrDefault(nums[right], 0) + 1);\n            while (cnt.size() &gt; 2) {\n                cnt.put(nums[left], cnt.getOrDefault(nums[left], 0) - 1);\n                if (cnt.get(nums[left]) == 0) cnt.remove(nums[left]);\n                left++;\n            }\n            anw = max(anw, right - left + 1);\n        }\n        return anw;\n    }\n\n    public int totalFruitFailed(int[] nums) {\n        // failed on 1,2,1,1,2 because only remove the first 1, not remove later of 1\n        int left = 0, right = 0;\n        HashSet&lt;Integer&gt; types = new HashSet&lt;&gt;();\n        int maxLen = 0;\n        for (; right &lt; nums.length; right++) {\n            types.add(nums[right]);\n            while (types.size() &gt; 2) {\n                maxLen = max(maxLen, right - left);\n                int removeVal = nums[left];\n                types.remove(nums[left]);\n                while (nums[left] == removeVal &amp;&amp; left &lt; right) left++;\n            }\n        }\n        return maxLen;\n    }\n}\n</code></pre> <pre><code>class Solution {\npublic:\n    int totalFruit(vector&lt;int&gt; &amp;fruits) {\n\n        int anw = 0;\n        unordered_map&lt;int, int&gt; pick;\n\n        for (int left = 0, right = 0; right &lt; fruits.size(); right++) {\n            pick[fruits[right]]++;\n\n            while (pick.size() &gt; 2) {\n                pick[fruits[left]]--;\n                if (pick[fruits[left]] == 0) pick.erase(fruits[left]);\n                left++;\n            }\n\n            anw = max(anw, right - left + 1);\n        }\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u4e0d\u592a\u597d\u200b\u7684\u200b\u60f3\u6cd5\u200b\uff1a\u200b\u6700\u200b\u5f00\u59cb\u200b\u7528\u200b\u4e24\u4e2a\u200b\u6876\u200b\uff0c\u200b\u6709\u200b\u7a7a\u6876\u200b\u5c31\u200b\u653e\u5230\u200b\u91cc\u9762\u200b\uff0c\u200b\u6ca1\u6709\u200b\u7a7a\u6876\u200b\u4e14\u200b\u5f53\u524d\u200b\u503c\u200b\u4e0d\u200b\u5728\u200b\u6876\u200b\u91cc\u200b\uff0c\u200b\u66f4\u65b0\u200b\u4e00\u4e2a\u6876\u200b\uff0c\u200b\u95ee\u9898\u200b\u5728\u4e8e\u200b\u54ea\u4e2a\u200b\uff1a\u200b\u6700\u8fd1\u200b\u4e0a\u200b\u4e00\u6b21\u200b\u8bbf\u95ee\u200b\u7684\u200b\u6c34\u679c\u200b\u79cd\u7c7b\u200b\u7684\u200b\u6876\u200b\u662f\u200b\u4e0d\u80fd\u200b\u66f4\u65b0\u200b\u7684\u200b</p> <p>\u200b\u8fd9\u4e2a\u200b\u4e0d\u597d\u200b\u5728\u4e8e\u200b\u66f4\u65b0\u200b left \u200b\u662f\u200b\u53cd\u590d\u200b\u5f80\u200b\u5de6\u200b\u7684\u200b\uff0c\u200b\u6bd4\u8f83\u6162\u200b</p> <pre><code>class Solution {\npublic:\n    int totalFruit(vector&lt;int&gt; &amp;fruits) {\n\n        int anw = 0;\n        int res = 0;\n        int pick[2] = {-1, -1};\n        for (int left = 0, right = 0; right &lt; fruits.size(); right++) {\n            if (pick[0] == -1) {\n                pick[0] = fruits[right];\n                res++;\n            }\n            else if (pick[1] == -1) {\n                pick[1] = fruits[right];\n                res++;\n            }\n            else if (pick[0] == fruits[right] || pick[1] == fruits[right]) res++;\n            else {\n                anw = max(anw, res);\n                left = right - 1;\n                while (left &gt; 0 &amp;&amp; fruits[left] == fruits[left - 1]) left--;\n                res = right - left + 1;\n                if (pick[0] != fruits[right-1]) pick[0] = fruits[right];\n                else pick[1] = fruits[right];\n            }\n        }\n        anw= max(anw,res);\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#977","title":"977 \u200b\u6709\u5e8f\u200b\u6570\u7ec4\u200b\u5e73\u65b9","text":"<p>\u200b\u76f4\u89c2\u200b\u505a\u6cd5\u200b\uff1a\u200b\u5148\u627e\u200b\u7b2c\u4e00\u4e2a\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b 0 \u200b\u7684\u200b\u6570\u200b\uff0c\u200b\u7136\u540e\u200b\u5f80\u200b\u4e24\u8fb9\u200b\u9009\u200b</p> <p>\u200b\u5de7\u5999\u200b\u505a\u6cd5\u200b\uff1a\u200b\u4e24\u8fb9\u200b\u5f00\u200b\u9009\u200b\uff0c\u200b\u9009\u200b\u8f83\u5927\u200b\u7684\u200b\u653e\u5728\u200b\u7b54\u6848\u200b\u6700\u540e\u200b</p> \u200b\u76f4\u89c2\u200b\u5de7\u5999\u200b <pre><code>import static java.lang.Math.*;\n\nclass Solution {\n    public int[] sortedSquares(int[] nums) {\n\n        int rightPoint = bsearch(nums);\n        int leftPoint = rightPoint - 1;\n        int[] anw = new int[nums.length];\n        for (int i = 0; i &lt; nums.length; i++) {\n            int leftval = Integer.MAX_VALUE;\n            int rightval = Integer.MAX_VALUE;\n            if (leftPoint &gt;= 0) {\n                leftval = nums[leftPoint] * nums[leftPoint];\n            }\n            if (rightPoint &lt; nums.length) {\n                rightval = nums[rightPoint] * nums[rightPoint];\n            }\n        //  System.out.println(leftval + \"--\" + rightval);\n            if (leftval &lt; rightval) {\n                anw[i] = leftval;\n                leftPoint--;\n            } else {\n                anw[i] = rightval;\n                rightPoint++;\n            }\n        }\n        return anw;\n    }\n\n    private int bsearch(int[] nums) {\n        int left = 0, right = nums.length;\n        while (left &lt; right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] &gt;= 0) right = mid;\n            else left = mid + 1;\n        }\n        return left;\n    }\n}\n</code></pre> <pre><code>import static java.lang.Math.*;\n\nclass Solution {\n    public int[] sortedSquares(int[] nums) {\n        int left = 0, right = nums.length - 1;\n        int[] anw = new int[nums.length];\n        for (int i = nums.length - 1; i &gt;= 0; i--) {\n            int leftval = nums[left] * nums[left];\n            int rightval = nums[right] * nums[right];\n            if (leftval &gt; rightval) {\n                anw[i] = leftval;\n                left++;\n            } else {\n                anw[i] = rightval;\n                right--;\n            }\n        }\n        return anw;\n    }\n}\n</code></pre>"},{"location":"backend/leetcode/#1475","title":"1475 \u200b\u5546\u54c1\u200b\u6298\u6263\u200b\u540e\u200b\u6700\u7ec8\u200b\u4ef7\u683c","text":"<p>\u200b\u8fd9\u4e2a\u200b\u9898\u200b\u548c\u200b 739 \u200b\u662f\u200b\u4e00\u4e2a\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5047\u8bbe\u200b <code>[4,8,3,7]</code>\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200b 3 \u200b\u66f4\u65b0\u200b\u524d\u8fb9\u200b\u7684\u200b 4\uff0c8\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u5f53\u524d\u200b\u7684\u200b\u503c\u200b\u6bd4\u200b\u524d\u8fb9\u200b\u7684\u200b\u5c0f\u200b\uff0c\u200b\u5c31\u200b\u51fa\u6808\u200b\u4e4b\u524d\u200b\u5185\u5bb9\u200b\u5e76\u200b\u66f4\u65b0\u200b\u3002</p> <p>\u200b\u5b8c\u5168\u200b\u53ef\u4ee5\u200b\u5148\u200b\u590d\u5236\u200b\u4e00\u4efd\u200b\u4e00\u6a21\u4e00\u6837\u200b\u7684\u200b\uff0c\u200b\u66f4\u65b0\u200b\u7684\u8bdd\u200b\u80fd\u200b\u66f4\u65b0\u200b\u597d\u200b\u4e4b\u524d\u200b\u7684\u200b\u3002\u200b\u4e0d\u80fd\u200b\u66f4\u65b0\u200b\u7684\u200b\u4e5f\u200b\u662f\u200b\u672c\u8eab\u200b\u3002\u200b\u8981\u4e0d\u7136\u200b\u5c31\u662f\u200b\u6700\u540e\u200b\u518d\u200b\u5168\u90e8\u200b\u51fa\u6808\u200b</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; finalPrices(vector&lt;int&gt; &amp;prices) {\n        vector&lt;int&gt; anw=prices; // \u200b\u590d\u5236\u200b\u6784\u9020\u51fd\u6570\u200b\n        stack&lt;int&gt; st;\n        for (int i = 0; i &lt; prices.size(); i++) {\n            while (!st.empty() &amp;&amp; prices[i] &lt;= prices[st.top()]) {\n                int pre_anw_index = st.top();\n                st.pop();\n                anw[pre_anw_index] = prices[pre_anw_index] - prices[i];\n            }\n            st.push(i);\n        }\n\n        return anw;\n    }\n};\n</code></pre> \u200b\u5168\u90e8\u200b\u51fa\u6808\u200b <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; finalPrices(vector&lt;int&gt; &amp;prices) {\n        vector&lt;int&gt; anw(prices.size(), 0);\n        stack&lt;int&gt; st;\n        for (int i = 0; i &lt; prices.size(); i++) {\n            while (!st.empty() &amp;&amp; prices[i] &lt;= prices[st.top()]) {\n                int pre_anw_index = st.top();\n                st.pop();\n                anw[pre_anw_index] = prices[pre_anw_index] - prices[i];\n            }\n            st.push(i);\n        }\n        while (!st.empty()) {\n            int pre_anw_index = st.top();\n            st.pop();\n            anw[pre_anw_index] = prices[pre_anw_index];\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#763","title":"763 \u200b\u5212\u5206\u200b\u5b57\u6bcd\u200b\u533a\u95f4","text":"<p>\u200b\u6700\u200b\u5f00\u59cb\u200b\u6ca1\u4ec0\u4e48\u200b\u60f3\u6cd5\u200b\uff0c\u200b\u7136\u540e\u200b\u4ed4\u7ec6\u200b\u8bfb\u9898\u200b\uff0c\u200b\u53d1\u73b0\u200b\u76f8\u540c\u200b\u5b57\u6bcd\u200b\u90fd\u200b\u5728\u200b\u4e00\u4e2a\u200b\u533a\u95f4\u200b\uff0c\u200b\u7136\u540e\u200b\u8fde\u200b\u4e86\u200b\u4e00\u4e0b\u200b\u540c\u4e00\u4e2a\u200b\u5b57\u6bcd\u200b\u7684\u200b\u6700\u524d\u200b\u548c\u200b\u6700\u540e\u200b\uff0c\u200b\u53d1\u73b0\u200b\u53ef\u4ee5\u200b\u770b\u6210\u200b\u5408\u5e76\u200b\u533a\u95f4\u200b\u90a3\u9053\u9898\u200b</p> <pre><code>class Solution {\npublic:\n\n    unordered_map&lt;char, pair&lt;int, int&gt;&gt; dic;\n\n    bool canMerge(pair&lt;int, int&gt; a, pair&lt;int, int&gt; b) {\n        if (a.first &gt; b.second || a.second &lt; b.first)\n            return false;\n        else return true;\n    }\n\n    vector&lt;int&gt; partitionLabels(string s) {\n        int sz = s.size();\n        for (int i = 0; i &lt; sz; ++i) {\n            if (dic.count(s[i])) {\n                dic[s[i]].first = min(dic[s[i]].first, i);\n                dic[s[i]].second = max(dic[s[i]].second, i);\n            }\n            else {\n                dic[s[i]] = {i, i};\n            }\n        }\n\n        vector&lt;int&gt; anw;\n        pair&lt;int, int&gt; broder = {0, 0};\n\n        for (char x: s) {\n            if (canMerge(dic[x], broder)) {\n                broder.first = min(broder.first, dic[x].first);\n                broder.second = max(broder.second, dic[x].second);\n            }\n            else {\n                anw.push_back(broder.second - broder.first + 1);\n                broder = dic[x];\n            }\n        }\n        // don't forget push the last border\n        anw.push_back(broder.second-broder.first+1);\n        return anw;\n    }\n};\n</code></pre> <p>\u200b\u8fc7\u200b\u4e86\u200b\u4e4b\u540e\u200b\u53d1\u73b0\u200b\u65f6\u95f4\u200b\u6709\u70b9\u200b\u843d\u540e\u200b\uff0c\u200b\u770b\u200b\u9898\u89e3\u200b\uff0c\u200b\u8bf4\u200b\u7684\u200b\u662f\u200b\u5982\u679c\u200b i == \u200b\u5f53\u524d\u200b\u5b57\u6bcd\u200b\u51fa\u73b0\u200b\u7684\u200b\u6700\u8fdc\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u8bf4\u660e\u200b\u627e\u5230\u200b\u4e00\u4e2a\u200b\u533a\u95f4\u200b\uff0c</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; partitionLabels(string s) {\n        unordered_map&lt;char, int&gt; dic;\n        int sz = s.size();\n        for (int i = 0; i &lt; sz; ++i) {\n            dic[s[i]] = max(dic[s[i]], i);\n        }\n\n        int left = 0, right = 0;\n        vector&lt;int&gt; anw;\n        for (int i = 0; i &lt; sz; ++i) {\n            right = max(right, dic[s[i]]);\n            if (i == right) {\n                anw.push_back(right - left + 1);\n                left = i + 1;\n            }\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#1658-x-0","title":"1658 \u200b\u5c06\u200b x \u200b\u51cf\u200b\u5230\u200b 0 \u200b\u7684\u200b\u6700\u5c0f\u200b\u64cd\u4f5c\u6570","text":"<p>\u200b\u53cd\u8f6c\u200b\u95ee\u9898\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200b\u627e\u200b\u4e00\u6bb5\u200b\u957f\u5ea6\u200b\u5c3d\u53ef\u80fd\u200b\u5927\u200b\u7684\u200b\u8fde\u7eed\u200b\u5b50\u200b\u6570\u7ec4\u200b\uff0c<code>\u200b\u5b50\u200b\u6570\u7ec4\u200b\u4e4b\u200b\u548c\u200b\u7b49\u4e8e\u200b\u6574\u4e2a\u200b\u6570\u7ec4\u200b\u548c\u200b - x</code></p> <pre><code>class Solution {\npublic:\n    int minOperations(vector&lt;int&gt; &amp;nums, int x) {\n\n        int anw = nums.size()+1; // \u200b\u9632\u6b62\u200b\u7b54\u6848\u200b\u662f\u200b\u6574\u4e2a\u200b\u6570\u7ec4\u200b\n\n        int total_sum = 0;\n        for (const int &amp;num: nums) total_sum += num;\n        int target = total_sum - x;\n        if(target&lt;0) return -1;\n\n        int window_sum = 0;\n        for (int left = 0, right = 0; right &lt; nums.size(); right++) {\n            window_sum += nums[right];\n\n            if (window_sum &lt; target) continue;\n            while (window_sum &gt; target) {\n                window_sum -= nums[left];\n                left++;\n            }\n            if (window_sum == target) {\n                anw = min(anw, int(nums.size() - (right - left + 1)));\n            }\n        }\n        if (anw == nums.size()+1) return -1;\n        else return anw;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#1953","title":"1953 \u200b\u5de5\u4f5c\u200b\u6700\u5927\u200b\u5468\u6570","text":"<p>\u200b\u597d\u6bd4\u200b\u63d2\u7a7a\u200b\uff0c\u200b\u6700\u5927\u503c\u200b max_element,\u200b\u5269\u4e0b\u200b\u7684\u200b\u4e3a\u200b rest\u3002</p> <ul> <li>\u200b\u5982\u679c\u200b <code>rest &lt;= max_element - 1</code> \u200b\u5408\u6cd5\u200b\u7684\u200b\u6709\u200b <code>2*rest+1</code></li> <li>\u200b\u5982\u679c\u200b <code>rest &gt; max_element - 1</code> \u200b\u8bf4\u660e\u200b\u90fd\u200b\u80fd\u200b\u5b8c\u6210\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5047\u5982\u200b\u5148\u200b\u4ece\u200b\u5927\u5230\u200b\u5c0f\u200b\u6392\u5e8f\u200b\uff0c\u200b\u4ece\u524d\u200b\u5230\u200b\u540e\u200b\u63d2\u7a7a\u200b\u90fd\u200b\u80fd\u200b\u63d2\u8fdb\u53bb\u200b\u3002<code>eg: [5, 4, 3]</code></li> </ul> <pre><code>class Solution {\npublic:\n    long long numberOfWeeks(vector&lt;int&gt; &amp;milestones) {\n        long long max_ele= *std::max_element(milestones.begin(), milestones.end());\n        long long rest=0;\n        for(int x:milestones) rest+=x;\n        rest-=max_ele;\n        if(rest&lt;=max_ele-1) return 2 * rest + 1;\n        else return max_ele + rest;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#2335","title":"2335 \u200b\u88c5\u6ee1\u200b\u676f\u5b50","text":"<p>\u200b\u6b63\u786e\u200b\u65b9\u6cd5\u200b\u662f\u200b\u6bcf\u6b21\u200b\u53d6\u200b\u5269\u4f59\u200b\u6c34\u200b\u6700\u200b\u591a\u200b\u7684\u200b\u4e24\u4e2a\u200b\uff0c\u200b\u76f4\u5230\u200b\u53ea\u200b\u5269\u200b\u4e00\u676f\u200b\u6c34\u200b</p> <pre><code>class Solution {\npublic:\n    int fillCups(vector&lt;int&gt;&amp; amount) {\n        sort(amount.begin(),amount.end());\n        if(amount[1]==0) return amount[2];\n        amount[1]--;amount[2]--;\n        return 1+fillCups(amount);\n    }\n};\n</code></pre> <p>\u200b\u76f4\u63a5\u200b\u7b97\u200b\uff1a\u200b\u4ece\u5c0f\u5230\u5927\u200b\u6392\u5e8f\u200b\u4e3a\u200b a, b, c</p> <ul> <li><code>c &gt;= a + b</code> \u200b\u7ed3\u679c\u200b\u4e3a\u200b c</li> <li><code>c &lt; a + b</code> \uff0c\u200b\u591a\u200b\u51fa\u6765\u200b\u7684\u200b\u4e3a\u200b deta<ul> <li>\u200b\u5982\u679c\u200b deta \u200b\u4e3a\u200b\u5076\u6570\u200b\uff0c\u200b\u7ecf\u8fc7\u200b <code>deta/2</code> \u200b\u6b21\u540e\u200b\uff0c <code>a'+b' = c</code>\uff0c\u200b\u7ed3\u679c\u200b\u4e3a\u200b <code>deta/2 + c</code>\u3002</li> <li>\u200b\u5982\u679c\u200b deta \u200b\u4e3a\u200b\u5947\u6570\u200b\uff0c\u200b\u64cd\u4f5c\u200b <code>(deta-1)/2</code> \u200b\u6b21\u540e\u200b\uff0c<code>a'+ b'= c + 1</code> \u200b\u7ed3\u679c\u200b\u4e3a\u200b <code>(deta-1)/2 + c + 1</code></li> </ul> </li> </ul> <pre><code>class Solution {\npublic:\n    int fillCups(vector&lt;int&gt;&amp; amount) {\n        sort(amount.begin(), amount.end());\n        int a = amount[0], b = amount[1], c = amount[2];\n        if (c &gt;= a + b)\n            return c;\n        else\n            return (a + b - c + 1) / 2 + c;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#_5","title":"\u6700\u957f\u200b\u8fde\u7eed\u200b\u516c\u5171\u200b\u5b50\u200b\u5e8f\u5217","text":"<p>\u200b\u9898\u76ee\u200b</p> <p>\u200b\u6210\u529f\u200b\u5b57\u6bcd\u200b\u4e2a\u6570\u200b\u548c\u200b\u5c1d\u8bd5\u200b\u957f\u5ea6\u200b\u4e0d\u80fd\u200b\u53ea\u7528\u200b\u4e00\u4e2a\u200b\u53d8\u91cf\u200b\u8868\u793a\u200b\u4e24\u4ef6\u4e8b\u200b\uff0c\u200b\u4e0d\u7136\u200b\u7528\u200b substr \u200b\u5c31\u200b\u5f88\u200b\u96be\u53d7\u200b\uff0c\u200b\u6bd4\u5982\u200b a.sub(ia,try)=b.sub(ib,try) \u200b\u5982\u679c\u200b try++\uff0c\u200b\u53d6\u200b\u7b54\u6848\u200b\u957f\u5ea6\u200b\u5c31\u200b\u5f97\u200b try-1\u3002\u200b\u4f46\u662f\u200b\u8fd9\u6837\u200b\u6709\u65f6\u5019\u200b\u662f\u200b\u9519\u200b\u7684\u200b\u3002</p> slove <pre><code>    #include &lt;string&gt;\n    #include &lt;iostream&gt;\n    using namespace std;\n\n    int main() {\n        string a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        string anw;\n\n        // solution 1\n        // int minlen = min(a.size(), b.size());\n        // for (int trylen = 0; trylen &lt;= minlen; trylen++)\n        //     for (int ia = 0; ia + trylen &lt;= a.size(); ia++)\n        //         for (int ib = 0; ib + trylen &lt; b.size(); ib++) {\n        //             if (a.substr(ia, trylen) == b.substr(ib, trylen)) {\n        //                 if (trylen &gt;= anw.size())\n        //                     anw = a.substr(ia, trylen);\n        //             }\n        //         }\n\n        // solution 2 better\n        for (int ia = 0; ia &lt; a.size(); ia++) {\n            for (int ib = 0; ib &lt; b.size(); ib++) {\n                int succ = 0;\n                for (int trylen = 0; ia + trylen &lt; a.size() &amp;&amp; ib + trylen &lt; b.size(); trylen++) {\n                    if (a[ia + trylen] == b[ib + trylen]) {\n                        succ++;\n                    }\n                    else\n                        break;\n                }\n                if (succ &gt;= anw.size())\n                    anw = a.substr(ia, succ);\n            }\n        }\n        cout &lt;&lt; anw.size() &lt;&lt; '\\n';\n        cout &lt;&lt; anw;\n\n        return 0;\n    }\n</code></pre>"},{"location":"backend/leetcode/#k","title":"\u7b2c\u200bK\u200b\u5927\u200b\u7684\u200b\u6570","text":"<p>\u200b\u94fe\u63a5\u200b</p> <ul> <li>\u200b\u60f3\u8981\u200b\u8fbe\u5230\u200b \\(O(n)\\) \u200b\u65f6\u95f4\u200b\uff0c\u200b\u5c31\u200b\u5f97\u200b\u4ece\u200b\u5feb\u6392\u200b\u53d8\u5f62\u200b\u3002</li> <li>\u200b\u7b2c\u200bK\u200b\u5927\u200b\u7684\u200b\u6570\u200b\u6b63\u597d\u200b\u662f\u200b\u4e0b\u6807\u200b\u4e3a\u200bsize-k</li> <li>\u200b\u4e00\u6b21\u200b\u5feb\u6392\u200b\u76f8\u5f53\u4e8e\u200b\u628a\u200b\u4e00\u4e2a\u200b\u6570\u200b\u653e\u5230\u200b\u5bf9\u5e94\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u90a3\u200b\u5c31\u200b\u627e\u200b\u54ea\u200b\u4e00\u6b21\u200b\u653e\u597d\u200b\u4e86\u200b\u7684\u200b\u4e0b\u6807\u200b\u6b63\u597d\u200b\u662f\u200b\u8981\u6c42\u200b\u7684\u200b <p>\u200b\u6ca1\u200b\u505a\u200b\u51fa\u6765\u200b\u65f6\u200b\u75db\u82e6\u4e07\u5206\u200b\uff0c<sub>\u200b\u6284\u200b\u5b8c\u200b\u4e86\u200b</sub> \u200b\u5b66\u4f1a\u200b\u4e86\u200b\u4e4b\u540e\u200b\u89c9\u5f97\u200b\u5c31\u200b\u5e94\u8be5\u200b\u8fd9\u4e48\u200b\u5199\u200b\ud83d\ude25</p> </li> </ul> Slove <pre><code>class Solution {\npublic:\nint findKthLargest(vector&lt;int&gt; &amp;nums, int k) {\n    return quicksort(nums,0,nums.size()-1,nums.size()-k);\n}\n\nint quicksort(vector&lt;int&gt; &amp;nums, int l, int r, int k) {\n    if (l == r) return nums[k];\n    int i = l - 1, j = r + 1, mid = nums[l + r &gt;&gt; 1];\n    while (i &lt; j) {\n        do i++; while (nums[i] &lt; mid);\n        do j--; while (nums[j] &gt; mid);\n        if (i &lt; j) swap(nums[i], nums[j]);\n    }\n    if (k &lt;= j) return quicksort(nums, l, j, k);\n    else return quicksort(nums, j + 1, r, k);\n}\n};\n</code></pre> <p>\u200b\u4ece\u200b\u8fd9\u4e2a\u200b\u9898\u8c08\u5f00\u200b\uff0c\u200b\u5047\u5982\u200b\u8981\u200b\u627e\u200b\u7b2c\u200bK\u200b\u5c0f\u200b\u7684\u200b\u6570\u200b\u53ef\u4ee5\u200b\u8bf4\u200b\u6bcf\u6b21\u200b\u5feb\u6392\u200b\u7ed3\u675f\u200b\u80fd\u200b\u83b7\u5f97\u200b\u5de6\u8fb9\u200b\u2264a[j]\u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u53f3\u8fb9\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200ba[j+1]\u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u95ee\u9898\u200b\u5728\u200b\u4e8e\u662f\u200b\u600e\u4e48\u200b\u5224\u65ad\u200b\u4e0b\u200b\u4e00\u6b21\u200b\u7684\u200b\u533a\u95f4\u200b\uff08\u200b\u6211\u200b\u4e2a\u4eba\u200b\u89c9\u5f97\u200b\u770b\u6210\u200b\u4e0b\u6807\u200b\u597d\u200b\u7406\u89e3\u200b\uff09</p> <ol> <li>k\u200b\u770b\u6210\u200b\u957f\u5ea6\u200b\uff0c\u200b\u6bd4\u8f83\u200b\u5230\u200blo\u200b\u7684\u200b\u8ddd\u79bb\u200b <pre><code>if (j - lo + 1 &gt;= k)\n    return wqsort(a, lo, j, k);\nelse\n    return wqsort(a, j + 1, hi, k - (j + 1 - lo));\n</code></pre></li> <li>k\u200b\u770b\u6210\u200b\u4e0b\u6807\u200b <pre><code>if (k&lt;=j)\n    return wqsort(a, lo, j, k);\nelse\n    return wqsort(a, j + 1, hi, k);\n</code></pre></li> </ol> \u200b\u4e0b\u6807\u200b\u957f\u5ea6\u200b <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\nconst int N = 100010;\n\nint wqsort(int a[], int lo, int hi, int k) {\n    if (lo &gt;= hi)\n        return a[k];//a[lo] also OK\n\n    int i = lo - 1, j = hi + 1, mid = a[lo + hi &gt;&gt; 1];\n    while (i &lt; j) {\n        do\n            i++;\n        while (a[i] &lt; mid);\n        do\n            j--;\n        while (a[j] &gt; mid);\n        if (i &lt; j)\n            swap(a[i], a[j]);\n    }\n    if (k &lt;= j)\n        return wqsort(a, lo, j, k);\n    else\n        return wqsort(a, j + 1, hi, k);\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int k;\n    cin &gt;&gt; k;\n    int a[N];\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; a[i];\n    cout &lt;&lt; wqsort(a, 0, n - 1, k - 1);//\u200b\u8f6c\u200b\u6210\u200b\u4e0b\u6807\u200b\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\nconst int N = 100010;\n\nint wqsort(int a[], int lo, int hi, int k) {\n    if (lo &gt;= hi)\n        return a[lo];\n\n    int i = lo - 1, j = hi + 1, mid = a[lo + hi &gt;&gt; 1];\n    while (i &lt; j) {\n        do\n            i++;\n        while (a[i] &lt; mid);\n        do\n            j--;\n        while (a[j] &gt; mid);\n        if (i &lt; j)\n            swap(a[i], a[j]);\n    }\n    if (j - lo + 1 &gt;= k)\n        return wqsort(a, lo, j, k);\n    else\n        return wqsort(a, j + 1, hi, k - (j + 1 - lo));\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int k;\n    cin &gt;&gt; k;\n    int a[N];\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; a[i];\n    cout &lt;&lt; wqsort(a, 0, n - 1, k);\n    return 0;\n}\n</code></pre>"},{"location":"backend/leetcode/#k_1","title":"\u4e24\u4e2a\u200b\u6709\u5e8f\u200b\u6570\u7ec4\u200b\u7b2c\u200bK\u200b\u5927\u200b\u5143\u7d20","text":"<p>\u200b\u8fd9\u91cc\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u6392\u5217\u200b\u597d\u540e\u200b\uff0c\u200b\u4e0b\u6807\u200b\u4e3a\u200b<code>k-1</code>\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u4e0d\u662f\u200b\u53bb\u200b\u91cd\u540e\u200b\u7684\u200b\u7b2c\u200bK\u200b\u5927\u200b</p> <ol> <li>\u200b\u6700\u200b\u57fa\u7840\u200b\u7684\u200b\uff1a\u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b\u5408\u5e76\u200b\u5230\u200b\u4e00\u4e2a\u200b\u5927\u200b\u6570\u7ec4\u200b\uff0c\u200b\u6392\u5e8f\u200b\uff0c\u200b\u8fd4\u56de\u200b\u5373\u53ef\u200b</li> <li>\u200b\u6539\u8fdb\u200b\u4e00\u70b9\u200b\uff1a\u200b\u4e0d\u7528\u200b\u5f00\u592a\u591a\u200b\u7684\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u7528\u200b\u4e24\u4e2a\u200b\u6307\u9488\u200b\u5206\u522b\u200b\u6307\u5411\u200b\u8d77\u59cb\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u79fb\u52a8\u200b\u5c31\u200b\u52a0\u4e00\u200b\uff0c\u200b\u4e00\u76f4\u200b\u52a0\u200b\u5230\u200b\u7b49\u4e8e\u200bK</li> </ol> \u200b\u53cc\u200b\u6307\u9488\u200b <pre><code>int kthElement(vector&lt;int&gt; arr1, vector&lt;int&gt; arr2, int array1len, int array2len, int k) {\n    int l1 = 0, l2 = 0;\n    int cnt = 0;\n    int tem = 0;\n    while (l1 &lt; array1len &amp;&amp; l2 &lt; array2len) {\n        if (arr1[l1] &lt; arr2[l2]) {\n            tem = arr1[l1];\n            l1++;\n        }\n        else {\n            tem = arr2[l2];\n            l2++;\n        }\n        cnt++;\n        if (cnt == k) return tem;\n    }\n    while (cnt &lt; k &amp;&amp; l1 &lt; array1len) {\n        tem = arr1[l1++];\n        cnt++;\n    }\n    while (cnt &lt; k &amp;&amp; l2 &lt; array2len) {\n        tem = arr2[l2++];\n        cnt++;\n    }\n    if (cnt == k)return tem;\n    return -1;\n}\n</code></pre> <p>\u200b\u6700\u4f18\u200b\u7248\u200b\uff1a\u200b\u53ef\u4ee5\u200b\u53d1\u73b0\u200b\u8fd9\u4e48\u200b\u4e00\u4e2a\u200b\u89c4\u5f8b\u200b <code>l1 &lt;= r2, l2 &lt;= r1</code></p> <p></p> <p>\u200b\u53ea\u8981\u200b\u627e\u5230\u200b\u7b26\u5408\u200b\u4e0a\u8fb9\u200b\u6761\u4ef6\u200b\u5e76\u4e14\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b\u6b63\u597d\u200b\u4e3a\u200b K \u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c <code>max(l1,l2)</code> \u200b\u5c31\u662f\u200b\u7b54\u6848\u200b</p> <ul> <li>\u200b\u5047\u5b9a\u200b <code>arr1len &lt;= arr2len</code> \uff0c\u200b\u7528\u200b\u4e8c\u5206\u200b\u786e\u5b9a\u200b\u4ece\u200b arr1 \u200b\u53d6\u200b\u51e0\u4e2a\u200b\u5143\u7d20\u200b(arr2 \u200b\u53d6\u200b <code>k- cut1</code> \u200b\u4e2a\u200b)</li> </ul> <p>\u200b\u5047\u5982\u200b <code>arr1len = 5, arr2len = 7</code>, <code>lo</code> \u200b\u662f\u200b arr1 \u200b\u6700\u5c11\u200b\u53d6\u200b\u7684\u200b\u4e2a\u6570\u200b\uff0c <code>hi</code> \u200b\u662f\u200b\u6700\u591a\u53d6\u200b\u7684\u200b\u4e2a\u6570\u200b</p> <pre><code>k = 3, lo = 0, hi = 3\nk = 6, lo = 0, hi = 5\nk = 11, lo = 4, hi = 5\n</code></pre> <p>arr1 \u200b\u53d6\u200b\u51e0\u4e2a\u200b\u5143\u7d20\u200b\u548c\u200b arr2len \u200b\u6709\u5173\u200b\uff0carr1\u200b\u6700\u5c11\u200b\u53d6\u200b <code>max(0, k-arr2len)</code>\uff0c arr1\u200b\u6700\u591a\u53d6\u200b <code>min(k, arr1len)</code> \u200b\u4e2a\u200b</p> <ul> <li>\u200b\u5047\u5982\u200b arr1 \u200b\u53d6\u200b\u4e86\u200b0\u200b\u4e2a\u200b\u5143\u7d20\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u200b\u5224\u65ad\u200b\uff0c <code>l1=INT_MIN</code></li> <li>\u200b\u5047\u5982\u200b arr1 \u200b\u53d6\u200b\u4e86\u200b arr1len \u200b\u4e2a\u200b\u5143\u7d20\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u200b\u5224\u65ad\u200b\uff0c <code>l1=INT_MAX</code></li> </ul> <pre><code>int kthElement(vector&lt;int&gt; &amp;arr1, vector&lt;int&gt; &amp;arr2, int arr1len, int arr2len, int k) {\n    if (arr1len &gt; arr2len) {\n        return kthElement(arr2, arr1, arr2len, arr1len, k);\n    }\n    int lo = max(0, k - arr2len), hi = min(k, arr1len);\n    while (lo &lt;= hi) {\n        int cut1 = lo + hi &gt;&gt; 1;\n        int cut2 = k - cut1;\n        int l1 = cut1 == 0 ? INT_MIN : arr1[cut1 - 1];\n        int l2 = cut2 == 0 ? INT_MIN : arr2[cut2 - 1];\n        int r1 = cut1 == arr1len ? INT_MAX : arr1[cut1];\n        int r2 = cut2 == arr2len ? INT_MAX : arr2[cut2];\n\n        if (l1 &lt;= r2 &amp;&amp; l2 &lt;= r1) {\n            return max(l1, l2);\n        }\n        else if (l1 &gt; r2)\n            hi = cut1 - 1;\n        else lo = cut1 + 1;\n    }\n    return 1;\n}\n</code></pre> <p>\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u7406\u89e3\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u4ee5\u4e0b\u200b\u8d44\u6599\u200b\uff0c\u200b\u89c6\u9891\u200b\u8bb2\u200b\u7684\u200b\u6bd4\u8f83\u6e05\u695a\u200b</p> <ul> <li>\u200b\u5370\u5ea6\u200b\u8001\u54e5\u200b\u7684\u200b\u89c6\u9891\u200b\u8bb2\u89e3\u200b</li> <li>\u200b\u6709\u5173\u200bcut\u200b\u7684\u200b\u8bb2\u89e3\u200b</li> </ul>"},{"location":"backend/leetcode/#2","title":"\u73af\u5f62\u200b\u94fe\u8868\u200b2","text":"<p>\u200b\u9898\u76ee\u200b\u94fe\u63a5\u200b</p> <p>\u200b\u5b8c\u6574\u7248\u200b\u9898\u89e3\u200b</p> <ul> <li>\u200b\u8bbe\u6709\u200ba\u200b\u4e2a\u200b\u8282\u70b9\u200b\uff08\u200b\u4e0d\u542b\u200b\u73af\u200b\u7684\u200b\u8d77\u70b9\u200b\uff09\uff0c\u200b\u73af\u5185\u200b\u6709\u200bb\u200b\u4e2a\u200b\u8282\u70b9\u200b</li> <li>\u200b\u5f53\u200b\u7b2c\u4e00\u6b21\u200b\u76f8\u9047\u200b\u65f6\u200b\uff0c</li> </ul> \\[ \\begin{aligned} fast &amp;=2*low \\\\ fast &amp;=low+n*b \\\\ fast &amp;=2nb \\\\ low  &amp;=nb  \\end{aligned} \\] <ul> <li>\u200b\u6240\u6709\u200b\u4ece\u5934\u5f00\u59cb\u200b\u8d70\u5230\u200b\u73af\u200b\u7684\u200b\u8d77\u70b9\u200b\u90fd\u200b\u662f\u200b \\(a+Nb\u200b\u6b65\u200b\\)</li> <li>\u200b\u6240\u4ee5\u200blow\u200b\u518d\u200b\u8d70\u200ba\u200b\u6b65\u200b\u5c31\u200b\u5230\u200b\u8d77\u70b9\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8ba9\u200b\u5feb\u200b\u6307\u9488\u200b\u91cd\u65b0\u200b\u6307\u5411\u200b\u5934\u200b\uff0c\u200b\u4e00\u6b21\u200b\u4e00\u6b65\u200b\u8d70\u200ba\u200b\u6b65\u200b\uff0c\u200b\u4e24\u8005\u200b\u5c31\u200b\u4f1a\u200b\u91cd\u5408\u200b</li> </ul> Solve <pre><code>class Solution {\npublic:\nListNode *detectCycle(ListNode *head) {\n    ListNode *low = head;\n    ListNode *fast = head;\n    bool ff = false;\n    while (fast != nullptr &amp;&amp; fast-&gt;next != nullptr) {\n        fast = fast-&gt;next-&gt;next;\n        low = low-&gt;next;\n        if (fast == low) {\n            ff = true;\n            break;\n        }\n    }\n    if (ff) {\n       fast=head;\n        while (fast!=low){\n            fast=fast-&gt;next;\n            low=low-&gt;next;\n        }\n        return low;\n    }\n    return nullptr;\n\n}\n};\n</code></pre>"},{"location":"backend/leetcode/#_6","title":"\u6700\u77ed\u200b\u65e0\u5e8f\u200b\u8fde\u7eed\u200b\u5b50\u200b\u6570\u7ec4","text":"<p>\u200b\u53cc\u200b\u6307\u9488\u200b</p> <ul> <li>\u200b\u627e\u51fa\u200b\u5347\u5e8f\u200b\uff0c\u200b\u964d\u5e8f\u200b\u7684\u200b\u533a\u95f4\u200b\uff0c\u200b\u4e2d\u95f4\u200b\u5c31\u662f\u200b\u65e0\u5e8f\u200b\u3002</li> <li>\u200b\u5e0c\u671b\u200b\u4e2d\u95f4\u200b\u7684\u200b\u503c\u200b <code>x&gt;Lmax&amp;&amp;x&lt;Rmin</code> \uff0c\u200b\u53cd\u8fc7\u6765\u8bf4\u200b\uff0c\u200b\u5f53\u200b <code>x&lt;Lmax||x&gt;Rmin</code> \u200b\u5c31\u200b\u5e94\u8be5\u200b\u8c03\u6574\u200b\u5de6\u53f3\u200b\u7aef\u70b9\u200b</li> <li>\u200b\u7ec6\u8282\u200b\u90e8\u5206\u200b</li> <li>\u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u200b\u8c03\u6574\u200b\u5230\u200b\u6570\u7ec4\u200b\u5f00\u59cb\u200b\u548c\u200b\u7ed3\u5c3e\u200b\uff0c\u200b\u7528\u200b1e5+10\u200b\u548c\u200b-1e5-10\u200b\u8fdb\u884c\u200b\u8bbe\u7f6e\u200b</li> <li>\u200b\u4e3a\u4ec0\u4e48\u200b\u65e0\u5e8f\u200b\u533a\u95f4\u200b\u7684\u200b\u6570\u5b57\u200b\u5f00\u59cb\u200b\u4ece\u200bL\u200b\u627e\u200b\uff1f\u200b\u5982\u679c\u200b\u4ece\u200bL+1\u200b\u5f00\u59cb\u200b\uff0c\u200b\u53cd\u4f8b\u200b\u662f\u200b <code>1, 3, 2, 2, 2</code></li> </ul> \u200b\u53cc\u200b\u6307\u9488\u200b <pre><code>class Solution {\npublic:\n    int findUnsortedSubarray(vector&lt;int&gt; &amp;nums) {\n        if (nums.size() == 1) return 0;\n\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r &amp;&amp; nums[l] &lt;= nums[l + 1]) l++;\n        while (l &lt; r &amp;&amp; nums[r] &gt;= nums[r - 1]) r--;\n\n        int lmaxval = nums[l], rminval = nums[r];\n        if (l == r) return 0;\n\n        int i = l + 1;\n        for (int k = l ; k &lt; r; ++k) {\n            if (nums[k] &lt; lmaxval) {\n                while (l &gt;= 0 &amp;&amp; nums[k] &lt; lmaxval) {\n                    l--;\n                    if (l &lt; 0) lmaxval = -1e5 - 10;\n                    else lmaxval = nums[l];\n                }\n\n            }\n            if (nums[k] &gt; rminval) {\n                while (r &lt; nums.size() &amp;&amp; nums[k] &gt; rminval) {\n                    r++;\n                    if (r &gt;= nums.size())\n                        rminval = 1e5 + 10;\n                    else rminval = nums[r];\n                }\n\n            }\n        }\n\n        return r - l - 1;\n    }\n};\n</code></pre> <p>\u200b\u4e00\u6b21\u200b\u904d\u5386\u200b \u200b\u4f20\u9001\u95e8\u200b</p> <p>\u200b\u5148\u200b\u53ea\u200b\u8003\u8651\u200b\u4e2d\u6bb5\u200b\u6570\u7ec4\u200b\uff0c\u200b\u8bbe\u5176\u200b\u5de6\u200b\u8fb9\u754c\u200b\u4e3a\u200bL\uff0c\u200b\u53f3\u200b\u8fb9\u754c\u200b\u4e3a\u200bR\uff1a</p> <p><code>nums[R]</code> \u200b\u4e0d\u200b\u53ef\u80fd\u200b\u662f\u200b <code>[L\uff0cR]</code> \u200b\u4e2d\u200b\u7684\u200b\u6700\u5927\u503c\u200b\uff08\u200b\u5426\u5219\u200b\u5e94\u8be5\u200b\u5c06\u200b <code>nums[R]</code> \u200b\u5e76\u5165\u200b\u53f3\u7aef\u200b\u6570\u7ec4\u200b\uff09</p> <p><code>nums[L]</code> \u200b\u4e0d\u200b\u53ef\u80fd\u200b\u662f\u200b<code>[L,R]</code>\u200b\u4e2d\u200b\u7684\u200b\u6700\u5c0f\u503c\u200b\uff08\u200b\u5426\u5219\u200b\u5e94\u8be5\u200b\u5c06\u200b <code>nums[L]</code> \u200b\u5e76\u5165\u200b\u5de6\u7aef\u200b\u6570\u7ec4\u200b\uff09</p> <p>\u200b\u5f88\u200b\u660e\u663e\u200b:</p> <p><code>[L,R]</code> \u200b\u4e2d\u200b\u7684\u200b\u6700\u5927\u503c\u200b \u200b\u7b49\u4e8e\u200b <code>[0\uff0cR]</code> \u200b\u4e2d\u200b\u7684\u200b\u6700\u5927\u503c\u200b\uff0c\u200b\u8bbe\u5176\u4e3a\u200b max</p> <p><code>[L,R]</code> \u200b\u4e2d\u200b\u7684\u200b\u6700\u5c0f\u503c\u200b \u200b\u7b49\u4e8e\u200b <code>[L\uff0c nums.length-1]</code>\u200b\u4e2d\u200b\u7684\u200b\u6700\u5c0f\u503c\u200b\uff0c\u200b\u8bbe\u5176\u4e3a\u200b min</p> <p>\u200b\u90a3\u4e48\u200b\u6709\u200b\uff1a</p> <p><code>nums[R] &lt; max &lt; nums[R+1] &lt; nums[R+2] &lt; ...</code>  \u200b\u6240\u4ee5\u200b\u8bf4\u200b\uff0c\u200b\u4ece\u5de6\u5f80\u53f3\u200b\u904d\u5386\u200b\uff0c\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5c0f\u4e8e\u200bmax\u200b\u7684\u200b\u4e3a\u200b\u53f3\u200b\u8fb9\u754c\u200b</p> <p><code>nums[L] &gt; min &gt; nums[L-1] &gt; nums[L-2] &gt; ...</code> \u200b\u6240\u4ee5\u200b\u8bf4\u200b\uff0c\u200b\u4ece\u53f3\u200b\u5f80\u200b\u5de6\u200b\u904d\u5386\u200b\uff0c\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5927\u4e8e\u200bmin\u200b\u7684\u200b\u4e3a\u200b\u5de6\u200b\u8fb9\u754c\u200b</p> \u200b\u4e00\u6b21\u200b\u904d\u5386\u200b <pre><code>class Solution {\npublic:\n    int findUnsortedSubarray(vector&lt;int&gt; &amp;nums) {\n\n\n        int min = nums[nums.size() - 1], max = nums[0];\n        int end = -1, begin = 0;\n        //end\u200b\u548c\u200bbegin\u200b\u7684\u200b\u521d\u503c\u200b\u4e0d\u200b\u91cd\u8981\u200b\uff0c\u200b\u8ba9\u200bend-bigin+1=0\u200b\u5373\u53ef\u200b\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            if (nums[i] &lt; max)\n                end = i;\n            else max = nums[i];\n\n            if (nums[nums.size() - 1 - i] &gt; min)\n                begin = nums.size() - 1 - i;\n            else min = nums[nums.size() - 1 - i];\n        }\n        return end - begin + 1;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#_7","title":"\u6700\u957f\u200b\u4e0a\u5347\u200b\u5b50\u200b\u5e8f\u5217","text":"<ol> <li>dp \\(O(n^2)\\) , <code>dp[i]=max(dp[i],dp[j]+1) when a[i]&gt;a[j],</code></li> <li>dp+\u200b\u8d2a\u5fc3\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u627e\u200b <code>x&lt;=anw[i]</code>\u200b\u7684\u200b\u5de6\u200b\u7aef\u70b9\u200b\u66f4\u65b0\u200b</li> <li>\u200b\u8bb0\u5fc6\u200b\u5316\u200b\u641c\u7d22\u200b</li> </ol> dp On2dp+\u200b\u8d2a\u5fc3\u200b <pre><code>#include \"bits/stdc++.h\"\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; a[i];\n    vector&lt;int&gt; dp(n, 1);\n    for (int i = 1; i &lt; n; i++) {\n        for (int j = 0; j &lt; i; j++) {\n            if (a[i] &gt; a[j])\n                dp[i] = max(dp[i], dp[j] + 1);\n        }\n    }\n    cout &lt;&lt; *max_element(dp.begin(), dp.end());\n    return 0;\n}\n</code></pre> <pre><code>#include \"bits/stdc++.h\"\n\nusing namespace std;\n\nvoid check(int x, vector&lt;int&gt; &amp;anw) {\n    int l = 0, r = anw.size() - 1;\n    while (l &lt; r) {\n        int mid = l+r&gt;&gt;1;\n        if (anw[mid] &lt;x)l = mid+1;\n        else r = mid;\n    }\n\n    anw[r] = x;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; a[i];\n    vector&lt;int&gt; anw;\n    anw.push_back(a[0]);\n    for (int i = 1; i &lt; n; i++) {\n        if (anw[anw.size() - 1] &lt; a[i])\n            anw.push_back(a[i]);\n        else check(a[i], anw);\n    }\n    cout &lt;&lt; anw.size();\n    return 0;\n}\n</code></pre>"},{"location":"backend/leetcode/#_8","title":"\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200b\u9006\u5e8f\u200b\u5bf9","text":"<ul> <li>\u200b\u5f52\u5e76\u200b\u6392\u5e8f\u200b\uff0c\u200b\u6ce8\u610f\u200b\u5faa\u73af\u200b\u7684\u200b\u8fb9\u754c\u200b\u662f\u200b <code>l r</code>\u200b\u4e0d\u662f\u200b 0</li> <li>\u200b\u5957\u200b\u6a21\u677f\u200b\u4f1a\u200b\u7a7a\u95f4\u200b\u591a\u4e00\u70b9\u200b\u4f46\u662f\u200b\u76f4\u89c2\u200b\uff0c\u200b\u4f18\u5316\u200b\u4e00\u4e0b\u200b\u76f8\u5f53\u4e8e\u200b\u4e0d\u505c\u200b\u5728\u200b\u6c42\u5b50\u200b\u95ee\u9898\u200b</li> </ul> \u200b\u5f00\u200b\u7a7a\u95f4\u200b\u8f83\u200b\u591a\u200b <pre><code>class Solution {\npublic:\n    int inversePairs(vector&lt;int&gt; &amp;nums) {\n        if(nums.size()==0) return 0;\n        int anw = mergesort(nums, 0, nums.size() - 1);\n        return anw;\n    }\n\n    int mergesort(vector&lt;int&gt; &amp;nums, int l, int r) {\n        if (l == r) return 0;\n        int mid = l + r &gt;&gt; 1;\n        int cnt = 0;\n        cnt += mergesort(nums, l, mid);\n        cnt += mergesort(nums, mid + 1, r);\n\n        int m = mid, n = r, id = r;\n\n        vector&lt;int&gt; anw(nums.size());\n\n        while (m &gt;= l &amp;&amp; n &gt; mid) {\n            if (nums[n] &gt;= nums[m]) anw[id--] = nums[n--];\n            else cnt+=n-mid, anw[id--] = nums[m--];\n        }\n        while (m &gt;= l) anw[id--] = nums[m--];\n        while (n &gt; mid)anw[id--] = nums[n--];\n\n        id = l;\n        while (id &lt;= r)\n            nums[id] = anw[id], id++;\n\n        return cnt;\n    }\n};\n</code></pre> On\u200b\u7a7a\u95f4\u200b <pre><code>class Solution {\npublic:\n    int inversePairs(vector&lt;int&gt; &amp;nums) {\n        if (nums.size() == 0) return 0;\n        vector&lt;int&gt; tem = nums;\n        int anw = mergesort(nums, 0, nums.size() - 1, tem);\n        return anw;\n    }\n\n    int mergesort(vector&lt;int&gt; &amp;nums, int l, int r, vector&lt;int&gt; &amp;tem) {\n        if (l == r) {\n            tem[l] = nums[l];\n            return 0;\n        }\n        int mid = l + r &gt;&gt; 1;\n        int cnt = 0;\n        cnt += mergesort(tem, l, mid, nums);\n        cnt += mergesort(tem, mid + 1, r, nums);\n\n        int m = mid, n = r, id = r;\n        while (m &gt;= l &amp;&amp; n &gt;= mid+1) {\n            if(nums[m]&gt;nums[n]) {\n                tem[id--]=nums[m--];\n                cnt+=n-mid;\n            }\n            else tem[id--]=nums[n--];\n        }\n        while (m &gt;= l) tem[id--] = nums[m--];\n        while (n &gt; mid)tem[id--] = nums[n--];\n\n        return cnt;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#_9","title":"\u7f16\u8f91\u200b\u8ddd\u79bb","text":"<p>\u200b\u9898\u89e3\u200b</p> <p>\u200b\u53ef\u4ee5\u200b\u4f18\u5316\u200b\u6210\u200bO(M)</p> slove <pre><code>class Solution {\npublic:\n    void printmarix(vector&lt;int&gt; source) {\n        for (auto x : source)\n            cout &lt;&lt; x &lt;&lt; ' ';\n        cout &lt;&lt; endl;\n    }\n\n    void printVect(vector&lt;vector&lt;int&gt;&gt; dp) {\n        for (auto x : dp) {\n            for (auto y : x)\n                cout &lt;&lt; y &lt;&lt; ' ';\n            cout &lt;&lt; endl;\n        }\n    }\n\n    int minDistance(string source, string dest) {\n        vector&lt;int&gt; dp(dest.size() + 1, 0);\n\n\n        for (int i = 0; i &lt;= dest.size(); i++)\n            dp[i] = i;\n\n        for (int i = 1; i &lt;= source.size(); i++) {\n            int tem = dp[0];\n            dp[0] = i;\n            for (int j = 1; j &lt;= dest.size(); j++) {\n                int pre_dp_j = dp[j];\n                if (source[i - 1] == dest[j - 1])\n                    dp[j] = tem;\n                else\n                    dp[j] = min(tem, min(dp[j - 1], dp[j])) + 1;\n\n                tem = pre_dp_j;\n            }\n            //  printmarix(dp);\n        }\n        return dp[dest.size()];\n    }\n\n    int minDistance_corr(string source, string dest) {\n        vector&lt;vector&lt;int&gt;&gt; dp(source.size() + 1, vector&lt;int&gt;(dest.size() + 1, 0));\n\n        for (int i = 0; i &lt;= source.size(); i++)\n            dp[i][0] = i;\n        for (int i = 0; i &lt;= dest.size(); i++)\n            dp[0][i] = i;\n\n        for (int i = 1; i &lt;= source.size(); i++)\n            for (int j = 1; j &lt;= dest.size(); j++) {\n                if (source[i - 1] == dest[j - 1])\n                    dp[i][j] = dp[i - 1][j - 1];\n                else\n                    dp[i][j] = min(min(dp[i - 1][j - 1], dp[i - 1][j]), dp[i][j - 1]) + 1;\n            }\n        //  printVect(dp);\n        return dp[source.size()][dest.size()];\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#decimal-dominants","title":"Decimal dominants","text":"<p>Given an array with n keys, design an algorithm to find all values that occur more than  n/10 times. The expected running time of your algorithm should be linear. \u200b\u9898\u89e3\u200b \u200b\u8fd9\u4e2a\u200b\u8ba9\u200b\u6211\u200b\u8054\u60f3\u200b\u5230\u200b\u83ab\u5c14\u200b\u6295\u7968\u200b\u6cd5\u200b\u7684\u200b\u4e00\u4e2a\u200b\u9898\u529b\u200b\u6263\u200b169</p> <p>two sum with link node</p> solve <pre><code>class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* head = new ListNode(0);\n        ListNode* tem = head;\n        int adding = 0;\n        while (l1 || l2) {\n            int x = 0, y = 0;\n            if (l1) x = l1-&gt;val;\n            if (l2) y = l2-&gt;val;\n            int sum = (x + y + adding) % 10;\n            adding = (x + y + adding) / 10;\n            ListNode* ne = new ListNode(sum);\n            tem-&gt;next = ne;\n            tem = tem-&gt;next;\n            if (l1)\n                l1 = l1-&gt;next;\n            if (l2)\n                l2 = l2-&gt;next;\n        }\n        if (adding) {\n            ListNode* ne = new ListNode(adding);\n            tem-&gt;next = ne;\n        }\n        tem = head-&gt;next;\n        delete head;\n        return tem;\n    }\n};\n</code></pre>"},{"location":"backend/leetcode/#75","title":"75 \u200b\u989c\u8272\u200b\u5206\u7c7b","text":"dutchFlag\u200b\u5237\u6cb9\u6f06\u200b <pre><code>class Solution {\npublic:\n    void sortColors(vector&lt;int&gt; &amp;nums) {\n        // num 0 is red, 1 is white, 2 is blue\n        int red = 0, white = 0, blue = nums.size() - 1;\n        while (white &lt;= blue) {\n            if (nums[white] == 0) {\n                swap(nums[white], nums[red]);\n                red++;\n                white++; // white red \u200b\u90fd\u200b\u6307\u5411\u200b0\uff0c\u200b\u4e24\u8005\u200b\u4e92\u6362\u200b\u540e\u200b\u90fd\u200b\u524d\u8fdb\u200b\n            }\n            else if (nums[white] == 2) {\n                swap(nums[white], nums[blue]);\n                blue--;\n            }\n            else white++;\n        }\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\nvoid sortColors(vector&lt;int&gt; &amp;nums) {\n    int l0 = 0, l1 = 0;\n    for (int i = 0; i &lt; nums.size(); i++) {\n        int value = nums[i];\n        nums[i] = 2;\n        if (value &lt;= 1) nums[l1++] = 1;\n        if (value == 0) nums[l0++] = 0;\n    }\n}\n};\n</code></pre> <p>The Dutch national flag. wikipedia</p> <p>sort an array of some 0,1,2 in O(n) </p> <ul> <li>[0, i-1] &lt; midElement</li> <li>[i, j-1] = midElement</li> <li>[j, k] unsorted</li> <li>[k+1, end] &gt;midElement</li> </ul> <pre><code>void dutchFlag(vector&lt;int&gt;&amp;todo){\n    int N=todo.size();\n    int low=0,mid=0,high=N-1;\n    while (mid&lt;=high){\n        if(todo[mid]==0){\n            swap(todo[low],todo[mid]);\n            low++;\n            mid++;\n        }\n        else if(todo[mid]==2){\n            swap(todo[mid],todo[high]);\n            high--;\n        }\n        else mid++;\n    }\n}\n</code></pre>"},{"location":"backend/leetcode/#merging-with-smaller-auxiliary-array","title":"Merging with smaller auxiliary array","text":"<p>given an array[2n], which is sorted from a[0] to a[n], and sorted from a[n+1] to a[2n]. you need to sort the entire array with O(n) space</p> <p>solve: 1. copy the first part to auxiliary array 2. merge auxiliary array and the second part of original array </p> solve <pre><code>#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid merge(vector&lt;int&gt; &amp;a) {\n    vector&lt;int&gt; aux = vector&lt;int&gt;(a.size() / 2);\n    int half = a.size() / 2;\n    for (int i = 0; i &lt; half; i++)\n        aux[i] = a[i];\n\n    int lo = 0, hi = half;\n    int k = 0;\n\n    while (lo &lt; half &amp;&amp; hi &lt; a.size()) {\n        if (aux[lo] &lt; a[hi])\n            a[k++] = aux[lo++];\n        else a[k++] = a[hi++];\n    }\n    while (lo &lt; half) a[k++] = aux[lo++];\n    while (hi &lt; a.size()) a[k++] = a[hi++];\n\n}\n\nvoid test() {\n    vector&lt;int&gt; a = {6, 7, 8, 9, 10, 1, 2, 3, 4, 5};\n    vector&lt;int&gt; expect = a;\n    std::sort(expect.begin(), expect.end());\n\n    merge(a);\n    for (auto x: a)\n        cout &lt;&lt; x &lt;&lt; ' ';\n\n    if (a == expect)\n        cout &lt;&lt; \"yes\";\n    else\n        cout &lt;&lt; \"NO\";\n}\n\nint main() {\n    test();\n    return 0;\n}\n</code></pre>"},{"location":"backend/leetcode/#taxicab-numbers","title":"Taxicab numbers","text":"<p>find items like <code>a^3+b^3=c^3+d^3</code></p> <p>\u200b\u53ef\u4ee5\u200b\u8fd9\u4e48\u200b\u60f3\u200b\uff0c\u200b\u770b\u6210\u200b\u6a2a\u7eb5\u200b 1 \u200b\u5230\u200b n \u200b\u7684\u200b\u77e9\u9635\u200b\uff0c\u200b\u91cc\u8fb9\u200b\u586b\u5199\u200b\u7acb\u65b9\u200b\u548c\u200b\u3002\u200b\u4e0a\u200b\u4e09\u89d2\u200b\u548c\u200b\u4e0b\u200b\u4e09\u89d2\u200b\u7684\u200b\u5143\u7d20\u200b\u4e00\u6837\u200b\u6240\u4ee5\u200b\u53ea\u200b\u8003\u8651\u200b\u4e0a\u200b\u4e09\u89d2\u200b\u3002</p> <ol> <li>\u200b\u904d\u5386\u200b\u6240\u6709\u200b\u6a2a\u200b\u7eb5\u5750\u6807\u200b\uff0c\u200b\u7528\u200b\u54c8\u5e0c\u200b\u8868\u200b\uff0c\u200b\u51fa\u73b0\u200b\u8fc7\u200b\u7684\u200b\u7acb\u65b9\u200b\u548c\u200b\u5c31\u200b\u8f93\u51fa\u200b\u4e00\u4e0b\u200b\uff0c\u200b\u6ca1\u200b\u51fa\u73b0\u200b\u8fc7\u200b\u7684\u200b\u5c31\u200b\u5b58\u200b\u8d77\u6765\u200b</li> <li>\u200b\u7528\u200b\u5806\u5b58\u200b\u7acb\u65b9\u200b\u548c\u200b\uff08\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u4f18\u5148\u200b\u961f\u5217\u200b\uff0c\u200b\u6211\u200b\u8fd9\u91cc\u200b\u7528\u200b\u6700\u5c0f\u200b\u5806\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200b\u7acb\u65b9\u200b\u548c\u200b\u4ece\u5c0f\u5230\u5927\u200b\uff0c\u200b\u6700\u5927\u200b\u5806\u200b\u4e5f\u200b\u884c\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200b\u4ece\u5927\u5230\u200b\u5c0f\u200b\uff09\u200b\u5806\u4e0d\u7a7a\u200b\u5c31\u200b\u53cd\u590d\u200b\u5c1d\u8bd5\u200b\u3002\u200b\u53e6\u5916\u200b\u7528\u5806\u200b\u62d3\u5c55\u200b\u7684\u200b\u65f6\u5019\u200b\u53ea\u5f80\u200b\u4e00\u4e2a\u200b\u65b9\u5411\u200b\u62d3\u5c55\u200b\uff0c\u200b\u7528\u200b\u4e24\u4e2a\u200b\u5c31\u200b\u4e0d\u200b\u5bf9\u200b</li> </ol> <pre><code>#include &lt;unordered_map&gt;\n#include \"iostream\"\n#include \"vector\"\n#include \"queue\"\n\nusing namespace std;\n\nclass taxinum {\n\npublic:\n    int a, b, sum;\n\n    taxinum(int _a, int _b) : a(_a), b(_b), sum(a * a * a + b * b * b) {}\n\n    bool operator==(taxinum other) const {\n        return this-&gt;sum == other.sum;\n    }\n\n    bool operator&lt;(taxinum other) const {\n        return this-&gt;sum &lt; other.sum;\n    }\n\n    bool operator&gt;(taxinum other) const {\n        return this-&gt;sum &gt; other.sum;\n    }\n\n    friend ostream &amp;operator&lt;&lt;(ostream &amp;os, const taxinum &amp;t) {\n        os &lt;&lt; t.a &lt;&lt; '+' &lt;&lt; t.b &lt;&lt; '=' &lt;&lt; t.sum;\n        return os;\n    }\n\n\n};\n\nvoid testMinheap() {\n    priority_queue&lt;taxinum, vector&lt;taxinum&gt;, greater&lt;taxinum&gt;&gt; queue1;\n\n    int n = 30;\n    for (int i = 1; i &lt;= n; i++)\n        queue1.push(taxinum(i, i));\n\n    taxinum oldPair(1, 1);\n    while (!queue1.empty()) {\n        taxinum newPair = queue1.top();\n        queue1.pop();\n\n        if (newPair.sum == oldPair.sum)\n            cout &lt;&lt; oldPair &lt;&lt; \"-----\" &lt;&lt; newPair &lt;&lt; endl;\n        if (newPair.b &lt; n)\n            queue1.push(taxinum(newPair.a, newPair.b + 1));\n\n        oldPair = newPair;\n    }\n\n}\n\nvoid testHashmap() {\n    int n = 30;\n    unordered_map&lt;int, pair&lt;int, int&gt;&gt; table;\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = i; j &lt;= n; j++) {\n            taxinum t(i, j);\n            int sum = t.sum;\n            if (table.contains(sum)) {\n                cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; j &lt;&lt; ' ' &lt;&lt; table[sum].first &lt;&lt; ' ' &lt;&lt; table[sum].second &lt;&lt; endl;\n            }\n            else {\n                table[sum] = {i, j};\n            }\n        }\n\n}\n\nvoid testMaxheap() {\n    priority_queue&lt;taxinum, vector&lt;taxinum&gt;, less&lt;taxinum&gt;&gt; queue1;\n\n    int n = 30;\n    for (int i = 1; i &lt;= n; i++)\n        queue1.push(taxinum(i, i));\n\n    taxinum oldPair(1, 1);\n    while (!queue1.empty()) {\n        taxinum newPair = queue1.top();\n        queue1.pop();\n\n        if (newPair.sum == oldPair.sum)\n            cout &lt;&lt; oldPair &lt;&lt; \"-----\" &lt;&lt; newPair &lt;&lt; endl;\n        //\u200b\u4e00\u4e2a\u200b\u65b9\u5411\u200b\u5c31\u591f\u200b\u4e86\u200b\n        if (newPair.b &gt; 0)\n            queue1.push(taxinum(newPair.a, newPair.b - 1));\n//        if (newPair.a &gt; 0)\n//            queue1.push(taxinum(newPair.a - 1, newPair.b));\n\n        oldPair = newPair;\n    }\n\n}\n\nint main() {\n    testMaxheap();\n    testHashmap();\n    return 0;\n}\n</code></pre>"},{"location":"backend/leetcode/#lakes","title":"lakes","text":"<p>\u200b\u94fe\u63a5\u200b</p> <p>\u200b\u8fd9\u4e2a\u200b\u9898\u200b\u5728\u4e8e\u200b\u526a\u679d\u200b\uff0c\u200b\u6709\u200b\u7684\u200b\u4e0d\u7528\u200b\u518d\u200bdfs\u200b\u4e86\u200b\uff0c\u200b\u4e0d\u7136\u200b\u8d85\u65f6\u200b\u3002\u200b\u5047\u5982\u200b\uff081\uff0c1\uff09\u200b\u548c\u200b\uff081\uff0c2\uff09\u200b\u8054\u901a\u200b\uff0cdfs\uff081\uff0c1\uff09\u200b\u548c\u200bdfs\uff081\uff0c2\uff09\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7ed3\u679c\u200b\u3002</p> <pre><code>#include &lt;cstring&gt;\n#include \"iostream\"\n\nusing namespace std;\nconst int N = 1010;\nint gra[N][N];\nint n, m;\nint total;\nint dx[4] = {0, 0, -1, 1};\nint dy[4] = {1, -1, 0, 0};\nbool visited[N][N];\n\n\nint dfs(int a, int b) {\n    visited[a][b] = true;\n    if (gra[a][b] == 0) return 0;\n    int anw = gra[a][b];\n\n    for (int i = 0; i &lt; 4; i++) {\n        int nx = a + dx[i];\n        int ny = b + dy[i];\n        if (nx &gt;= 1 &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= 1 &amp;&amp; ny &lt;= m\n            &amp;&amp; gra[nx][ny] &gt; 0 &amp;&amp; visited[nx][ny] == false) { anw += dfs(nx, ny); }\n    }\n    return anw;\n}\n\nvoid solve() {\n\n    int fin = 0;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++)\n            cin &gt;&gt; gra[i][j];\n\n\n    memset(visited, 0, sizeof visited);\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++) {\n            if (gra[i][j] != 0 &amp;&amp; visited[i][j] == false) {\n\n                fin = max(dfs(i, j), fin);\n            }\n        }\n    cout &lt;&lt; fin &lt;&lt; endl;\n\n}\n\nint main() {\n\n    cin &gt;&gt; total;\n    while (total--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"backend/leetcode/#hits-different","title":"Hits Different","text":"<p>\u200b\u94fe\u63a5\u200b</p> <p>\u200b\u524d\u7f00\u200b\u548c\u200b\u52a8\u753b\u200b\u8bb2\u89e3\u200b</p> <p>\u200b\u975e\u5e38\u200b\u5de7\u5999\u200b\u554a\u200b\uff0c\u200b\u8f6c\u200b\u6210\u200b\u524d\u7f00\u200b\u548c\u200b,\u200b\u8be6\u60c5\u200b\u53ef\u4ee5\u200b\u89c1\u200b\u76f8\u5e94\u200b\u82f1\u6587\u200b\u9898\u89e3\u200b</p> <pre><code>#include \"iostream\"\n\nusing namespace std;\n\ntypedef long long  llint;\nllint anw[2050000];\nllint gra[2029][2029];\nllint cur = 1;\n\nvoid solve() {\n    llint x;\n    cin &gt;&gt; x;\n    cout &lt;&lt; anw[x] &lt;&lt; endl;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    int n;\n    for (int i = 1; i &lt;= 2023; i++)\n        for (int j = i; j &gt;= 1; j--) {\n            gra[j][i - j + 1] = gra[j - 1][i - j + 1] + gra[j][i - j + 1 - 1]\n                                - gra[j - 1][i - j + 1 - 1]\n                                + cur * cur;\n            anw[cur] = gra[j][i - j + 1];\n            cur++;\n        }\n    cin &gt;&gt; n;\n    while (n--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"backend/leetcode/#distinct-split","title":"Distinct Split","text":"<p>\u200b\u94fe\u63a5\u200b</p> <ol> <li>\u200b\u4e00\u6b21\u200b\u904d\u5386\u200b\u7edf\u8ba1\u200b\u51fa\u200b\u6240\u6709\u200b\u5b57\u6bcd\u200b\u7684\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b</li> <li>\u200b\u4ece\u524d\u200b\u5f80\u540e\u200b\u5f00\u59cb\u200b\u7b97\u200b\uff0c\u200b\u7ed9\u200bpre\u200b\u5206\u200b\u4e00\u4e2a\u200b\u5b57\u6bcd\u200b\uff0c\u200b\u5c31\u200b\u5728\u200b\u8be5\u200b\u5b57\u6bcd\u200b\u51fa\u73b0\u200b\u603b\u6570\u200b-1</li> <li>\u200b\u7edf\u8ba1\u200b\u6240\u6709\u200b\u5b57\u6bcd\u200b\uff0c\u200b\u8fdb\u884c\u200b\u52a0\u200b\u548c\u200b\uff1b</li> </ol> <p>\u200b\u5de7\u5999\u200b\u5728\u200b\u76f8\u5f53\u4e8e\u200b\u5e76\u884c\u5904\u7406\u200b2\u200b\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u60f3\u200b\u4e0d\u200b\u51fa\u6765\u200b\ud83d\ude25 </p>"},{"location":"backend/leetcode/#_10","title":"\u8bfb\u8005\u200b\u5199\u8005\u200b\u95ee\u9898","text":"<p>wiki</p> \u200b\u8bfb\u8005\u200b\u4f18\u5148\u200b <pre><code>#include &lt;mutex&gt;\n#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nusing namespace std;\n\nmutex readCntLock;\nint readCnt;\nmutex resource;\n\nvoid readResource(int x) {\n    cout &lt;&lt; x &lt;&lt; \" read\\n\";\n}\n\nvoid reader() {\n    while (true) {\n        readCntLock.lock();\n        readCnt++;\n        if (readCnt == 1)\n            resource.lock();\n        readCntLock.unlock();\n\n        readResource(readCnt);\n\n        readCntLock.lock();\n        readCnt--;\n        if (readCnt == 0)\n            resource.unlock();\n        readCntLock.unlock();\n    }\n}\n\nvoid writeResource(int x) {\n    cout &lt;&lt; x &lt;&lt; \" write\\n\";\n}\n\nvoid writer() {\n    while (true) {\n        resource.lock();\n        writeResource(1);\n        resource.unlock();\n    }\n}\n\nint main() {\n    thread reader_b(reader);\n    thread writer_a(writer);\n    thread reader_c(reader);\n    writer_a.join();\n    reader_b.join();\n    reader_c.join();\n    return 0;\n}\n</code></pre> \u200b\u5199\u8005\u200b\u4f18\u5148\u200b <pre><code>#include &lt;mutex&gt;\n#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nusing namespace std;\n\nint readCnt;\nmutex readCntLock;\n\nint writeCnt;\nmutex writeCntLock;\n\nmutex readTry;\nmutex resource;\n\nvoid readResource(int x) {\n    cout &lt;&lt; x &lt;&lt; \" read\\n\";\n}\n\nvoid reader() {\n    while (true) {\n        readTry.lock();\n\n        readCntLock.lock();\n        readCnt++;\n        if (readCnt == 1)\n            resource.lock();\n        readCntLock.unlock();\n\n        readTry.unlock();\n\n\n        readResource(readCnt);\n\n\n        readCntLock.lock();\n        readCnt--;\n        if (readCnt == 0)\n            resource.unlock();\n        readCntLock.unlock();\n    }\n}\n\nvoid writeResource(int x) {\n    cout &lt;&lt; x &lt;&lt; \" write\\n\";\n}\n\nvoid writer() {\n    while (true) {\n        writeCntLock.lock();\n        writeCnt++;\n        if (writeCnt == 1)\n            readTry.lock();\n        writeCntLock.unlock();\n\n        resource.lock();\n        writeResource(1);\n        resource.unlock();\n\n        writeCntLock.lock();\n        writeCnt--;\n        if (writeCnt == 0)\n            readTry.unlock();\n        writeCntLock.unlock();\n    }\n}\n\nint main() {\n    thread reader_b(reader);\n    thread writer_a(writer);\n    thread reader_c(reader);\n    writer_a.join();\n    reader_b.join();\n    reader_c.join();\n    return 0;\n}\n</code></pre> \u200b\u516c\u5e73\u200b <pre><code>#include &lt;mutex&gt;\n#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nusing namespace std;\n\nint readCnt;\nmutex readCntLock;\n\nmutex serviceQueue;\nmutex resource;\n\nvoid readResource(int x) {\n    cout &lt;&lt; x &lt;&lt; \" read\\n\";\n}\n\nvoid reader() {\n    while (true) {\n        serviceQueue.lock();\n\n        readCntLock.lock();\n        readCnt++;\n        if (readCnt == 1)\n            resource.lock();\n        readCntLock.unlock();\n\n        serviceQueue.unlock();\n\n\n        readResource(readCnt);\n\n\n        readCntLock.lock();\n        readCnt--;\n        if (readCnt == 0)\n            resource.unlock();\n        readCntLock.unlock();\n    }\n}\n\nvoid writeResource(int x) {\n    cout &lt;&lt; x &lt;&lt; \" write\\n\";\n}\n\nvoid writer() {\n    while (true) {\n        serviceQueue.lock();\n        resource.lock();\n        serviceQueue.unlock();\n\n        writeResource(1);\n\n        resource.unlock();\n    }\n}\n\nint main() {\n    thread reader_b(reader);\n    thread writer_a(writer);\n    thread reader_c(reader);\n    writer_a.join();\n    reader_b.join();\n    reader_c.join();\n    return 0;\n}\n</code></pre>"},{"location":"backend/problemSolve/","title":"problemSolve","text":""},{"location":"backend/problemSolve/#_1","title":"\u963f\u91cc\u200b\u4e91","text":"<p>\u200b\u56e0\u4e3a\u200b\u673a\u5668\u200b\uff08\u200b\u8054\u60f3\u200b\u5c0f\u65b0\u200bAIR14-2021\uff09\u200b\u627f\u53d7\u200b\u4e86\u200b\u4e0d\u80fd\u200b\u627f\u53d7\u200b\u4e4b\u91cd\u200b\uff08make qemu\u200b\u76f4\u63a5\u200b\u5361\u4f4f\u200b\u4e86\u200b\uff09\uff0c\u200b\u8f6c\u6218\u200b\u963f\u91cc\u200b\u4e91\u200b\uff0c\u200b\u963f\u91cc\u200b\u4e91\u200b\u505a\u200b\u4e24\u4e2a\u200b\u5b9e\u9a8c\u200b\u540e\u200b\u53ef\u4ee5\u200b\u514d\u8d39\u200b\u9886\u53d6\u200b7\u200b\u4e2a\u200b\u6708\u200b\u670d\u52a1\u5668\u200b\uff08\u200b\u5b9e\u9a8c\u200b\u5185\u5bb9\u200b\u5f88\u200b\u7b80\u5355\u200b\uff0c40min\u200b\u4e24\u4e2a\u200b\u5168\u80fd\u200b\u641e\u5b9a\u200b\uff09\uff0c\u200b\u975e\u5e38\u200b\u53cb\u597d\u200b\u4e86\u200b</p> \u200b\u53d1\u200b\u70b9\u200b\u7262\u9a9a\u200b <p>\u200b\u817e\u8baf\u200b\u4e91\u200b\u4e5f\u200b\u4e0d\u9519\u200b\uff0c30\u200b\u5757\u200b3\u200b\u4e2a\u200b\u6708\u200b\uff0c\u200b\u4e5f\u200b\u6709\u200b\u5b66\u751f\u200b\u8ba4\u8bc1\u200b\u83b7\u53d6\u200b\u66f4\u200b\u957f\u65f6\u95f4\u200b\u7684\u200b\u514d\u8d39\u200b\u670d\u52a1\u5668\u200b\uff0c\u200b\u94fe\u63a5\u200b\ud83d\udd17</p> <p>\u200b\u76f8\u6bd4\u4e4b\u4e0b\u200b\u534e\u4e3a\u200b\u4e91\u200b\u5c31\u200b\u4e0d\u662f\u200b\u975e\u5e38\u200b\u7ed9\u529b\u200b\u4e86\u200b\uff0c\u200b\u8001\u5e08\u200b\u5929\u5929\u200b\u5728\u200b\u5b66\u6821\u200b\u91cc\u200b\u641e\u200b\u5ba3\u4f20\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u200b\u7ed9\u200b\u5e7f\u5927\u200b\u7684\u200b\u7a77\u200b\u54e5\u4eec\u200b\u6574\u70b9\u200b\u798f\u5229\u200b\uff08\u200b\u70b9\u540d\u200b\u6279\u8bc4\u200b  \uff09</p> kind details \u200b\u5904\u7406\u5668\u200b AMD Ryzen 5 5500U with Radeon Graphics \u200b\u516d\u6838\u200b \u200b\u4e3b\u677f\u200b \u200b\u8054\u60f3\u200b LNVNB161216 \u200b\u5185\u5b58\u200b \u200b\u9541\u5149\u200b16GB DDR4 3200MHz \uff08 8GB \uff0b 8GB ) \u200b\u663e\u5361\u200b AMD Radeon\uff08TM\uff09 Graphics \uff08512MB\uff0f\u200b\u8054\u60f3\u200b) \u200b\u663e\u793a\u5668\u200b LEN140FHD\uff3b\u200b\u8054\u60f3\u200bLEN9023\uff3d\uff0813.9\u200b\u82f1\u5bf8\u200b\uff09"},{"location":"backend/problemSolve/#_2","title":"\u865a\u62df\u673a","text":""},{"location":"backend/problemSolve/#vpn","title":"vpn","text":"<ul> <li>virtual box \u200b\u7248\u672c\u200b 7.0.10 r158379 (Qt5.15.2)</li> <li> <p>Ubuntu 20.04 \u200b\u6e05\u534e\u200b\u6e90\u200b\u955c\u50cf\u200b</p> </li> <li> <p>\u200b\u6211\u200b\u7684\u200b\u662f\u200b\u5148\u200b\u628a\u200b\u7f51\u6865\u200b\u548c\u200bnat\u200b\u5168\u90fd\u200b\u6253\u5f00\u200b</p> <ul> <li>\u200b\u8fd9\u200b\u4e00\u6b65\u200b\u53ea\u5f00\u200bnat \u200b\u6216\u8005\u200b \u200b\u7f51\u6865\u200b\u90fd\u884c\u200b\uff0c\u200b\u5173\u4e8e\u200bnat\u200b\u548c\u200b\u7f51\u6865\u200b\u8bf7\u200b\u67e5\u8be2\u200b\u4e13\u4e1a\u77e5\u8bc6\u200b\uff08\u200b\u6211\u200b\u7684\u200b\u673a\u5668\u200b\u4e8c\u9009\u200b\u4e00\u200b\u90fd\u200b\u53ef\u4ee5\u200b\uff09</li> </ul> </li> <li>\u200b\u5728\u200b <code>~/.config/clash</code> \u200b\u914d\u7f6e\u200b <code>config.yaml</code> \u200b\u548c\u200b <code>Country.mmdb</code><ol> <li><code>config.yaml</code> \u200b\u91cc\u200b\u6dfb\u52a0\u200b\u670d\u52a1\u5546\u200b\u7684\u200b\u8ba2\u9605\u200b</li> <li><code>Country.mmdb</code> \u200b\u94fe\u63a5\u200b</li> </ol> </li> <li>\u200b\u6309\u200b <code>config.yaml</code> \u200b\u4fee\u6539\u200b\u7f51\u7edc\u200b\u4ee3\u7406\u200b<ol> <li>http proxy,https proxy,ftp proxy,\u200b\u586b\u5199\u200b\u5bf9\u5e94\u200b\u7aef\u53e3\u200b</li> <li>socks host \u200b\u586b\u5199\u200b\u5bf9\u5e94\u200b\u7aef\u53e3\u200b</li> <li>\u200b\u4e3b\u673a\u200b\u5168\u5199\u200b <code>127.0.0.1</code></li> </ol> </li> <li>\u200b\u8fd0\u884c\u200bclash <code>./clash</code> </li> </ul>"},{"location":"backend/problemSolve/#_3","title":"\u8fde\u200b\u4e0d\u200b\u4e0a\u7f51","text":"tips <p>\u200b\u76f4\u63a5\u200b\u7528\u200bOracle\u200b\u7684\u200bvirtual box\u200b\u5c31\u200b\u597d\u200b\uff0c\u200b\u66f4\u52a0\u200b\u65b9\u4fbf\u200b</p> <ul> <li>\u200b\u6700\u200b\u5f00\u59cb\u200b\u88c5\u200bUbuntu\u200b\u8054\u7f51\u200b\u6ca1\u200b\u95ee\u9898\u200b\uff0c\u200b\u91cd\u542f\u200b\u540e\u200b\u4e5f\u200b\u6ca1\u200b\u95ee\u9898\u200b</li> <li>2023/07\u200b\u91cd\u88c5\u200b\u4e4b\u540e\u200b\u5c31\u200b\u8fde\u200b\u4e0d\u200b\u4e0a\u7f51\u200b\uff0c\u200b\u7f51\u4e0a\u200b\u6559\u7a0b\u200b\u4e5f\u200b\u6ca1\u200b\u89e3\u51b3\u200b\uff0c\u200b\u540e\u6765\u200b\u53d1\u73b0\u200b\u91cd\u88c5\u200b\u7f51\u7edc\u200b\u90e8\u5206\u200b\u5c31\u200b\u80fd\u200b\u8fde\u200b\u4e0a\u200b</li> <li>useful guide</li> </ul> \u200b\u91cd\u88c5\u200b\u865a\u62df\u200b\u7f51\u7edc\u200b\u7f16\u8f91\u5668\u200b <p>vmware playstations pro\uff0c\u200b\u7f16\u8f91\u200b\uff0c\u200b\u865a\u62df\u200b\u7f51\u7edc\u200b\u7f16\u8f91\u5668\u200b\uff0c\u200b\u66f4\u6539\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u8fd8\u539f\u200b\u4e3a\u200b\u9ed8\u8ba4\u8bbe\u7f6e\u200b</p>"},{"location":"backend/problemSolve/#_4","title":"\u6570\u636e\u5e93","text":""},{"location":"backend/problemSolve/#mysql","title":"MySQL\u200b\u5b89\u88c5\u200b\u540e\u200b\u8fde\u63a5\u200b\u4e0d\u4e0a","text":"<p>\u200b\u80cc\u666f\u200b\uff1aWindows\u200b\u91cd\u88c5\u200bMySQL\u200b\u5e76\u4e14\u200b\u7acb\u523b\u200b\u8fdb\u5165\u200bworkbench\u200b\u540e\u80fd\u200b\u6b63\u5e38\u200b\u6570\u636e\u5e93\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4f46\u662f\u200b\u91cd\u542f\u200b\u6216\u200b\u5173\u673a\u200b\u518d\u5f00\u200b\u5c31\u200b\u8fde\u63a5\u200b\u4e0d\u4e0a\u200b\u4e86\u200b\u3002</p> <p>the path already exists</p> <p>\u200b\u6bd4\u5982\u200b\u5b89\u88c5\u200bserver\u200b\u6211\u8981\u200b\u88c5\u5230\u200b<code>D:\\MYSQL\\server</code>\uff0c\u200b\u63d0\u793a\u200b\u6211\u200b<code>the path already exists</code>\uff0c\u200b\u90a3\u200b\u5c31\u200b\u628a\u200b\u81ea\u5df1\u200b\u5efa\u200b\u7684\u200bserver\u200b\u6587\u4ef6\u5939\u200b\u5220\u6389\u200b\uff0c\u200b\u586b\u5199\u200b<code>D:\\MYSQL</code>\u200b\u5373\u53ef\u200b</p> <p>\u200b\u53ef\u80fd\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\uff1a</p> <p>\u200b\u7ec8\u7aef\u200b\uff08powershell\uff09\u200b\u8f93\u5165\u200b<code>&amp; 'D:\\MYSQL\\server\\bin\\mysqld.exe' --defaults-file=\"D:\\MYSQL\\data\\my.ini\"</code> \u200b\u522b\u5fd8\u4e86\u200b\u5207\u6362\u200b\u6210\u200b\u5bf9\u5e94\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b</p> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u8fd9\u4e48\u200b\u505a\u200b\u5462\u200b\uff1f</p> <p>\u200b\u8fd9\u200b\u6761\u200b\u547d\u4ee4\u200b\u7684\u200b\u610f\u601d\u200b\u662f\u200b\u628a\u200b<code>D:\\MYSQL\\data\\my.ini</code>\u200b\u7684\u200b\u5185\u5bb9\u200b\u9001\u7ed9\u200b<code>D:\\MYSQL\\server\\bin\\mysqld.exe</code>\u200b\u6267\u884c\u200b\u3002 \u200b\u6211\u200b\u770b\u200b\u7f51\u4e0a\u200b\u6709\u200b<code>net start mysql</code>\u200b\u4f46\u662f\u200b\u6211\u200b\u6309\u7167\u200b\u76f8\u5173\u200b\u6559\u7a0b\u200b\u6210\u529f\u200b\u542f\u52a8\u200bmysql\u200b\u540e\u200b\uff0cworkbench\u200b\u8fd8\u662f\u200b\u4e0d\u80fd\u200b\u8fde\u63a5\u200b\u3002\u200b\u540e\u6765\u200b\u53c8\u200b\u5728\u200bStackOverflow<sup>1</sup>\u200b\u4e0a\u200b\u770b\u5230\u200b\u542f\u52a8\u200b<code>MySQL57</code> </p> <p>\u200b\u6211\u200b\u4e5f\u200b\u505a\u200b\u7c7b\u4f3c\u200b\u6b65\u9aa4\u200b\uff0c\u200b\u542f\u52a8\u200b\u4e86\u200b<code>MySQL80</code>(\u200b\u56e0\u4e3a\u200b\u6211\u200b\u7684\u200b\u914d\u7f6e\u200b\u91cc\u200b\u5b83\u200b\u5c31\u200b\u53eb\u200b\u8fd9\u4e2a\u200b\u540d\u5b57\u200b\uff0c\u200b\u5bf9\u5e94\u200b\u4e0b\u9762\u200b\u7684\u200b\u56fe\u200b\u4e2d\u200bwindows servers name),\u200b\u7136\u540e\u200bworkbench\u200b\u6210\u529f\u200b\u8fde\u63a5\u200b\ud83d\udc4d</p> <p>\u200b\u63a5\u4e0b\u6765\u200b\u518d\u63a5\u518d\u5389\u200b\uff0c\u200b\u5728\u200b<code>services.msc</code>\u200b\u53d1\u73b0\u200b\u5b83\u200b\u5176\u5b9e\u200b\u5c31\u662f\u200b\u76f8\u5f53\u4e8e\u200b\u6267\u884c\u200b<code>D:\\MYSQL\\server\\bin\\mysqld.exe' --defaults-file=\"D:\\MYSQL\\data\\my.ini</code>\u200b\u8fd9\u200b\u6761\u200b\u6307\u4ee4\u200b\uff0c\u200b\u4f46\u662f\u200b\u6211\u200b\u770b\u200bworkbench\u200b\u91cc\u200b\u7684\u200b\u8fde\u63a5\u200b\u914d\u7f6e\u200b\u5c31\u662f\u200b\u8fd9\u4e2a\u200b\u610f\u601d\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u592a\u200b\u660e\u767d\u200b\u4e3a\u4ec0\u4e48\u200bworkbench\u200b\u6ca1\u6709\u200b\u6210\u529f\u200b\uff0c\u200b\u5e0c\u671b\u200b\u6709\u200b\u9ad8\u4eba\u200b\u6307\u70b9\u200b\u3002 </p> <ol> <li> <p>\u200b\u5bf9\u5e94\u200b\u7684\u200bStackOverflow\u200b\u95ee\u9898\u200b\u4f20\u9001\u95e8\u200b \u21a9</p> </li> </ol>"},{"location":"backend/python/","title":"Python","text":"<ul> <li>oeasy py</li> <li>\u200b\u53ef\u89c6\u5316\u200b</li> </ul> <ul> <li><code>argparse</code> \u200b\u63a5\u6536\u200b\u53c2\u6570\u200b\u6559\u7a0b\u200b</li> <li><code>match</code> : the use of the _ symbol will match with any input</li> </ul>"},{"location":"backend/python/#_1","title":"\u5b57\u7b26\u4e32","text":"<p>\u200b\u5f53\u200b\u7ecf\u5e38\u200b\u8fdb\u884c\u200b\u5b57\u7b26\u4e32\u200b\u62fc\u63a5\u200b\u5f0f\u200b\u7528\u200b join \u200b\u66f4\u597d\u200b\uff0c\u200b\u7c7b\u4f3c\u200b cpp string \u200b\u7684\u200b append</p> <pre><code>result_join = \"\".join(['a', 'b', 'c', 'd'])\nprint(result_join)  # Output: 'abcd'\n</code></pre>"},{"location":"backend/python/#_2","title":"\u5217\u8868","text":"<ul> <li><code>if</code> \u200b\u751f\u6210\u5f0f\u200b\uff1a<code>la = [i for i in range(10) if i % 2 == 0]</code></li> <li><code>if else</code> \u200b\u751f\u6210\u5f0f\u200b\uff1a<code>la = [i if i % 2 == 0 else -1 for i in range(10)]</code> </li> <li>oi \u200b\u8f93\u5165\u200b\uff1a <code>a,b,c=map(int,input().split())</code></li> <li>\u200b\u5217\u8868\u200b\u4e58\u6cd5\u200b\uff1a\u200b\u76f8\u5f53\u4e8e\u200b\u5148\u51cf\u200b\u4e00\u5c42\u200b\u65b9\u62ec\u53f7\u200b\u518d\u200b\u91cd\u590d\u200b\uff0c\u200b\u6700\u540e\u200b\u5916\u9762\u200b\u52a0\u200b\u4e00\u5c42\u200b\u65b9\u62ec\u53f7\u200b <code>a=[1,2]*3 # a=[1,2,1,2,1,2]</code></li> <li>\u200b\u5217\u8868\u200b\u5207\u7247\u200b\uff1a\u200b\u5982\u679c\u200b\u8d4b\u7ed9\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u53d8\u91cf\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200b\u6d45\u200b\u590d\u5236\u200b</li> </ul> <pre><code>la = [0, 1, [2, 3, 4], 5, 6, 7]\nla_slice = la[0:3]\nla[0] = 10\nla[2].append(10)\nprint(la_slice)\n# [0, 1, [2, 3, 4, 10]]\n</code></pre>"},{"location":"backend/python/#_3","title":"\u590d\u5236\u200b\u95ee\u9898","text":"<p>\u200b\u5b66\u200b python \u200b\u7ecf\u5178\u200b\u95ee\u9898\u200b\uff1a</p> <pre><code>list_a=[0,[1]]\nlist_b=list_a       # \u200b\u548c\u200b a \u200b\u5b8c\u5168\u200b\u4e00\u6837\u200b\nlist_c=list_a.copy()# \u200b\u6d45\u200b\u590d\u5236\u200b\u51fa\u6765\u200b\u4e00\u4e2a\u200b\nlist_d=list_a[:]    # \u200b\u6d45\u200b\u590d\u5236\u200b\u51fa\u6765\u200b\u53e6\u200b\u4e00\u4e2a\u200b\n\nlist_a[0]=10\nlist_a[1].append(2)\n# list_b? list_c? list_d?\n</code></pre> <p>\u200b\u8981\u200b\u56de\u7b54\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u5148\u200b\u4e86\u89e3\u200b py \u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u5206\u6210\u200b </p> <ul> <li>mutable \u200b\u53ef\u53d8\u200b\u7c7b\u578b\u200b\uff1a\u200b\u5217\u8868\u200b\uff0c\u200b\u96c6\u5408\u200b\uff0c\u200b\u5b57\u5178\u200b</li> <li>immutable \u200b\u4e0d\u53ef\u200b\u53d8\u200b\u7c7b\u578b\u200b\uff1a\u200b\u6574\u6570\u200b\uff0c\u200b\u5b57\u7b26\u4e32\u200b</li> </ul> <p>\u200b\u6d45\u200b\u590d\u5236\u200b\u4e00\u4e2a\u200b mutable\uff0c\u200b\u76f8\u5f53\u4e8e\u200b\u590d\u5236\u200b\u6307\u9488\u200b/\u200b\u5f15\u7528\u200b\uff1b\u200b\u6d45\u200b\u590d\u5236\u200b immutable \u200b\u7b49\u4e8e\u200b\u6df1\u200b\u590d\u5236\u200b\uff0c\u200b\u65b0\u5f00\u200b\u4e00\u5757\u200b\u5185\u5b58\u200b</p> <p>\u200b\u56fe\u5f62\u5316\u200b\u5c55\u793a\u200b</p> example1 <pre><code>def shallow_deep_part1():\n    original_int = 42\n    shallow_copy_int = original_int\n    deep_copy_int = copy.deepcopy(original_int)\n    print(\"immutable: shallow = deep\")\n    print(f\"origin:\\t\\t{id(original_int)}\\nshallow_copy:\\t\\t{id(shallow_copy_int)}\\ndeep_copy:\\t\\t{id(deep_copy_int)}\")\n\n    print(\"\\n======\\n\")\n    print(\"mutable: shallow != deep\")\n    original_list = [1, [2, 3], 4]\n    same_with_origin = original_list\n    shallow_copy_list = original_list[:]\n\n    shallow_copy_list[0] = 10\n    shallow_copy_list[1].append(5)\n\n    print(\"original: \", original_list)\n    print(\"shallow: \", shallow_copy_list)\n    print(\"same with origin: \", same_with_origin)\n</code></pre> example2 <pre><code>def shallow_deep_part2():\n    origin = [[0] for i in range(3)]  # each item diff\n    print(id(origin[0]), id(origin[1]), id(origin[2]))\n    origin[0].append(1)\n    print(origin)    # [[0, 1], [0], [0]]\n\n    another = [[0]]*3  # same item\n    another[0].append(1)\n    print(another)   # [[0, 1], [0, 1], [0, 1]]\n</code></pre>"},{"location":"backend/python/#_4","title":"\u5b57\u5178","text":"<p>\u200b\u5b57\u5178\u200b\u8bbe\u7f6e\u200b\u503c\u200b</p> <pre><code>from collection import defaultdict\ns = [('yellow', 1), ('blue', 2), ('yellow', 3),\n     ('blue', 4), ('red', 1)]\n# \u200b\u6b64\u5904\u200b\u5fc5\u987b\u200b\u5199\u200b\u53ef\u200b\u8c03\u7528\u200b\u7684\u200b\u51fd\u6570\u200b\u50cf\u200b list set\uff0c[] \u200b\u4e0d\u884c\u200b\nd = defaultdict(list) \nfor k, v in s:\n    d[k].append(v)\n    # faster than down\n    # d.setdefault(k, []).append(v)\n</code></pre>"},{"location":"backend/python/#range","title":"range","text":"<p>\u200b\u5148\u770b\u200b\u4e00\u5c0f\u200b\u6bb5\u200b cpp \u200b\u548c\u200b py</p> cpppy <pre><code>for(int i = 0; i &lt; 10; i++){\n    std::cout&lt;&lt; i &lt;&lt;' ';\n    i += 100\n}\n</code></pre> <pre><code>for i in range(10):\n    print(i)\n    i+=100\n</code></pre> <p>\u200b\u5f88\u200b\u5bb9\u6613\u200b\u770b\u51fa\u200b cpp \u200b\u53ea\u4f1a\u200b\u8f93\u51fa\u200b 0\uff0c\u200b\u4f46\u662f\u200b\u53d1\u73b0\u200b py \u200b\u7adf\u7136\u200b\u8f93\u51fa\u200b 0-9\uff0c\ud83d\ude31</p> <p>\u200b\u7136\u540e\u200b\u67e5\u200b\u4e00\u4e0b\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200b\u6bcf\u6b21\u200b\u628a\u200b  yield \u200b\u7684\u200b\u7ed3\u679c\u200b\u8d4b\u7ed9\u200b i\uff0c\u200b\u5f62\u8c61\u5316\u200b\u8868\u793a\u200b\u5c31\u662f\u200b\u6328\u4e2a\u200b\u53d6\u200b[0,1,2]\uff0c\u200b\u5faa\u73af\u4f53\u200b\u91cc\u200b\u4fee\u6539\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u4e0b\u200b\u4e00\u6b21\u200b\u5faa\u73af\u200b i \u200b\u7684\u200b\u503c\u200b\u3002</p> <p><code>for</code> loop in python, your looping variable, here x proceeds to the next item in your iterable. So any changes made to x are overwritten when the loop restarts.</p> <p>the only way for the loop structure to be changed within the loop is to change the iterable you're looping over. So, for instance</p> <pre><code># wont stop\ndef test_bad():\n    L = [1, 2, 3, 4, 5]\n    for item in L:\n        L.append(item)\n        print(L)\n\n# can stop\ndef test_good():\n    L = [1, 2, 3, 4, 5]\n    for i in range(len(L)):\n        L.append(i)\n        print(L)\n</code></pre> <p>\u200b\u53c2\u8003\u8d44\u6599\u200b,\u200b\u503c\u5f97\u4e00\u770b\u200b</p>"},{"location":"backend/python/#yield","title":"yield","text":"<ul> <li>\u200b\u5728\u200b\u51fd\u6570\u200b\u4e2d\u200b\u6267\u884c\u200b\u5b8c\u200b yield \u200b\u540e\u200b\u4e0b\u6b21\u200b\u6267\u884c\u200b\u4ece\u4e0b\u200b\u4e00\u6761\u200b\u5f00\u59cb\u200b\u76f4\u5230\u200b\u518d\u6b21\u200b\u6267\u884c\u200b\u4e00\u6b21\u200b yield\uff0c\u200b\u76f8\u5f53\u4e8e\u200b return \u200b\u4e00\u4e2a\u200b\u503c\u540e\u200b\u4e0b\u6b21\u200b\u7ee7\u7eed\u6267\u884c\u200b</li> <li>\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u751f\u6210\u5668\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u904d\u5386\u200b\uff0c <code>for i in generator</code>\uff0c\u200b\u6709\u70b9\u50cf\u200b cpp \u200b\u7684\u200b iterator</li> </ul> <p>\u200b\u4e0b\u8fb9\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u662f\u200b\u7ea6\u745f\u592b\u200b\u73af\u200b\uff0c\u200b\u76f4\u63a5\u200b\u672c\u7ad9\u200b\u641c\u7d22\u200b\u5373\u53ef\u200b</p> <pre><code>def test_yield():\n    yield 1\n    yield 2\n    for i in range(3,5):\n        print(f\"yield {i}\")\n        yield i\n    yield 10   # the last will be 10\n    return 100 # wont be executed\n\nfor val in test_yield():\n    print(val)\n</code></pre>"},{"location":"backend/python/#_5","title":"\u7c7b","text":"<p>python \u200b\u7528\u200b\u53cc\u200b\u4e0b\u5212\u7ebf\u200b\u8868\u793a\u200b\u4e0d\u540c\u200b\u7684\u200b\u7528\u9014\u200b\uff0c\u200b\u4e3b\u8981\u200b\u662f\u200b\u5927\u5bb6\u200b\u7ea6\u5b9a\u4fd7\u6210\u200b\uff0c\u200b\u6ca1\u6709\u200b\u50cf\u200b cpp \u200b\u6216\u200b Java \u200b\u90a3\u4e48\u200b\u4e25\u683c\u200b\u7684\u200b\u65b9\u5f0f\u200b</p> <pre><code>class Parent:\n    def __init__(self):\n        self.__private_var = 10\n\n    def __private_method(self):\n        print(\"This is a private method in parent\")\n\n    def __add__(self, other):  # overwrite in child\n        print(\"parent add\")\n\n\nclass Child(Parent):\n    def __init__(self):\n        super().__init__()\n        print(self._Parent__private_var)\n        self.__private_method()\n\n    def __private_method(self):\n        print(\"This is a private method in child\")\n\n    def __add__(self, other):\n        print(\"child add\")\n</code></pre>"},{"location":"backend/python/#csv","title":"csv","text":"read &amp; write csv1.csvmatchmatch update <pre><code>import csv\n\nstudents = []\n\nwith open(\"1.csv\") as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        students.append({\"name\": row[\"name\"], \"home\": row[\"home\"]})\n\nfor student in sorted(students, key=lambda student: student[\"name\"]):\n    print(f\"{student['name']} is in {student['home']}\")\n\n\nname = input(\"What's your name? \")\nhome = input(\"Where's your home? \")\n\nwith open(\"1.csv\", \"a\") as file:\n    writer = csv.DictWriter(file, fieldnames=[\"name\", \"home\"])\n    writer.writerow({\"name\": name, \"home\": home})\n</code></pre> <pre><code>name,home\nHermoine,Gryffindor\nHarry,Gryffindor\nRon,Gryffindor\nDraco,Slytherin\n</code></pre> <pre><code>name = input(\"What's your name? \")\n\nmatch name: \n    case \"Harry\":\n        print(\"Gryffindor\")\n    case \"Hermione\":\n        print(\"Gryffindor\")\n    case \"Ron\": \n        print(\"Gryffindor\")\n    case \"Draco\":\n        print(\"Slytherin\")\n    case _:\n        print(\"Who?\")\n</code></pre> <pre><code>name = input(\"What's your name? \")\n\nmatch name: \n    case \"Harry\" | \"Hermione\" | \"Ron\":\n        print(\"Gryffindor\")\n    case \"Draco\":\n        print(\"Slytherin\")\n    case _:\n        print(\"Who?\")\n</code></pre>"},{"location":"backend/python/#_6","title":"\u6982\u7387\u200b\u62bd\u53d6","text":"<ul> <li>\u200b\u5047\u5982\u200b\u73b0\u5728\u200b\u8981\u200b\u4ee5\u200b\u7279\u5b9a\u200b\u6982\u7387\u200b\u62bd\u53d6\u200b\u5217\u8868\u200b\u91cc\u200b\u5143\u7d20\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200b <code>random.choices(todo_list,[0.05,0.9,0.05])</code> </li> <li>\u200b\u4f46\u662f\u200b\u5047\u5982\u200b\u8981\u662f\u200b\u5217\u8868\u200b\u62bd\u53d6\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b, <code>choices</code> \u200b\u5c31\u200b\u4e0d\u200b\u592a\u200b\u65b9\u4fbf\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200b\u4ee5\u4e0b\u200b\u65b9\u6cd5\u200b\uff1a <pre><code>p = random.uniform(0, 1)\n\nthreshold = 0.8\n\nif p &gt;= threshold:\n    print(\"yes\")\nelse:\n    print(\"no\")\n</code></pre></li> </ul>"},{"location":"backend/python/#socket-demo","title":"socket demo","text":"<ul> <li>server: create socket, bind, listen, accept</li> <li>client: create socket, connect</li> </ul> serverclient <pre><code>import socket\nfrom threading import Thread\n\nINET = socket.AF_INET\nIP_PORT = (\"127.0.0.1\", 9999)\nRECEIVE_SIZE = 1024\n\n\ndef acceptConnection(connection: socket, port):\n    while True:\n        receive_data = connection.recv(RECEIVE_SIZE).decode()\n        if (receive_data == \"exit\"):\n            break\n\n        connection.sendall((f\"server receive {port}: \"+receive_data).encode())\n\n    connection.close()\n\n\nserver_socket = socket.socket(INET)\nserver_socket.bind(IP_PORT)\nserver_socket.listen(1)\n\nwhile True:\n    client_connection, client_port = server_socket.accept()\n    thread = Thread(target=acceptConnection, args=(\n        client_connection, client_port))\n    thread.start()\n</code></pre> <pre><code>import socket\n\nIP_PORT = (\"127.0.0.1\", 9999)\nRECEIVE_SIZE = 1024\nclient_socket = socket.socket(socket.AF_INET)\n\nclient_socket.connect(IP_PORT)\n\nwhile True:\n    message = input(\"client input: \").strip()\n    if not message:\n        continue\n    client_socket.sendall(message.encode())\n\n    print(\"get from server: \", client_socket.recv(\n        RECEIVE_SIZE).decode().strip())\n\n    if message == \"exit\":\n        print(\"client: finish!\")\n        break\n\nclient_socket.close()\n</code></pre>"},{"location":"backend/python/#fun-problem","title":"fun problem","text":""},{"location":"backend/python/#114514","title":"114514","text":"<p>\u200b\u6570\u5b57\u200b\u751f\u6210\u5668\u200b\uff0c\u200b\u539f\u7406\u200b</p> <pre><code>def calc(number: int) -&gt; str:\n    bases = []\n    magic = \"114514\"\n    bases.append(\"~-\"+'1')\n    for i in magic[1:]:\n        bases.append(\"-~\"*(10-int(i))+i)  # convert x to 10\n\n    anw = \"\"\n    for i in range(len(magic)):\n        digit = number//(10**(5-i)) % 10\n        if i == 0:\n            anw = bases[0]\n        else:\n            anw = '('+anw+'*'+bases[i]+')'\n        anw = \"-~\"*digit+anw\n        # \u200b\u7b2c\u4e00\u4e2a\u200b\u76f4\u63a5\u200b\u52a0\u200b dight\uff0c\u200b\u540e\u9762\u200b\u7684\u200b\u5148\u200b\u628a\u200b\u4e0a\u6b21\u200b\u7ed3\u679c\u200b*10\uff0c\u200b\u6574\u4f53\u200b\u52a0\u200b\u62ec\u53f7\u200b\uff0c\u200b\u518d\u200b\u52a0\u200bdigit\n    print(anw)\n    return anw\n</code></pre>"},{"location":"backend/python/#i18n","title":"i18n","text":"<p>i18n \u200b\u662f\u200b internationalization \u200b\u7684\u200b\u7f29\u5199\u200b</p> <p>\u200b\u53ef\u4ee5\u200b\u7528\u200b dfs \u200b\u751f\u6210\u200b\u7f29\u5199\u200b\uff08abbreviation\uff09,\u200b\u53e6\u200b\u4e00\u79cd\u200bdfs\u200b\u5b9e\u73b0\u200b\u662f\u200b</p> <ol> <li>\u200b\u4ece\u524d\u200b\u5f80\u540e\u200b\u653e\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\u8981\u4e48\u200b\u662f\u200b\u6570\u5b57\u200b\u8981\u4e48\u200b\u662f\u200b\u5b57\u6bcd\u200b</li> <li>\u200b\u524d\u200b\u4e00\u4f4d\u200b\u662f\u200b\u6570\u5b57\u200b\u7684\u8bdd\u200b\uff0c\u200b\u672c\u4f4d\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u662f\u200b\u6570\u5b57\u200b</li> <li>\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u5269\u4f59\u200b\u5b57\u6bcd\u200b\u53ef\u200b\u653e\u200b/\u200b\u5df2\u7ecf\u200b\u8d85\u8fc7\u200b\u957f\u5ea6\u200b \u200b\u8fd4\u56de\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u7684\u200b\u65f6\u5019\u200b\u7528\u200b\u5df2\u7ecf\u200b\u653e\u200b\u4e86\u200b\u51e0\u4e2a\u200b\u5b57\u6bcd\u200b\u66f4\u52a0\u200b\u76f4\u89c2\u200b</li> </ol> <pre><code>def generate_abbreviations(word):\n    def dfs(posi, used_char, cur: str, word, anw: list):\n        if posi == len(word) or used_char == len(word):\n            anw.append(cur)\n            return\n\n        dfs(posi+1, used_char+1, cur+word[used_char], word, anw)\n        for i in range(1, len(word)-used_char+1):\n            if posi &gt; 0 and cur[-1].isdigit():\n                continue\n            else:\n                dfs(posi+1, used_char+i, cur+str(i), word, anw)\n\n    anw = []\n    dfs(0, 0, \"\", word, anw)\n    print(anw)\n    return anw\n\n\ndef test():\n    word = \"word\"\n    word_res = ['word', 'wor1', 'wo1d', 'wo2', 'w1rd', 'w1r1', 'w2d','w3', '1ord', '1or1', '1o1d', '1o2', '2rd', '2r1', '3d', '4']\n    iget = generate_abbreviations(word)\n    assert set(iget) == set(word_res)\n</code></pre>"},{"location":"backend/python/#_7","title":"\u6c42\u200b\u6240\u6709\u200b\u7684\u200b\u56de\u200b\u6587\u5b57\u4e32","text":"<p><code>'abcbab' =&gt; [['abcba', 'b'], ['a', 'bcb', 'a', 'b'], ['a', 'b', 'c', 'bab'], ['a', 'b', 'c', 'b', 'a', 'b']]</code></p> <p>\u200b\u4e0d\u662f\u200b\u5f88\u200b\u597d\u200b\u60f3\u200b\uff0c\u200b\u76f4\u63a5\u200b\u6284\u200b\u7b54\u6848\u200b\ud83d\ude2d</p> normalpythonic <pre><code>def palindromic_substrings(s):\n    if not s:\n        return [[]]\n    results = []\n    # for i in range(len(s), 0, -1): \u200b\u4e24\u8005\u200b\u5747\u200b\u53ef\u200b\n    for i in range(1, len(s)+1):\n        sub = s[:i]\n        if sub == sub[::-1]:\n            rightpart = palindromic_substrings(s[i:])\n            for rest in rightpart:\n                results.append([sub] + rest)\n\n    return results\n</code></pre> <pre><code>def palindromic_substrings(s):\n    if not s:\n        yield []\n        # return \u200b\u6709\u6ca1\u6709\u200b\u90fd\u200b\u6b63\u786e\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u987a\u5e8f\u200b\u4e0d\u540c\u200b\n\n    for i in range(1, len(s)+1):\n        substr = s[:i]\n        if substr == substr[::-1]:\n            for right_poss in palindromic_substrings(s[i:]):\n                yield [substr]+right_poss\n\n\nanw = palindromic_substrings(\"ababc\")\nfor i in anw:\n    print(i)\n</code></pre>"},{"location":"backend/python/#gale-shapley","title":"Gale Shapley","text":"<p>\u200b\u7a33\u5b9a\u200b\u5339\u914d\u200b\uff0c\u200b\u7a33\u5b9a\u200b\u5a5a\u59fb\u200b\u3002\u200b\u4e2a\u4eba\u200b\u8ba4\u4e3a\u200b\u5148\u200b\u628a\u200b\u95ee\u9898\u200b\u7406\u89e3\u200b\u6e05\u695a\u200b\u662f\u200b\u6700\u200b\u91cd\u8981\u200b\u7684\u200b</p> <p>\u200b\u5047\u5982\u200b\u6709\u200b\u4e09\u4e2a\u200b\u7537\u751f\u200b\uff0c\u200b\u4e09\u4e2a\u200b\u5973\u751f\u200b\uff0c\u200b\u5927\u5bb6\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u8bc4\u4ef7\u200b\u5217\u8868\u200b\uff0c\u200b\u73b0\u5728\u200b\u4e24\u200b\u4e24\u200b\u914d\u5bf9\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u51fa\u73b0\u200b\u4ee5\u4e0b\u200b\u60c5\u51b5\u200b\uff1a</p> <ul> <li>\u200b\u4e00\u4e2a\u200b\u7537\u751f\u200b\u548c\u200b\u4e00\u4e2a\u200b\u5973\u751f\u200b\u90fd\u200b\u4f1a\u200b\u653e\u5f03\u200b\u5f53\u524d\u200b\u914d\u5076\u200b\uff0c\u200b\u7136\u540e\u200b\u4e24\u8005\u200b\u7ed3\u5408\u200b</li> <li>eg\uff1aman1 love woman1 while man1 live with women2 and woman1 love man1 while woman1 live with man2</li> <li>\u200b\u4e0a\u8fb9\u200b\u7684\u200b\u5339\u914d\u200b\u79f0\u4e3a\u200b\u4e0d\u200b\u7a33\u5b9a\u200b\u7684\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u5b58\u5728\u200b\u201c\u200b\u53cc\u5411\u200b\u5954\u8d74\u200b\u201d\uff0c\u200b\u4e24\u8005\u200b\u4e92\u4e3a\u200b\u66f4\u597d\u200b\u7684\u200b\u9009\u62e9\u200b/\u200b\u4e24\u8005\u200b\u90fd\u200b\u4f1a\u200b\u653e\u5f03\u200b\u5f53\u524d\u200b\u914d\u5076\u200b\u6765\u200b\u5f62\u6210\u200b\u65b0\u200b\u7684\u200b\u4e00\u5bf9\u200b...\uff08\u200b\u8fd9\u79cd\u200b\u610f\u601d\u200b\uff09</li> <li>\u200b\u8fd8\u662f\u200b\u4e0a\u8fb9\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff1aman1 \u200b\u548c\u200b woman1 \u200b\u90fd\u200b\u79bb\u5bb6\u51fa\u8d70\u200b\u627e\u5230\u200b\u771f\u200b\u7231\u200b</li> </ul> <p>\u200b\u518d\u200b\u4e3e\u4e2a\u200b\u4f8b\u5b50\u200b\uff1a</p> <p>\u200b\u7537\u751f\u200b\u4e3a\u200b A B C\uff0c\u200b\u5973\u751f\u200b\u4e3a\u200b X Y Z</p> prefer max min A Y X Z B Z Y X C X Z Y prefer max min X B A C Y C B A Z A C B <p>\u200b\u7a33\u5b9a\u200b\u7684\u200b\u5339\u914d\u200b\u6709\u200b\uff1a\u200b\u7537\u200b\u5728\u200b\u524d\u200b\uff0c\u200b\u5973\u200b\u5728\u200b\u540e\u200b</p> <ul> <li>man get best and woman get third: AY, BZ, CX</li> <li>both get second: AX, BY, CZ</li> <li>man get third and woman get best: AZ, BX, CY </li> </ul> <p>\u200b\u53ef\u4ee5\u200b\u5f97\u51fa\u200b\uff1a\u200b\u7a33\u5b9a\u200b\u5339\u914d\u200b\u53ef\u80fd\u200b\u6709\u200b\u591a\u4e2a\u200b</p> <p>\u200b\u600e\u4e48\u200b\u5f97\u5230\u200b\u7a33\u5b9a\u200b\u5339\u914d\u200b\uff1aGale Shapley \u200b\u7b97\u6cd5\u200b</p> <pre><code># Gale-Shapley\ninitialize each person to be free\nwhile (some man m is free and hasn't proposed to every woman) do\n    w = highest ranked woman in m's list to whom m has not yet proposed\n    if (w is free) then\n       (m, w) become engaged\n    else if (w prefers m to her fiance m') then\n       (m, w) become engaged\n       m' become free\nreturn the set S of engaged pairs\n</code></pre> <p>\u200b\u7136\u540e\u200b\u5c31\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u7b97\u6cd5\u200b\u5176\u5b9e\u200b\u548c\u200b\u9009\u62e9\u200b\u6709\u5173\u200b\uff0c\u200b\u4e0a\u8fb9\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u7537\u751f\u200b\u6709\u200b\u4e3b\u52a8\u51fa\u51fb\u200b\uff0c\u200b\u5973\u751f\u200b\u53ef\u4ee5\u200b\u62d2\u7edd\u200b\u5f53\u524d\u200b\u6216\u200b\u66f4\u65b0\u200b\uff0c\u200b\u4f46\u662f\u200b\u7537\u751f\u200b\u603b\u662f\u200b\u5148\u200b\u83b7\u5f97\u200b\u6700\u5927\u200b\u6ee1\u610f\u200b\u7684\u200b\u7ed3\u679c\u200b\uff08\u200b\u6392\u540d\u200b\u5c3d\u53ef\u80fd\u200b\u9760\u524d\u200b\uff09\uff0c\u200b\u5973\u751f\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u83b7\u5f97\u200b\u6700\u200b\u6ee1\u610f\u200b\u7684\u200b\u7ed3\u679c\u200b\uff08\u200b\u6709\u200b\u53ef\u80fd\u200b\u4eba\u5bb6\u200b\u90ce\u624d\u5973\u8c8c\u200b\uff0c\u200b\u559c\u6b22\u200b\u7684\u200b\u7537\u751f\u200b\u88ab\u200b\u622a\u80e1\u200b\u4e86\u200b\uff09\u3002\u200b\u8c01\u200b\u6d77\u200b\u6295\u200b\u8c01\u200b\u6709\u5229\u200b\ud83e\udd23</p> py code <pre><code>from enum import Enum\n\n\nclass state(Enum):\n    free = 0\n    engage = 1\n    married = 2\n\n\nclass Person:\n    def __init__(self, name, lovelist: list[str]) -&gt; None:\n        self.name = name\n        self.lovelist = lovelist\n        self.state = state.free\n        self.parter = \"\"\n\n    def perfer(self, candi: str):\n        if not self.parter and \\\n                self.lovelist.index(candi) &lt; self.lovelist.index(self.parter):\n            return True\n        else:\n            return False\n\n\ndef GetByName(name: str):\n    return dic[name]\n\n\ndef SetParter(man: Person, woman: Person):\n    man.parter = woman.name\n    woman.parter = man.name\n    woman.state = state.engage\n\n\ndef DelParter(man: Person, woman: Person):\n    man.parter = \"\"\n    woman.parter = \"\"\n\n\ndef Gale_Shapley(persons: list[Person]):\n    for man in persons[:]:\n        for poss_woman in man.lovelist:\n            woman = GetByName(poss_woman)\n            if woman.state == state.free:\n                SetParter(man, woman)\n                persons.remove(man)\n                break\n            elif woman.state == state.engage:\n                if woman.perfer(man.name):\n                    origin_parter = GetByName(woman.parter)\n                    DelParter(origin_parter, woman)\n                    SetParter(man, woman)\n                    persons.remove(man)\n                    persons.add(origin_parter)\n                    break\n\n\ndef Solve(persons: list):\n    copy = persons.copy()\n    Gale_Shapley(persons)\n    for i in copy:\n        print(f\"{i.name}--{i.parter}\")\n\n\nx = Person(\"x\", ['b', 'a', 'c'])\ny = Person(\"y\", ['c', 'b', 'a'])\nz = Person(\"z\", ['a', 'c', 'b'])\n\na = Person(\"a\", ['y', 'x', 'z'])\nb = Person(\"b\", ['z', 'y', 'x'])\nc = Person(\"c\", ['x', 'z', 'y'])\n\n\ndic = {\n    \"a\": a, \"b\": b, \"c\": c,\n    \"x\": x, \"y\": y, \"z\": z\n}\n\npersons_man = [a, b, c]\npersons_woman = [x, y, z]\n\n\nSolve(persons_man)  # ay bz cx \nprint(\"-\"*5)\nSolve(persons_woman)# xb yc za\n</code></pre> <ul> <li>\u200b\u63a8\u8350\u200b:\u200b\u8bba\u6587\u200b\u539f\u6587\u200b\u7ffb\u8bd1\u200b</li> <li>\u200b\u4f2a\u200b\u4ee3\u7801\u200b\u6765\u6e90\u200b</li> <li>wikipedia</li> </ul>"},{"location":"backend/sword/","title":"\u5251\u200b\u6307\u200boffer","text":""},{"location":"backend/sword/#_1","title":"\u6b63\u5219\u8868\u8fbe\u5f0f\u200b\u5339\u914d","text":"<p>\u200b\u7701\u6d41\u7248\u200b\uff1a\u200b\u6211\u200b\u89c9\u5f97\u200b\u4e0d\u7ba1\u200b\u662f\u200b\u9012\u5f52\u200b\u8fd8\u662f\u200b\u52a8\u6001\u200b\u89c4\u5212\u200b\uff0c\u200b\u5173\u952e\u200b\u90fd\u200b\u5728\u4e8e\u200b\u90a3\u200b\u4e24\u4e2a\u200b\u5220\u9664\u200b\u9009\u62e9\u200b\uff0c\u200b\u8bb0\u5fc6\u200b\u5316\u200b\u9012\u5f52\u200b\u548c\u200b\u52a8\u6001\u200b\u89c4\u5212\u200b\u5c31\u662f\u200b\u6c42\u89e3\u200b\u4ece\u524d\u200b\u5f80\u540e\u200b\u8fd8\u662f\u200b\u4ece\u540e\u200b\u5f80\u524d\u200b\u7684\u200b\u533a\u522b\u200b</p> <p>\u200b\u9012\u5f52\u200b</p> <p>\u200b\u9898\u89e3\u200b</p> <ul> <li>\u200b\u5047\u5982\u200b pat \u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u5224\u65ad\u200b txt \u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b</li> <li>\u200b\u5047\u5982\u200b\u4e0a\u8fb9\u200b\u6ca1\u200b\u8fdb\u884c\u200b\u5224\u65ad\u200b\uff0c\u200b\u8bf4\u660e\u200b\u53ef\u4ee5\u200b\u5224\u65ad\u200b\u7b2c\u4e00\u4f4d\u200b\uff0c\u200b\u770b\u200b\u7b2c\u4e00\u4f4d\u200b\u662f\u200b <code>.</code> \u200b\u6216\u8005\u200b\u76f8\u7b49\u200b</li> <li>\u200b\u5982\u679c\u200b\u7b2c\u4e8c\u4f4d\u200b\u662f\u200b <code>*</code> \uff0c\u200b\u770b\u200b\u4e24\u79cd\u200b\u53ef\u80fd\u200b\uff0c\u200b\u5220\u9664\u200b<code>pat\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b+*</code> \uff0c\uff08\u200b\u8fd9\u79cd\u200b\u5c31\u200b\u4e0d\u5728\u4e4e\u200b\u7b2c\u4e00\u4f4d\u200b\u7684\u200b\u662f\u5426\u200b\u6210\u529f\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6ca1\u200b\u53c2\u4e0e\u200b\u5339\u914d\u200b\uff09\uff0c\u200b\u6216\u8005\u200b<code>\u200b\u5220\u9664\u200btxt\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b</code>\uff0c\uff08pat\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u53c2\u4e0e\u200b\u5339\u914d\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u662f\u200b<code>*</code>\u200b\u4f5c\u7528\u200b\u4e86\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\uff09</li> <li>\u200b\u5982\u679c\u200b\u7b2c\u4e8c\u4f4d\u200b\u4e0d\u662f\u200b <code>*</code>\uff0c\u200b\u6b63\u5e38\u200b\u5168\u200b\u79fb\u52a8\u200b\u4e00\u4f4d\u200b</li> </ul> substrupdate to index <pre><code>class Solution {\n    bool isMatch(string txt, string pat) {\n        if (pat.empty())\n            return txt.empty();\n        bool firstMatch = !txt.empty() &amp;&amp; ((txt[0] == pat[0]) || pat[0] == '.');\n        if (pat.length() &gt;= 2 &amp;&amp; pat[1] == '*')\n            return isMatch(txt, pat.substr(2)) || (firstMatch &amp;&amp; isMatch(txt.substr(1), pat));\n        return firstMatch &amp;&amp; isMatch(txt.substr(1), pat.substr(1));\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    bool isMatch(string txt, string pat) {\n        return isMatchCore(txt, pat, 0, 0);\n    }\n    bool isMatchCore(string txt, string pat, int i, int j) {\n        if (j &gt;= pat.size())\n            return i &gt;= txt.size();\n        bool firstMatch = (i &lt; txt.size()) &amp;&amp; (pat[j] == '.' || txt[i] == pat[j]);\n        if (pat.size() - j &gt;= 2 &amp;&amp; pat[j + 1] == '*')\n            return isMatchCore(txt, pat, i, j + 2)\n                || (firstMatch &amp;&amp; isMatchCore(txt, pat, i + 1, j));\n\n        return firstMatch &amp;&amp; isMatchCore(txt, pat, i + 1, j + 1);\n    }\n};\n</code></pre> <p>\u200b\u56e0\u4e3a\u200b\u53ef\u80fd\u200b\u67e5\u200b\u91cd\u590d\u200b\u7684\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8bb0\u5fc6\u200b\u5316\u200b\uff0c\u200b\u53e6\u5916\u200b C++ \u200b\u91cc\u200b\u53ea\u6709\u200b 0 \u200b\u662f\u200b false\uff0c\u200b\u5176\u4ed6\u200b\u6574\u6570\u200b\u90fd\u200b\u662f\u200b true</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; dp;\n    bool isMatch(string txt, string pat) {\n        dp = vector(txt.size() + 10, vector&lt;int&gt;(pat.size() + 10));\n        return isMatchCore(txt, pat, 0, 0);\n    }\n\n    bool isMatchCore(string txt, string pat, int i, int j) {\n        if (j &gt;= pat.size())\n            return i &gt;= txt.size();\n        if (dp[i][j] != 0)\n            return dp[i][j]&gt;0;\n        bool firstMatch = (i &lt; txt.size()) &amp;&amp; (pat[j] == '.' || txt[i] == pat[j]);\n        if (pat.size() - j &gt;= 2 &amp;&amp; pat[j + 1] == '*') {\n            int result =\n                isMatchCore(txt, pat, i, j + 2) || (firstMatch &amp;&amp; isMatchCore(txt, pat, i + 1, j));\n\n            if (result == 1)\n                dp[i][j] = 1;\n            else\n                dp[i][j] = -1;\n            return result;\n        }\n        int result = firstMatch &amp;&amp; isMatchCore(txt, pat, i + 1, j + 1);\n        dp[i + 1][j + 1] = result;\n        return result;\n    }\n};\n</code></pre> <p>\u200b\u52a8\u6001\u200b\u89c4\u5212\u200b</p> <p>\u200b\u660e\u767d\u200b\u4e86\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u5047\u8bbe\u200b i \u200b\u6307\u5411\u200b txt\uff0cj \u200b\u6307\u5411\u200b pat\uff0c <code>dp[i][j]</code> \u200b\u8868\u793a\u200b\u524d\u200b i \uff0c j \u200b\u4e2a\u5b57\u7b26\u200b\uff08\u200b\u95ed\u200b\u533a\u95f4\u200b\uff09</p> <p><code>dp[i][j]=dp[i-1][j-1] if pat[j-1]=='.' or pat[j-1]==txt[i-1]</code>\u200b\u6ca1\u4ec0\u4e48\u200b\u597d\u200b\u8bf4\u200b\u7684\u200b</p> <p>\u200b\u95ee\u9898\u200b\u5c31\u200b\u5728\u200b\u662f\u200b <code>*</code> \u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u770b\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u89e3\u91ca\u200b\u540e\u200b\u6211\u200b\u89c9\u5f97\u200b\u6700\u200b\u5bb9\u6613\u63a5\u53d7\u200b\u7684\u200b\u662f\u200b</p> <ul> <li><code>*</code> \u200b\u4e4b\u524d\u200b\u7684\u200b\u5b57\u7b26\u200b\u5339\u914d\u200b 0 \u200b\u6b21\u200b\uff1a<code>dp[i][j]=dp[i][j-2]</code> eg: txt is a, pat is ab*</li> <li>\u200b\u5339\u914d\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b 1 \u200b\u6b21\u200b\uff1a<ul> <li>\u200b\u53ef\u4ee5\u200b\u662f\u200b\u628a\u200b txt \u200b\u5f53\u524d\u200b\u7684\u200b\u5b57\u7b26\u200b\u5220\u53bb\u200b\uff0c\u200b\u770b\u524d\u200b\u4e00\u4f4d\u200b <code>dp[i][j]=dp[i-1][j]</code> eg: abbbb, ab \u200b\u8f6c\u53d8\u6210\u200b abbb, ab \uff0c\u200b\u7f29\u77ed\u200b\u5b57\u7b26\u4e32\u200b</li> <li>\u200b\u6216\u8005\u200b\u662f\u200b\u628a\u200b\u4e0b\u8fb9\u200b\u7684\u200b <code>\u200b\u5b57\u7b26\u200b+*</code> \u200b\u5220\u9664\u200b\uff0c\u200b\u53d8\u6210\u200b <code>dp[i][j]=dp[i][j-2]</code></li> <li>\u200b\u4e24\u8005\u200b\u6709\u200b\u4e00\u4e2a\u200b\u6210\u529f\u200b\u5c31\u884c\u200b\uff0c\u200b\u6240\u4ee5\u200b\u53d6\u200b\u6216\u200b</li> </ul> </li> </ul> <p>\u200b\u8fd9\u4e2a\u200b\u9898\u200b\u4e0d\u7528\u200b\u201c\u200b\u5f00\u5934\u200b\u52a0\u200b\u7a7a\u5b57\u7b26\u200b\u201d\u200b\u7684\u200b\u6280\u5de7\u200b\u66f4\u597d\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u52a0\u200b\u4e86\u200b\u4e4b\u540e\u200b\u8fd8\u8981\u200b\u505a\u200b\u9884\u5904\u7406\u200b\uff0c\u200b\u6211\u200b\u4e5f\u200b\u6ca1\u200b\u770b\u200b\u660e\u767d\u200b\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u505a\u200b\ud83d\ude25</p> <ul> <li>\u200b\u4e24\u79cd\u200b\u8f6c\u79fb\u200b</li> <li>\u200b\u7f29\u77ed\u200b\u5b57\u7b26\u4e32\u200b</li> </ul> dp\u200b\u524d\u8fb9\u200b\u4e0d\u200b\u52a0\u200b\u7a7a\u5b57\u7b26\u200bdp\u200b\u524d\u8fb9\u200b\u52a0\u200b\u7a7a\u5b57\u7b26\u200b <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; dp;\n    bool isMatch(string txt, string pat) {\n        int txtSize = txt.size();\n        int patSize = pat.size();\n        dp = vector&lt;vector&lt;int&gt;&gt;(txtSize + 10, vector&lt;int&gt;(patSize + 10, 0));\n\n        dp[0][0] = 1;\n\n        for (int i = 0; i &lt;= txtSize; i++) {\n            for (int j = 0; j &lt;= patSize; j++) {\n                if (i &gt;= 1 &amp;&amp; j &gt;= 1 &amp;&amp; (pat[j - 1] == '.' || pat[j - 1] == txt[i - 1])) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n\n                else if (j &gt;= 1 &amp;&amp; pat[j - 1] == '*') {\n                    if (i &gt;= 1 &amp;&amp; j &gt;= 2 &amp;&amp; (pat[j - 2] == '.' || pat[j - 2] == txt[i - 1]))\n                        dp[i][j] = dp[i - 1][j] || dp[i][j - 2];\n                    else if (j &gt;= 2)\n                        dp[i][j] = dp[i][j - 2];\n                }\n            }\n        }\n\n        return dp[txtSize][patSize];\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    bool isMatch(string txt, string pat) {\n        txt = \" \" + txt;\n        pat = \" \" + pat;\n        int txtSize = txt.size();\n        int patSize = pat.size();\n        vector&lt;vector&lt;bool&gt;&gt; dp(txtSize, vector&lt;bool&gt;(patSize, false));\n        dp[0][0] = true;\n        for (int j = 1; j &lt; patSize; j++) {\n            if (pat[j] == '*')\n                dp[0][j] = dp[0][j - 2]; // \u200b\u6309\u200b\u9898\u610f\u200bp\u200b\u7b2c\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u4e3a\u200b'*'\u200b\u6240\u4ee5\u200b\u4e0d\u5fc5\u200b\u62c5\u5fc3\u200bj\u200b\u8d8a\u754c\u200b\n        }\n        for (int i = 1; i &lt; txtSize; i++) {\n            for (int j = 1; j &lt; patSize; j++) {\n                if (txt[i] == pat[j] || pat[j] == '.')\n                    dp[i][j] = dp[i - 1][j - 1];\n                else if (pat[j] == '*') {\n                    if (txt[i] == pat[j - 1] || pat[j - 1] == '.') {\n                        dp[i][j] = dp[i][j - 2] || dp[i - 1][j];\n\n                    }\n                    else {\n                        dp[i][j] = dp[i][j - 2];\n                    }\n                }\n            }\n        }\n        return dp[txtSize - 1][patSize - 1];\n    }\n};\n</code></pre> out of date <p>\u200b\u8fd9\u4e2a\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b\u662f\u200b\u4e0d\u597d\u200b\u7406\u89e3\u200b\u7684\u200b\uff0c\u200b\u89c1\u200b\u5b83\u200b\u7684\u200b\u8bc4\u8bba\u200b\u533a\u200b\u7b2c\u4e00\u6761\u200b</p> <pre><code>class Solution {\npublic:\n    bool isMatch(string str, string pattern) {\n        vector&lt;vector&lt;bool&gt;&gt; dp(str.length() + 1, vector(pattern.size() + 1, false));\n        dp[0][0] = true;\n        for (int i = 0; i &lt;= str.length(); i++)\n            for (int j = 1; j &lt;= pattern.size(); j++) {\n                if ((i &gt; 0) &amp;&amp;\n                    (pattern[j - 1] == '.' ||\n                    pattern[j - 1] != '*' &amp;&amp; pattern[j - 1] == str[i - 1]))\n                    dp[i][j] = dp[i - 1][j - 1];\n                else if (pattern[j - 1] == '*') {\n                    if (j &gt; 1 &amp;&amp; dp[i][j - 2] == true)\n                        dp[i][j] = true;\n                    else if ((i &gt; 0 &amp;&amp; j &gt; 1) &amp;&amp;\n                            (pattern[j - 2] == str[i - 1] || pattern[j - 2] == '.')\n                            &amp;&amp; dp[i - 1][j] == true)\n                        dp[i][j] = true;\n                }\n            }\n        return dp[str.length()][pattern.size()];\n\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_2","title":"\u4e8c\u53c9\u6811\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u8282\u70b9","text":"<ul> <li>\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u5de6\u6839\u53f3\u200b</li> <li>\u200b\u5982\u679c\u200b\u4e0d\u662f\u200b\u53f6\u200b\u8282\u70b9\u200b\uff0c\u200b\u8981\u6c42\u200b\u7684\u200b\u70b9\u200b\u76f8\u5f53\u4e8e\u200b\u5148\u200b\u5f80\u53f3\u200b\u4e00\u6b65\u200b\uff0c\u200b\u518d\u200b\u4e00\u76f4\u200b\u5f80\u200b\u5de6\u200b\u8d70\u200b\u5230\u5934\u200b,\u200b\u662f\u200b\u4e00\u4e2a\u200b &gt; \u200b\u7684\u200b\u5f62\u72b6\u200b</li> <li>\u200b\u5982\u679c\u200b\u662f\u200b\u53f6\u200b\u8282\u70b9\u200bA\uff0c\u200b\u53ef\u4ee5\u200b\u5148\u200b\u8003\u8651\u200b\u5b83\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200bB\u200b\u600e\u4e48\u200b\u5230\u200b\u7684\u200b\u5b83\u200b\u672c\u8eab\u200b\uff0c<ul> <li>\u200b\u5c31\u662f\u200bB\u200b\u5148\u5f80\u200b\u5de6\u200b\u4e00\u6b65\u200b\uff0c\u200b\u518d\u200b\u5f80\u53f3\u200b\u8d70\u200b\u5230\u5934\u200b\u5230\u8fbe\u200bA\uff0c\u200b\u5f62\u6210\u200b\u4e00\u4e2a\u200b &lt; \u200b\u7684\u200b\u5f62\u72b6\u200b</li> <li>\u200b\u7136\u540e\u200b\u53d1\u73b0\u200b\u62d0\u89d2\u5904\u200b\u5bb9\u6613\u200b\u6c42\u200b\u51fa\u6765\u200b <code>p-&gt;father-&gt;left==p</code></li> <li>\u200b\u5982\u679c\u8bf4\u200b\u6ca1\u6709\u200b\u7236\u200b\u8282\u70b9\u200b\uff0c\u200b\u8bf4\u660e\u200b\u6ca1\u6709\u200b\u8981\u6c42\u200b\u7684\u200b\u7b54\u6848\u200b\uff0c\u200b\u8fd4\u56de\u200b <code>nullptr</code></li> </ul> </li> </ul> Slove <pre><code>class Solution {\npublic:\n    TreeNode *inorderSuccessor(TreeNode *p) {\n        if (p-&gt;right != nullptr) {\n            p = p-&gt;right;\n            while (p-&gt;left != nullptr)\n                p = p-&gt;left;\n            return p;\n        }\n        else {\n            while (p-&gt;father != nullptr &amp;&amp; p-&gt;father-&gt;left != p)\n                p = p-&gt;father;\n            if (p-&gt;father == nullptr)\n                return nullptr;\n            else\n                return p-&gt;father;\n        }\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_3","title":"\u65cb\u8f6c\u200b\u6570\u7ec4\u200b\u7684\u200b\u6700\u5c0f\u200b\u6570\u5b57","text":"<ul> <li>\u200b\u4ece\u540e\u200b\u5f80\u524d\u200b\u628a\u200b\u548c\u200b <code>nums[0]</code> \u200b\u76f8\u540c\u200b\u7684\u200b\u5220\u9664\u200b</li> <li>\u200b\u7279\u5224\u200b\u4e00\u4e0b\u200b\uff1a\u200b\u5982\u679c\u200b\u662f\u200b\u5b8c\u5168\u200b\u5347\u5e8f\u200b\u5c31\u200b\u8fd4\u56de\u200b <code>nums[0]</code></li> <li>\u200b\u8fdb\u884c\u200b\u4e8c\u5206\u200b\u67e5\u627e\u200b \u200b\u5c0f\u4e8e\u200b <code>nums[0]</code> \u200b\u7684\u200b\u5de6\u200b\u7aef\u70b9\u200b</li> </ul> <p>\u200b\u8f85\u52a9\u200b\u9898\u89e3\u200b</p> Slove <pre><code>class Solution {\npublic:\n    int findMin(vector&lt;int&gt;&amp; nums) {\n        if(nums.size()==0) return -1;\n        int n=nums.size()-1;\n        while (n&gt;0&amp;&amp;nums[0]==nums[n]) n--;\n        if(nums[n]&gt;=nums[0]) return nums[0];\n\n        int l=0,r=n;\n        while (l&lt;r){\n            int mid=l+r&gt;&gt;1;\n            if(nums[mid]&lt;nums[0]) r=mid;\n            else l=mid+1;\n        }\n        return nums[l];\n    }\n};\n</code></pre> <p>\u200b\u4e3e\u4e00\u53cd\u4e09\u200b\ud83d\ude0b</p> <p>\u200b\u8fd9\u4e2a\u200b\u9898\u200b\u505a\u200b\u5b8c\u200b\u4e86\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c1d\u8bd5\u200b\u641c\u7d22\u200b\u65cb\u8f6c\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b</p> <p>2024/3/8 \u200b\u611f\u89c9\u200b\u538b\u529b\u200b\u6bd4\u8f83\u200b\u5927\u200b\u7684\u200b\u65f6\u5019\u200b\u53ea\u4f1a\u200b\u80cc\u200b\u677f\u5b50\u200b\u4e86\u200b\ud83d\ude25</p> <pre><code>class Solution {\npublic:\n    void test() {\n        vector&lt;int&gt; te = {4, 5, 6, 7, 0, 1, 2};\n        cout &lt;&lt; search(te, 0);\n    }\n\n    int binsearchLeftBottom(vector&lt;int&gt; &amp;nums, int target, int lo, int hi) {\n        int left = lo, right = hi;\n        while (left &lt; right) {\n            int mid = left + right &gt;&gt; 1;\n            if (nums[mid] &gt;= target) right = mid;\n            else left = mid + 1;\n        }\n        return left;\n    }\n\n    int binsearchRightBottom(vector&lt;int&gt; &amp;nums, int target, int lo, int hi) {\n        int left = lo, right = hi;\n        while (left &lt; right) {\n            int mid = left + right + 1 &gt;&gt; 1;\n            if (nums[mid] &gt;= target) left = mid;\n            else right = mid - 1;\n        }\n        return left;\n    }\n\n    int search(vector&lt;int&gt; &amp;nums, int target) {\n        if (nums[nums.size() - 1] &gt;= nums[0]) {\n            int index=binsearchLeftBottom(nums, target, 0, nums.size()-1);\n            if(nums[index]!=target)\n                return -1;\n            else return index;\n        }\n        int leftMax = binsearchRightBottom(nums, nums[0], 0, nums.size() - 1);\n        if (target == nums[leftMax])return leftMax;\n        else if (target &gt;= nums[0]) {\n            int index = binsearchLeftBottom(nums, target, 0, leftMax);\n            if (nums[index] != target) return -1;\n            else return index;\n        }\n        else {\n            int index = binsearchLeftBottom(nums, target, leftMax + 1, nums.size() - 1);\n            if (nums[index] != target) return -1;\n            else return index;\n        }\n\n    }\n};\n</code></pre> <ol> <li>\u200b\u5148\u627e\u200b\u4ece\u200b <code>nums[0]</code> \u200b\u5347\u5e8f\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u4f4d\u200b upId</li> <li>\u200b\u5982\u679c\u200b <code>target&gt;=num[0]</code> \u200b\u4ece\u200b <code>[0, upId]</code> \u200b\u4e8c\u5206\u200b\u627e\u200b\uff0c\u200b\u5426\u5219\u200b\u4ece\u200b <code>[upId+1, len-1]</code> \u200b\u627e\u200b</li> <li>trick\uff1a\u200b\u4e8c\u5206\u200b\u67e5\u627e\u200b\u65f6\u200b\u5f00\u59cb\u200b\u5c31\u200b\u8d8a\u754c\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b -1</li> </ol> <pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt; &amp; nums, int target) {\n        // \u200b\u627e\u200b\u4ece\u200bnums[0]\u200b\u5347\u5e8f\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u4f4d\u200b\u4e0b\u6807\u200b\n        int hiBound = getUpperId(nums);\n\n        if (nums[0] &lt;= target)\n            return binsearch(nums, target, 0, hiBound);\n        else\n            return binsearch(nums, target, hiBound + 1, nums.size() - 1);\n    }\n\n    int getUpperId(vector&lt;int&gt; nums) {\n        int lo = 0, hi = nums.size() - 1;\n        int tail = nums[0];\n        while (lo &lt; hi) {\n            int mid = lo + hi + 1 &gt;&gt; 1;\n            if (nums[mid] &gt;= tail)\n                lo = mid;\n            else\n                hi = mid - 1;\n        }\n        return lo;\n    }\n\n    int binsearch(vector&lt;int&gt; nums, int target, int begin, int end) {\n\n        if (begin &gt;= nums.size())\n            return -1;\n\n        while (begin &lt; end) {\n            int mid = begin + end &gt;&gt; 1;\n            if (nums[mid] &gt;= target)\n                end = mid;\n            else\n                begin = mid + 1;\n        }\n        if (nums[begin] != target)\n            return -1;\n\n        return begin;\n    }\n};\n</code></pre> old version <ul> <li>\u200b\u5148\u7279\u5224\u200b\u4e00\u4e0b\u200b\u662f\u4e0d\u662f\u200b\u5b8c\u5168\u200b\u5347\u5e8f\u200b\uff0c\u200b\u51b3\u5b9a\u200b\u662f\u4e0d\u662f\u200b\u76f4\u63a5\u200b\u4e8c\u5206\u200b</li> <li>\u200b\u548c\u200b\u4e0a\u200b\u4e00\u9898\u200b\u4e00\u6837\u200b\uff0c\u200b\u5148\u200b\u627e\u5230\u200b\u6700\u5c0f\u503c\u200b</li> <li>\u200b\u5982\u679c\u200b\u76ee\u6807\u503c\u200b\u5728\u200b\u6700\u5c0f\u503c\u200b\u548c\u200b\u7ed3\u5c3e\u200b\u4e2d\u95f4\u200b\u5c31\u200b\u4e8c\u5206\u200b\uff0c\u200b\u53cd\u4e4b\u200b\u5728\u200b\u53e6\u4e00\u534a\u200b\u4e8c\u5206\u200b</li> </ul> <pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt; &amp;nums, int target) {\n\n        if (nums[nums.size() - 1] &gt; nums[0])\n            return bins(nums, 0, nums.size() - 1, target);\n\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = l + r &gt;&gt; 1;\n            if (nums[mid] &lt; nums[0]) r = mid;\n            else l = mid + 1;\n        }\n        cout &lt;&lt; nums[l] &lt;&lt; endl;\n\n        if (target &gt;= nums[l] &amp;&amp; target &lt; nums[0])\n            return bins(nums, l, nums.size() - 1, target);\n        else\n            return bins(nums, 0, l - 1, target);\n\n    }\n\n    int bins(vector&lt;int&gt; &amp;nums, int l, int r, int target) {\n        while (l &lt; r) {\n            int mid = l + r &gt;&gt; 1;\n            if (nums[mid] &gt;= target)\n                r = mid;\n            else l = mid + 1;\n        }\n        if (nums[l] != target) return -1;\n        else return l;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_4","title":"\u77e9\u9635\u200b\u4e2d\u200b\u7684\u200b\u8def\u5f84","text":"<p>\u200b\u4e3a\u4ec0\u4e48\u200b\u8fd9\u4e2a\u200b\u4e0d\u80fd\u200b\u8c03\u8fc7\u6765\u200b</p> <pre><code>//correct\nif (matrix[x][y] != str[po]) return false;\nif (po == str.size() - 1) return true;\n// wrong\nif (po == str.size()) return true;\nif (matrix[x][y] != str[po]) return false;  \n</code></pre> <p>\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b <code>str=a martix=[a]</code></p> <p>\u200b\u7b2c\u4e00\u6b65\u200b\u6210\u529f\u200b\u4e86\u200b\uff0c\u200b\u4f46\u662f\u200b\u5728\u200b\u7ee7\u7eed\u200bdfs\u200b\u7684\u200b\u65f6\u5019\u200b\u662f\u200b\u4e0d\u80fd\u200b\u7ee7\u7eed\u200bdfs\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200b <code>if (!(cx &gt;= 0 &amp;&amp; cx &lt; n &amp;&amp; cy &gt;= 0 &amp;&amp; cy &lt; m)) continue;</code> \u200b\u4e0b\u6807\u200b\u5168\u90fd\u200b\u8d8a\u754c\u200b\uff0c\u200b\u8fdb\u5165\u200b <code>continue</code> ,\u200b\u6ca1\u6cd5\u200b\u8fdb\u5165\u200b\u9884\u8ba1\u200b\u7684\u200b <code>dfs(1)</code></p> Slove <pre><code>class Solution {\npublic:\n    bool hasPath(vector&lt;vector&lt;char&gt;&gt; &amp;matrix, string &amp;str) {\n        if (matrix.size() == 0) return false;\n        bool ff = false;\n\n        int n = matrix.size();\n        int m = matrix[0].size();\n\n        for (int i = 0; i &lt; n; ++i) {\n            for (int j = 0; j &lt; m; ++j) {\n                if (dfs(i, j, 0, str, matrix)) {\n                    ff = true;\n                    break;\n                }\n            }\n        }\n        if (ff) return true;\n        else return false;\n\n    }\n\n    bool dfs(int x, int y, int po, string &amp;str, vector&lt;vector&lt;char&gt;&gt; &amp;matrix) {\n        if (matrix[x][y] != str[po]) return false;\n        if (po == str.size() - 1) return true;\n\n        int dx[4] = {-1, 1, 0, 0};\n        int dy[4] = {0, 0, -1, 1};\n        int n = matrix.size();\n        int m = matrix[0].size();\n\n        char tem = matrix[x][y];\n        matrix[x][y] = '*';\n        for (int i = 0; i &lt; 4; ++i) {\n            int cx = x + dx[i];\n            int cy = y + dy[i];\n            if (!(cx &gt;= 0 &amp;&amp; cx &lt; n &amp;&amp; cy &gt;= 0 &amp;&amp; cy &lt; m)) continue;\n            if (dfs(cx, cy, po + 1, str, matrix))\n                return true;\n        }\n        matrix[x][y] = tem;\n        return false;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#1","title":"\u4e8c\u8fdb\u5236\u200b\u4e2d\u200b1\u200b\u7684\u200b\u4e2a\u6570","text":"<ol> <li>\u200b\u5faa\u73af\u200b32\u200b\u6b21\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u5224\u65ad\u200b\u6700\u4f4e\u200b\u4f4d\u200b\u662f\u4e0d\u662f\u200b1\uff0c\u200b\u518d\u200b\u53f3\u79fb\u200b\u4e00\u4f4d\u200b</li> <li>lowbit\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6c42\u200b\u4e00\u6b21\u200b lowbit ,anw++\uff1b \u200b\u6570\u5b57\u200b-lowbit</li> </ol> \u200b\u5faa\u73af\u200b32\u200b\u6b21\u200blowbit <pre><code>class Solution {\npublic:\nint NumberOf1(int n) {\n\n    int anw=0;\n\n    for(int i=0;i&lt;32;i++){\n        if(n&amp;1) anw++;\n        n&gt;&gt;=1;\n    }\n    return anw;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nint NumberOf1(int n) {\n    int anw=0;\n    while(n!=0){\n        n=n-(n&amp;-n); anw++;\n    }\n    return anw;\n}\n};\n</code></pre>"},{"location":"backend/sword/#_5","title":"\u5220\u9664\u200b\u94fe\u8868\u200b\u4e2d\u200b\u91cd\u590d\u200b\u7684\u200b\u8282\u70b9","text":"<ul> <li>\u200b\u6211\u200b\u7406\u89e3\u200b\u6b64\u9898\u200b\u5173\u952e\u5728\u4e8e\u200b\u91cd\u590d\u200b\u6570\u5b57\u200b\u533a\u95f4\u200b\u8d77\u70b9\u200b\u7684\u200b\u524d\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\uff0c\u200b\u5982\u679c\u200b\u627e\u200b\u533a\u95f4\u200b\u7684\u200b\u8d77\u70b9\u200b\uff0c\u200b\u4e0d\u200b\u65b9\u4fbf\u200b\u4fee\u6539\u200b\u533a\u95f4\u200b\u8d77\u70b9\u200b\u524d\u200b\u4e00\u4e2a\u200b\u7684\u200b\u6307\u5411\u200b</li> <li>\u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u200b\u5220\u9664\u200b\u5f00\u59cb\u200b\u5c31\u200b\u6709\u200b\u76f8\u540c\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5728\u200b\u5934\u200b\u8282\u70b9\u200b\u524d\u5f00\u200b\u4e00\u4e2a\u200b\u5047\u200b\u7684\u200b\u8282\u70b9\u200b <code>vir</code></li> <li>p\u200b\u6307\u5411\u200bvir\uff0c\u200b\u5f53\u200bp\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u503c\u200b\u662f\u200b\u91cd\u590d\u200b\u7684\u200b\u4e00\u6bb5\u200b <code>[p-&gt;next,lat]</code> \uff0clat\u200b\u524d\u8fdb\u200b<ul> <li>\u200b\u5982\u679c\u200b\u91cd\u590d\u200b\uff0c <code>p-&gt;next=lat-&gt;next</code> ;\u200b\u4f46\u662f\u200b\u4e0d\u80fd\u200b\u4fdd\u8bc1\u200bp\u200b\u76f4\u63a5\u200b\u8fdb\u5165\u200b <code>p-&gt;next</code> \u200b\u540e\u200b\u4e0d\u200b\u91cd\u590d\u200b\u3002<ul> <li>\u200b\u53cd\u4f8b\u200b\uff1a <code>1, 2, 3, 3, 4, 4, 5</code></li> </ul> </li> <li>\u200b\u4e0d\u200b\u91cd\u590d\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u65f6\u5019\u200b\u5df2\u7ecf\u200b\u4fdd\u8bc1\u200bp\uff0cp\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\uff0cp\u200b\u7684\u200b\u4e0b\u200b\u7b2c\u4e8c\u4e2a\u200b\u90fd\u200b\u4e0d\u662f\u200b\u91cd\u590d\u200b\uff0c\u200b\u653e\u5fc3\u5927\u80c6\u200b\u7684\u200b\u5f80\u200b\u4e0b\u200b\u8fde\u63a5\u200b\ud83e\udd70</li> </ul> </li> </ul> Slove <pre><code>class Solution {\npublic:\n    ListNode *deleteDuplication(ListNode *head) {\n        ListNode *vir = new ListNode(-1);\n        vir-&gt;next = head;\n\n        ListNode *p = vir;\n\n        while (p-&gt;next){\n            ListNode* lat=p-&gt;next;\n            while (lat-&gt;next&amp;&amp;lat-&gt;next-&gt;val==p-&gt;next-&gt;val)\n                lat=lat-&gt;next;\n            if(p-&gt;next==lat){\n                p-&gt;next=lat;\n                p=p-&gt;next;\n            }\n            else{\n                p-&gt;next=lat-&gt;next;\n            }\n        }\n        return vir-&gt;next;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_6","title":"\u8c03\u6574\u200b\u6570\u7ec4\u200b\u987a\u5e8f\u200b\u4f7f\u200b\u5947\u6570\u200b\u4f4d\u4e8e\u200b\u5076\u6570\u200b\u524d\u9762","text":"<ul> <li>\u200b\u53cc\u200b\u6307\u9488\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u4ece\u524d\u200b\u5f80\u540e\u200b\u627e\u200b\u5076\u6570\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u4ece\u540e\u200b\u5f80\u524d\u200b\u627e\u200b\u5947\u6570\u200b\uff0c\u200b\u4e0d\u200b\u91cd\u590d\u200b\u5c31\u200b\u4ea4\u6362\u200b\uff0c\u200b\u91cd\u590d\u200b\u5c31\u200b\u9000\u51fa\u200b</li> <li>\u200b\u8fd8\u200b\u5c1d\u8bd5\u200b\u7528\u200b\u5f52\u5e76\u200b\u53bb\u6c42\u200b\uff0c\u200b\u4f46\u662f\u200bTLE\u200b\u4e86\u200b\uff0c\u200b\u539f\u7406\u200b\u5e94\u8be5\u200b\u662f\u200b\u5bf9\u200b\u7684\u200b,\u200b\u8fd8\u200b\u80fd\u200b\u4fdd\u8bc1\u200b\u76f8\u5bf9\u200b\u987a\u5e8f\u200b<ul> <li>\u200b\u628a\u200b\u5de6\u200b\u533a\u95f4\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u5076\u6570\u200b\u548c\u200b\u53f3\u200b\u533a\u95f4\u200b\u7684\u200b\u5947\u6570\u200b\u8fdb\u884c\u200b\u4e92\u6362\u200b</li> </ul> </li> </ul> \u200b\u53cc\u200b\u6307\u9488\u200b\uff0c\u200b\u5f52\u5e76\u200b <pre><code>class Solution {\npublic:\n    void reOrderArray(vector&lt;int&gt; &amp;array) {\n        if(array.size()==0) return;\n        int l = 0, r = array.size() - 1;\n        while(l&lt;r){\n        while (l &lt; r &amp;&amp; array[l] % 2 !=0) l++;\n        while (l&lt;r&amp;&amp;array[r]%2==0) r--;\n        if(l==r) return;\n        else swap(array[l],array[r]);}\n    }\n\n    vector&lt;int&gt; mergesort(vector&lt;int&gt; &amp;array, int l, int r) {\n        if (l &gt;= r) return array;\n        int mid = l + r &gt;&gt; 1;\n        mergesort(array, 0, mid);\n        mergesort(array, mid + 1, r);\n\n        int i = mid, j = mid + 1;\n        vector&lt;int&gt; tem;\n\n        while (i &gt;= 0 &amp;&amp; j &lt;= r &amp;&amp; array[i] % 2 == 0 &amp;&amp; array[j] % 2 != 0)\n            swap(array[i--], array[j--]);\n        return array;\n\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_7","title":"\u53cd\u8f6c\u200b\u94fe\u8868","text":"<p>\u200b\u8001\u751f\u5e38\u8c08\u200b\u4e86\u200b\uff0c\u200b\u521a\u5b66\u200b\u94fe\u8868\u200b\u7684\u200b\u65f6\u5019\u200b\u53d7\u4e0d\u4e86\u200b\u76f4\u63a5\u200b\u6295\u964d\u200b\ud83d\ude30\u3002\u200b\u529b\u6263\u200b\u7684\u200b\u9012\u5f52\u200b\u611f\u89c9\u200b\u4e0d\u662f\u200b\u4e00\u4e0b\u200b\u5c31\u200b\u7406\u89e3\u200b\u4e86\u200b\uff0c\u200b\u6211\u200b\u8fd9\u4e2a\u200b\u5e94\u8be5\u200b\u597d\u200b\u4e00\u4e9b\u200b</p> \u200b\u8fed\u4ee3\u200b\u9012\u5f52\u200b <pre><code>class Solution {\n    public:\n    ListNode* reverseList(ListNode* head) {\n\n        if(head== nullptr) return head;\n        ListNode* pre= nullptr;\n        while (head!= nullptr){\n            ListNode*lat=head-&gt;next;\n            head-&gt;next=pre;\n            pre=head;\n            head=lat;\n        }\n        return pre;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    ListNode *reverseList(ListNode *head) {\n\n        if (head == nullptr) return head;\n        return rev(head, nullptr);\n    }\n\n    ListNode *rev(ListNode *head, ListNode *pre) {\n        if (head == nullptr) return pre;\n\n        auto tem = head-&gt;next;\n        head-&gt;next = pre;\n        //\u200b\u5148\u200b\u4fee\u6539\u200b\u5f53\u524d\u200b\u7684\u200bnext\uff0c\u200b\u518d\u200b\u9012\u5f52\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\n        auto anw = rev(tem, head);\n        return anw;\n\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_8","title":"\u6811\u200b\u7684\u200b\u5b50\u7ed3\u6784","text":"<p>\u200b\u60f3\u200b\u51fa\u6765\u200b\u4e00\u90e8\u5206\u200b\ud83d\ude30</p> Slove <pre><code>class Solution {\npublic:\n    bool hasSubtree(TreeNode *pRoot1, TreeNode *pRoot2) {\n        if (pRoot2 == nullptr || pRoot1 == nullptr) return false;\n        if (check(pRoot1, pRoot2))\n            return true;\n        return hasSubtree(pRoot1-&gt;left, pRoot2) || hasSubtree(pRoot1-&gt;right, pRoot2);\n        //1--p1,p2\u200b\u4e3a\u6839\u200b\u5c31\u200b\u76f8\u540c\u200b\n        //2--p1\u200b\u7684\u200b\u5de6\u5b50\u200b\u6811\u91cc\u200b\u548c\u200bp2\u200b\u76f8\u540c\u200b\n        //3--p1\u200b\u7684\u200b\u53f3\u5b50\u200b\u6811\u91cc\u200b\u548c\u200bp2\u200b\u76f8\u540c\u200b\n    }\n\n    bool check(TreeNode *p1, TreeNode *p2) {\n        if (p2 == nullptr) return true;//\u200b\u6761\u4ef6\u200b\u6210\u7acb\u200b\n        if (p1 == nullptr) return false;//2\u200b\u7a7a\u200b1\u200b\u4e0d\u7a7a\u200b\n        if (p1-&gt;val != p2-&gt;val) return false;//12\u200b\u90fd\u200b\u4e0d\u200b\u7a7a\u4e14\u200b\u503c\u200b\u4e0d\u540c\u200b\n        return check(p1-&gt;left, p2-&gt;left) &amp;&amp; check(p1-&gt;right, p2-&gt;right);\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_9","title":"\u5bf9\u79f0\u200b\u7684\u200b\u4e8c\u53c9\u6811","text":"<p>\u200b\u76f4\u63a5\u200b\u770b\u200b\u4ee3\u7801\u200b\u66f4\u597d\u200b\u7406\u89e3\u200b</p> <ol> <li>\u200b\u9012\u5f52\u200b\u68c0\u67e5\u200b\u4e24\u4e2a\u200b\u8282\u70b9\u200ba,b\u200b\u7684\u200b\u503c\u200b\uff0ca\u200b\u7684\u200b\u5de6\u5b50\u200b\u6811\u200b\u548c\u200bb\u200b\u7684\u200b\u53f3\u5b50\u200b\u6811\u200b\uff0ca\u200b\u7684\u200b\u53f3\u5b50\u200b\u6811\u200b\u548c\u200bb\u200b\u7684\u200b\u5de6\u5b50\u200b\u6811\u200b\u662f\u5426\u200b\u76f8\u540c\u200b \ud83d\udc4d\ud83d\udc4d\ud83d\udc4d</li> <li>bfs a,b\u200b\u7684\u200b\u503c\u200b\uff0ca\u200b\u7684\u200b\u5de6\u5b50\u200b\u6811\u200b\u548c\u200bb\u200b\u7684\u200b\u53f3\u5b50\u200b\u6811\u200b\uff0ca\u200b\u7684\u200b\u53f3\u5b50\u200b\u6811\u200b\u548c\u200bb\u200b\u7684\u200b\u5de6\u5b50\u200b\u6811\u200b\u662f\u5426\u200b\u76f8\u540c\u200b \ud83d\udc4d\ud83d\udc4d</li> <li>bfs \u200b\u628a\u200b\u4e0b\u200b\u4e00\u5c42\u200b\u7684\u200b\u503c\u200b\u5168\u5b58\u200b\u8d77\u6765\u200b\u770b\u200b\u662f\u4e0d\u662f\u200b\u5bf9\u79f0\u200b \ud83d\udc4d</li> </ol> \u200b\u9012\u5f52\u200bbfs\u200b\u5de6\u53f3\u200bbfs\u200b\u5168\u5b58\u200b <pre><code>class Solution {\npublic:\n    bool isSymmetric(TreeNode *root) {\n\n        if (root == nullptr) return true;\n        return dfs(root-&gt;left, root-&gt;right);\n    }\n\n    bool dfs(TreeNode *l1, TreeNode *l2) {\n        if (l1 == nullptr || l2 == nullptr)\n            return l1 == nullptr &amp;&amp; l2 == nullptr;\n        //\u200b\u975e\u5e38\u200b\u7684\u200b\u7cbe\u5999\u200b\u554a\u200b\n        return l1-&gt;val == l2-&gt;val &amp;&amp; dfs(l1-&gt;left, l2-&gt;right)\n            &amp;&amp; dfs(l1-&gt;right, l2-&gt;left);\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    bool isSymmetric(TreeNode *root) {\n        if (root == nullptr) return true;\n        return bfs(root);\n    }\n\n    bool bfs(TreeNode *root) {\n        queue&lt;TreeNode *&gt; qu;\n        qu.push(root-&gt;left);\n        qu.push(root-&gt;right);\n        while (qu.size()) {\n            TreeNode *left = qu.front();\n            qu.pop();\n            TreeNode *right = qu.front();\n            qu.pop();\n            if (left == nullptr &amp;&amp; right == nullptr)\n                continue;\n            if (left == nullptr &amp;&amp; right != nullptr ||\n                left != nullptr &amp;&amp; right == nullptr ||\n                left-&gt;val != right-&gt;val)\n                return false;\n\n            qu.push(left-&gt;left);\n            qu.push(right-&gt;right);\n            qu.push(left-&gt;right);\n            qu.push(right-&gt;left);\n        }\n        return true;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    bool isSymmetric(TreeNode *root) {\n        if (root == nullptr) return true;\n        return bfs(root);\n    }\n\n    bool bfs(TreeNode *root) {\n        queue&lt;TreeNode *&gt; qu;\n        qu.push(root);\n        while (qu.size()) {\n            vector&lt;TreeNode *&gt; newqu;\n            while (qu.size()) {\n                auto tem = qu.front();\n                qu.pop();\n                if (tem == nullptr) continue;\n                newqu.push_back(tem-&gt;left);\n                newqu.push_back(tem-&gt;right);\n            }\n\n            for (int i = 0, j = newqu.size() - 1; i &lt; j;) {\n\n                if (newqu[i] == nullptr &amp;&amp; newqu[j] != nullptr\n                    || newqu[i] != nullptr &amp;&amp; newqu[j] == nullptr)\n                    return false;\n                if(newqu[i]== nullptr&amp;&amp;newqu[j]== nullptr) \n                {i++,j--;continue;}\n                if (newqu[i]-&gt;val == newqu[j]-&gt;val) i++, j--;\n                else return false;\n            }\n\n            for (auto x: newqu) {\n                qu.push(x);\n            }\n\n        }\n\n\n        return true;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_10","title":"\u6808\u200b\u7684\u200b\u538b\u5165\u200b\u3001\u200b\u5f39\u200b\u51fa\u200b\u5e8f\u5217","text":"<p>\u200b\u9898\u89e3\u200b</p> slove <pre><code>class Solution {\npublic:\n    bool isPopOrder(vector&lt;int&gt; pushV,vector&lt;int&gt; popV) {\n        if(pushV.size()!=popV.size()) return false; //\u200b\u4e24\u4e2a\u200b\u5e8f\u5217\u200b\u957f\u5ea6\u200b\u4e0d\u200b\u7b49\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200bfalse\n        int k=0;\n        stack&lt;int&gt;st;\n        for (int i = 0; i &lt; popV.size(); ++i) {\n            while (st.empty()||st.top()!=popV[i]&amp;&amp;k&lt;pushV.size()) \n                st.push(pushV[k++]);\n            if(st.top()==popV[i]) st.pop();\n            else return false;\n        }\n        return st.empty();\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_11","title":"\u5206\u884c\u200b\u4ece\u200b\u4e0a\u200b\u5f80\u200b\u4e0b\u200b\u6253\u5370\u200b\u4e8c\u53c9\u6811","text":"<p>\u200b\u7528\u200b\u4e00\u4e2a\u200b\u53d8\u91cf\u200b\u8bb0\u5f55\u200b\u4e00\u4e0b\u200b\u672c\u5c42\u200b\u5904\u7406\u200b\u51e0\u4e2a\u200b\u5c31\u200b\u597d\u200b\u4e86\u200b</p> slove <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; printFromTopToBottom(TreeNode *root) {\n\n        vector&lt;vector&lt;int&gt;&gt; anw;\n        if (root == nullptr) return anw;\n        queue&lt;TreeNode *&gt; qu;\n        qu.push(root);\n        while (qu.size()) {\n            vector&lt;int&gt; res;\n            int k = qu.size();\n            while (k--) {\n                auto tem = qu.front();\n                qu.pop();\n                res.push_back(tem-&gt;val);\n                if (tem-&gt;left != nullptr) qu.push(tem-&gt;left);\n                if (tem-&gt;right != nullptr) qu.push(tem-&gt;right);\n            }\n            anw.push_back(res);\n        }\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_12","title":"\u4e8c\u53c9\u6811\u200b\u4e2d\u200b\u548c\u200b\u4e3a\u200b\u67d0\u200b\u4e00\u503c\u200b\u7684\u200b\u8def\u5f84","text":"<p>dfs\u200b\u601d\u8def\u200b\uff0c\u200b\u5904\u7406\u200b\u672c\u5c42\u200b\uff0c\u200b\u5224\u65ad\u200b\u4e0b\u200b\u4e00\u5c42\u200b</p> <p>\u200b\u4e00\u4e9b\u200b\u5c0f\u5751\u200b\uff1a</p> <ul> <li>\u200b\u6709\u200b\u53ef\u80fd\u200b \u200b\u6ca1\u200b\u5230\u200b\u7ed3\u5c3e\u200b\uff08\u200b\u8def\u5f84\u200b\u7aef\u70b9\u200b\uff09\u200b\u65f6\u200b\u7ed3\u679c\u200b\u5c31\u200b\u76f8\u7b49\u200b \uff0c\u200b\u4f46\u662f\u200b\u8fd9\u200b\u4e0d\u662f\u200b\u6211\u4eec\u200b\u8981\u200b\u7684\u200b</li> <li>\u200b\u5982\u679c\u200b\u4f20\u200b\u5f15\u7528\u200b\u6ce8\u610f\u200b\u56de\u590d\u200b\u73b0\u573a\u200b</li> </ul> \u200b\u4f20\u503c\u200b\u4f20\u200b\u5f15\u7528\u200b <pre><code>class Solution {\npublic:\n\n    vector&lt;vector&lt;int&gt;&gt; anw;\n\n    vector&lt;vector&lt;int&gt;&gt; findPath(TreeNode *root, int sum) {\n        vector&lt;int&gt; tem;\n        dfs(root, 0, sum, tem);\n        return anw;\n    }\n\n    void dfs(TreeNode *root, int now, int sum, vector&lt;int&gt; tem) {\n\n        if (root == nullptr) return;\n\n        now += root-&gt;val;\n        tem.push_back(root-&gt;val);\n        if (now == sum&amp;&amp;root-&gt;left== nullptr&amp;&amp;root-&gt;right== nullptr) {\n            anw.push_back(tem);\n            return;\n        }\n        if (root-&gt;left != nullptr) {\n            dfs(root-&gt;left, now, sum, tem);\n        }\n        if (root-&gt;right != nullptr) {\n            dfs(root-&gt;right, now, sum, tem);\n        }\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n\n    vector&lt;vector&lt;int&gt;&gt; anw;\n\n    vector&lt;vector&lt;int&gt;&gt; findPath(TreeNode *root, int sum) {\n        vector&lt;int&gt; tem;\n        dfs(root, 0, sum, tem);\n        return anw;\n    }\n\n    void dfs(TreeNode *root, int now, int sum, vector&lt;int&gt;&amp; tem) {\n\n        if (root == nullptr) return;\n\n        now += root-&gt;val;\n        tem.push_back(root-&gt;val);\n        if (now == sum&amp;&amp;root-&gt;left== nullptr&amp;&amp;root-&gt;right== nullptr) {\n            anw.push_back(tem);\n            //\u200b\u53d6\u6d88\u200b\u6389\u200b\u6ce8\u91ca\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u4f46\u662f\u200bpopback\u200b\u4e0d\u80fd\u200b\u4e22\u200b\n            //\u200b\u4e0d\u7136\u200b\u65e2\u200b\u6ca1\u200b\u8fdb\u5165\u200b\u6700\u540e\u200b\u7684\u200bpoopback\u200b\u4e5f\u200b\u6ca1\u200b\u56de\u590d\u200b\u73b0\u573a\u200b\n            // tem.pop_back();\n            // return;\n        }\n\n        dfs(root-&gt;left, now, sum, tem);\n        dfs(root-&gt;right, now, sum, tem);\n        tem.pop_back();\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_13","title":"\u590d\u6742\u200b\u94fe\u8868\u200b\u7684\u200b\u590d\u523b","text":"<p>\u200b\u76f4\u63a5\u200b\u770b\u200b\u89c6\u9891\u200b\u9898\u89e3\u200b</p> <p>\u200b\u8fd9\u200b\u662f\u200b\u4eba\u200b\u80fd\u200b\u60f3\u200b\u51fa\u6765\u200b\u7684\u200b\uff1f\ud83d\ude30 \u200b\u591a\u200b\u590d\u4e60\u200b\u590d\u4e60\u200b\u5427\u200b</p> solve <pre><code>class Solution {\npublic:\n    ListNode *copyRandomList(ListNode *head) {\n\n        if (head == nullptr) return head;\n\n        auto p = head;\n        while (p != nullptr) {\n            ListNode *np = new ListNode(p-&gt;val);\n            auto next = p-&gt;next;\n            np-&gt;next = next;\n            p-&gt;next = np;\n            p = p-&gt;next-&gt;next;\n        }\n\n        p = head;\n        while (p != nullptr) {\n            if (p-&gt;random != nullptr)\n                p-&gt;next-&gt;random = p-&gt;random-&gt;next;\n            p = p-&gt;next-&gt;next;\n        }\n\n        ListNode *vir = new ListNode(-1);\n        p = head;\n        ListNode *cur = vir;\n        while (p != nullptr) {\n            cur-&gt;next = p-&gt;next;\n            p-&gt;next = p-&gt;next-&gt;next;\n            p = p-&gt;next;\n            cur = cur-&gt;next;\n        }\n        return vir-&gt;next;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_14","title":"\u4e8c\u53c9\u200b\u641c\u7d22\u200b\u6811\u200b\u4e0e\u200b\u53cc\u5411\u200b\u94fe\u8868","text":"<p>\u200b\u8fd8\u200b\u771f\u662f\u200b\u4eba\u80fd\u200b\u60f3\u200b\u51fa\u6765\u200b\u7684\u200b\uff0c\u200b\u6211\u200b\u60f3\u200b\u4e0d\u200b\u51fa\u6765\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u200b\u4e0d\u662f\u200b\u4eba\u200b\u3002 \u200b\u591a\u200b\u590d\u4e60\u200b\u590d\u4e60\u200b\u5427\u200b</p> slove <pre><code>class Solution {\npublic:\n\n    TreeNode *pre = nullptr;\n\n    TreeNode *convert(TreeNode *root) {\n\n        if (root == nullptr) return nullptr;\n        midread(root);\n        while (root-&gt;left != nullptr)\n            root = root-&gt;left;\n        return root;\n\n    }\n\n    void midread(TreeNode *root) {\n        if (root == nullptr) return;\n        midread(root-&gt;left);\n\n        root-&gt;left = pre;\n        if (pre) pre-&gt;right = root;\n        pre = root;\n\n        midread(root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_15","title":"\u6570\u636e\u6d41\u200b\u4e2d\u200b\u7684\u200b\u4e2d\u4f4d\u6570","text":"<p>\u200b\u7528\u200b\u4e24\u4e2a\u200b\u5806\u200b\u52a8\u6001\u200b\u7ef4\u62a4\u200b\u5e8f\u5217\u200b\uff0c\u200b\u6700\u5927\u200b\u5806\u653e\u200b\u6bd4\u200b\u4e2d\u4f4d\u6570\u200b\u5c0f\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u6700\u5c0f\u200b\u5806\u653e\u200b\u6bd4\u200b\u4e2d\u4f4d\u6570\u200b\u5927\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u60f3\u6cd5\u200b\u5f88\u200b\u7cbe\u5999\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u65b9\u6cd5\u200b\u4e5f\u200b\u6bd4\u8f83\u200b\u591a\u200b</p> <ul> <li>\u200b\u4e0a\u6765\u200b\u653e\u5230\u200b\u5de6\u534a\u200b\u90e8\u5206\u200b\uff0c\u200b\u4f46\u662f\u200b\u6709\u200b\u53ef\u80fd\u200b\u5176\u5b9e\u200b\u5e94\u8be5\u200b\u5728\u200b\u53f3\u534a\u200b\u90e8\u5206\u200b\uff08\u200b\u56e0\u4e3a\u200b\u5927\u4e8e\u200b\u4e2d\u4f4d\u6570\u200b\uff09\uff0c\u200b\u5c31\u200b\u5148\u200b\u628a\u200b\u5de6\u200b\u90e8\u5206\u200b\u7684\u200b\u53f3\u200b\u7aef\u70b9\u200b\u653e\u5230\u200b\u53f3\u200b\u90e8\u5206\u200b</li> <li>\u200b\u5982\u679c\u200b\u53f3\u8fb9\u200b\u4e2a\u6570\u200b\u6bd4\u200b\u5de6\u8fb9\u200b\u591a\u200b\uff0c\u200b\u5c31\u200b\u628a\u200b\u53f3\u8fb9\u200b\u7684\u200b\u5de6\u200b\u7aef\u70b9\u200b\u653e\u5230\u200b\u5de6\u534a\u200b\u90e8\u5206\u200b</li> </ul> <pre><code>class MedianFinder {\npublic:\n    priority_queue&lt;int&gt; leftPart;\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; rightPart;\n\n    void addNum(int num) {\n        leftPart.push(num);\n        rightPart.push(leftPart.top());\n        leftPart.pop();\n\n        if (rightPart.size() &gt; leftPart.size()) {\n            leftPart.push(rightPart.top());\n            rightPart.pop();\n        }\n    }\n\n    double findMedian() {\n        if (rightPart.size() == leftPart.size())\n            return 0.5 * (rightPart.top() + leftPart.top());\n        return leftPart.top();\n    }\n};\n</code></pre> not so good <ul> <li>\u200b\u53ef\u4ee5\u200b\u5148\u200b\u5f80\u200b\u6700\u5c0f\u200b\u5806\u200b(\u200b\u53f3\u534a\u200b\u90e8\u5206\u200b)\u200b\u91cc\u200b\u653e\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5148\u200b\u5f80\u200b\u6700\u5927\u200b\u5806\u91cc\u200b\u653e\u200b\uff0c\u200b\u6211\u200b\u8fd9\u4e2a\u200b\u5148\u200b\u653e\u5230\u200b\u6700\u5c0f\u200b\u5806\u200b</li> <li>\u200b\u5982\u679c\u200b\u4e24\u4e2a\u200b\u5806\u9876\u200b\u9006\u5e8f\u200b\uff0c\u200b\u8c03\u6574\u200b\uff0c\u200b\u5982\u679c\u200b\u6700\u5c0f\u200b\u5806\u200b\u6570\u91cf\u200b==\u200b\u6700\u5927\u200b\u5806\u200b\u6570\u91cf\u200b\uff0c\u200b\u628a\u200b\u6700\u5c0f\u200b\u5806\u200b\u7684\u200b\u5806\u200b\u9876\u200b\u653e\u5230\u200b\u6700\u5927\u200b\u5806\u91cc\u200b</li> <li>\u200b\u53d6\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5982\u679c\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b\u4e3a\u200b\u5947\u6570\u200b\uff0c\u200b\u53d6\u200b\u6700\u5927\u200b\u5806\u5806\u200b\u9876\u200b\uff0c\u200b\u5076\u6570\u200b\u53d6\u200b\u4e24\u4e2a\u200b\u5806\u9876\u200b\u5e73\u5747\u503c\u200b</li> </ul> <p></p> solve2 <pre><code>class Solution {\npublic:\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;&gt;&gt; rightpart;\npriority_queue&lt;int, vector&lt;int&gt;, less&lt;&gt;&gt; leftpart;\n\nvoid insert(int num) {\n    rightpart.push(num);\n    if (leftpart.size() &amp;&amp; rightpart.top() &lt; leftpart.top()) {\n        int minv = rightpart.top(), maxv = leftpart.top();\n        rightpart.pop(), leftpart.pop();\n        rightpart.push(maxv), leftpart.push(minv);\n    }\n    if (rightpart.size() &gt; leftpart.size()) {\n        leftpart.push(rightpart.top());\n        rightpart.pop();\n    }\n\n}\n\ndouble getMedian() {\n    if ((leftpart.size() + rightpart.size()) % 2 == 0) {\n        return (leftpart.top() + rightpart.top()) / 2.0;\n    }\n    else\n        return leftpart.top();\n}\n};\n</code></pre>"},{"location":"backend/sword/#_16","title":"\u8fde\u7eed\u200b\u5b50\u200b\u6570\u7ec4\u200b\u7684\u200b\u6700\u5927\u200b\u548c","text":"<p>\u200b\u6bd4\u8f83\u7b80\u5355\u200b\u7684\u200b\u4e00\u9053\u200b\u9898\u200b </p> \u200b\u7a7a\u95f4\u200bOn\u200b\u7a7a\u95f4\u200bO1 <pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n\n        vector&lt;int&gt;anw(nums.size());\n        anw[0]=nums[0];\n        for (int i = 1; i &lt;nums.size(); ++i) {\n            if(nums[i]+anw[i-1]&gt;nums[i]) anw[i]=nums[i]+anw[i-1];\n            else anw[i]=nums[i];\n        }\n        return *max_element(anw.begin(), anw.end());\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n\n        vector&lt;int&gt;anw(nums.size());\n        int pre=nums[0];\n        int fin=nums[0];\n        for (int i = 1; i &lt;nums.size(); ++i) {\n            if(pre&gt;0) pre+=nums[i];\n            else pre=nums[i];\n            fin= max(fin,pre);\n        }\n        return fin;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#12n","title":"\u6c42\u200b1+2+\u2026+n","text":"<p>\u200b\u77ed\u8def\u200b\u6216\u8005\u200b\u5f00\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u5f00\u200b\u7a7a\u95f4\u200b\u771f\u662f\u200b \u200b\u5927\u53d7\u200b\u9707\u64bc\u200b.jpg</p> \u200b\u77ed\u8def\u200b\u5f00\u200b\u7a7a\u95f4\u200b <pre><code>class Solution {\npublic:\n    int getSum(int n) {\n        (n&gt;0)&amp;&amp;(n+= getSum(n-1));\n        return n;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int getSum(int n) {\n        char x[n][n+1];\n        return sizeof(x)&gt;&gt;1;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_17","title":"\u628a\u200b\u6570\u7ec4\u200b\u6392\u6210\u200b\u6700\u5c0f\u200b\u7684\u200b\u6570","text":"<p>\u200b\u4e0d\u597d\u200b\u89e3\u91ca\u200b</p> slove <pre><code>class Solution {\npublic:\n    string printMinNumber(vector&lt;int&gt; &amp;nums) {\n        string anw;\n        if (nums.size() == 0) return anw;\n        sort(nums.begin(), nums.end(), [](int a, int b) {\n            if (to_string(a) + to_string(b) &lt; to_string(b) + to_string(a))\n                return true;\n            else return false;\n        });\n        for(int  x:nums){\n            anw+= to_string(x);\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_18","title":"\u628a\u200b\u6570\u5b57\u200b\u7ffb\u8bd1\u6210\u200b\u5b57\u7b26\u4e32","text":"<p>\u200b\u8fd9\u4e2a\u200b\u8fd8\u597d\u200b\uff0c\u200b\u6700\u200b\u5f00\u59cb\u200b\u60f3\u200b\u7684\u200b\u662f\u200bdfs\u200b\u5904\u7406\u200b\uff0c\u200b\u770b\u200b\u9898\u89e3\u200b\u540e\u200b\u53d1\u73b0\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u7528\u200b\u8df3\u200b\u53f0\u9636\u200b\u505a\u200b\u3002 \u200b\u90fd\u200b\u5dee\u4e0d\u591a\u200b\ud83d\ude0b</p> dfsdp <pre><code>class Solution {\npublic:\n\n    int getTranslationCount(string s) {\n        int anw = dfs(s, 0);\n        return anw;\n    }\n\n    int dfs(string s, int po) {\n        if (po &gt;= s.size()) return 1;\n        int cnt = 0;\n        cnt += dfs(s, po + 1);\n\n        if (po + 1 &lt; s.size() &amp;&amp; ((s[po] - '0') * 10 + (s[po + 1] - '0') &lt;= 25)\n            &amp;&amp; (s[po] - '0') * 10 + (s[po + 1] - '0') != (s[po + 1] - '0')\n                )\n            cnt += dfs(s, po + 2);\n        return cnt;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int getTranslationCount(string s) {\n\n        vector&lt;int&gt; dp(s.size() + 1, 0);\n        dp[0] = 1;\n        if (s.size() == 1) return dp[0];\n        dp[1] = 1;\n        for (int i = 2; i &lt;= s.size(); ++i) {\n            dp[i] = dp[i - 1];\n            int a = s[i - 2] - '0', b = s[i - 1] - '0';\n            if (a != 0 &amp;&amp; a * 10 + b &lt;= 25)\n                dp[i] += dp[i - 2];\n        }\n\n        return dp[s.size()];\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_19","title":"\u793c\u7269\u200b\u7684\u200b\u6700\u5927\u200b\u4ef7\u503c","text":"<ul> <li>dfs\u200b\u65f6\u95f4\u200b\u8d85\u200b\u4e86\u200b\uff0c\u200b\u7528\u200bdp</li> <li><code>grid[i][j]</code> \u200b\u7528\u8fc7\u200b\u4e4b\u540e\u200b\u5c31\u200b\u6ca1\u7528\u200b\u4e86\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u5b58\u200b\u7ed3\u679c\u200b\uff0c\u200b\u8282\u7701\u200b\u4e00\u70b9\u200b\u7a7a\u95f4\u200b</li> </ul> \u200b\u4e0d\u200b\u989d\u5916\u200b\u7a7a\u95f4\u200b <pre><code>class Solution {\npublic:\n    int getMaxValue(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n\n        int m=grid.size(),n=grid[0].size();\n        for (int i = 0; i &lt; m; ++i) {\n            for (int j = 0; j &lt; n; ++j) {\n                if(i&amp;&amp;j) grid[i][j]+= max(grid[i-1][j],grid[i][j-1]);\n                else if(i) grid[i][j]+=grid[i-1][j];\n                else if(j) grid[i][j]+=grid[i][j-1];\n            }\n        }\n        return grid[m-1][n-1];\n    }\n};\n</code></pre> \u200b\u989d\u5916\u200b\u7a7a\u95f4\u200b <pre><code>class Solution {\npublic:\n    int getMaxValue(vector&lt;vector&lt;int&gt;&gt; &amp;grid) {\n        int m = grid.size(), n = grid[0].size();\n\n        vector&lt;vector&lt;int&gt;&gt; dp(grid.size() + 1,\n                            vector&lt;int&gt;(grid[0].size() + 1,0));\n        for (int i = 0; i &lt;= m; ++i)\n            dp[m][0] = 0;\n        for (int i = 0; i &lt;= n; ++i) {\n            dp[0][n] = 0;\n        }\n\n        for (int i = 1; i &lt;= m; ++i) {\n            for (int j = 1; j &lt;= n; ++j) {\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + grid[i - 1][j - 1];\n            }\n        }\n        return dp[m][n];\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_20","title":"\u6700\u957f\u200b\u4e0d\u200b\u542b\u200b\u91cd\u590d\u200b\u5b57\u7b26\u200b\u7684\u200b\u5b50\u200b\u5b57\u7b26\u4e32","text":"<ul> <li>\u200b\u63a8\u8350\u200b\u65b9\u6cd5\u200b\uff1a\u200b\u53cc\u200b\u6307\u9488\u200b+\u200b\u54c8\u5e0c\u200b\u8868\u200b</li> <li>\u200b\u7b2c\u4e8c\u79cd\u200b\u65b9\u6cd5\u200b\uff1a dp\u200b\u89e3\u91ca\u200b</li> </ul> \u200b\u53cc\u200b\u6307\u9488\u200bdp <pre><code>class Solution {\npublic:\n    int longestSubstringWithoutDuplication(string s) {\n        if(s.empty()) return 0;\n        int anw=1;\n        unordered_map&lt;char,int&gt;map;\n        for (int l = 0,r=0; r &lt; s.size(); ++r) {\n            map[s[r]]++;\n            while (map[s[r]]&gt;1){\n                map[s[l++]]--;\n            }\n            anw= max(anw,r-l+1);\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int longestSubstringWithoutDuplication(string s) {\n        if (s.empty()) return 0;\n        int anw = 1;\n        vector&lt;int&gt; dp(s.size());\n        unordered_map&lt;char, int&gt; map;\n        for (int i = 0; i &lt; s.size(); ++i) {\n            if (i == 0) {\n                map[s[i]] = 0;\n                dp[0] = 1;\n                anw = 1;\n                continue;\n            }\n            int last = map[s[i]];\n            if (map[s[i]] == 0 &amp;&amp; s[0] != s[i])\n                dp[i] = dp[i - 1] + 1;\n            else\n                dp[i] = min(dp[i - 1] + 1, i - last);\n            anw = max(anw, dp[i]);\n            map[s[i]] = i;\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#0n-1","title":"0\u200b\u5230\u200bn-1\u200b\u4e2d\u200b\u7f3a\u5931\u200b\u7684\u200b\u6570\u5b57","text":"<p>\u200b\u4e8c\u5206\u200b \u200b\u7279\u5f81\u200b \u200b\u6570\u503c\u200b\u6bd4\u200b\u4e0b\u6807\u200b\u5927\u200b\u6216\u8005\u200b\u7b49\u4e8e\u200b\u4e0b\u6807\u200b</p> \u200b\u5927\u4e8e\u200b\u4e0b\u6807\u200b\u7b49\u4e8e\u200b\u4e0b\u6807\u200b <pre><code>class Solution {\n    public int getMissingNumber(int[] nums) {\n        if (nums.length == 0) return 0;\n        int left = 0, right = nums.length - 1;\n        while (left &lt; right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] &gt; mid) right = mid;\n            else left = mid + 1;\n        }\n        // if (nums.length-1 == left) return left + 1; \n        // [0,1,2,4] \u200b\u7b54\u6848\u200b\u5e94\u4e3a\u200b3\uff0c\u200b\u8f93\u51fa\u200b\u4e3a\u200b4\n        // \u200b\u5e94\u8be5\u200b\u662f\u200b \u200b\u6570\u5b57\u200b\u7b26\u5408\u200b[0..n-1]\n        if (nums[left] == left) return left + 1;\n        return left;\n    }\n}\n</code></pre> <pre><code>class Solution {\n    public int getMissingNumber(int[] nums) {\n        if (nums.length == 0) return 0;\n        int left = 0, right = nums.length - 1;\n        while (left &lt; right) {\n            int mid = (left + right + 1) / 2;\n            if (nums[mid] == mid) left = mid;\n            else right = mid - 1;\n        }\n        if (nums[left] == left) return left + 1;\n        return left;\n    }\n}\n</code></pre>"},{"location":"backend/sword/#k","title":"\u4e8c\u53c9\u200b\u641c\u7d22\u200b\u6811\u200b\u7684\u200b\u7b2c\u200bk\u200b\u4e2a\u200b\u7ed3\u70b9","text":"<p>dfs\u200b\u65f6\u200b\u8fdb\u884c\u200b\u8ba1\u6570\u200b</p> dfs <pre><code>class Solution {\npublic:\n    TreeNode *kthNode(TreeNode *root, int k) {\n        dfs(root, k);\n        return anw;\n    }\n\n    TreeNode *anw = nullptr;\n\n    void dfs(TreeNode *root, int &amp;k) {\n        if (root == nullptr) return;\n        dfs(root-&gt;left, k);\n        k--;\n        if (k == 0) {\n            anw = root;\n            return;\n        }\n        dfs(root-&gt;right, k);\n\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_21","title":"\u6570\u7ec4\u200b\u4e2d\u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e00\u6b21\u200b\u7684\u200b\u4e24\u4e2a\u200b\u6570\u5b57","text":"<p>\u200b\u5076\u6570\u200b\u4e2a\u200b\u76f8\u540c\u200b\u7684\u200b\u6570\u5b57\u200b\u8fdb\u884c\u200b\u5f02\u6216\u200b\u6216\u200b\u7b49\u4e8e\u200b0\uff0c0\u200b\u5f02\u6216\u200ba\u200b\u7b49\u4e8e\u200ba</p> <ul> <li>\u200b\u5148\u200b\u8fdb\u884c\u200b\u5168\u90e8\u200b\u5f02\u6216\u200b <code>anw=x^y</code></li> <li>\u200b\u56e0\u4e3a\u200b <code>x!=y</code> \u200b\u4e00\u5b9a\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u67d0\u200b\u4e00\u4f4d\u200b\uff08\u200b\u5047\u5b9a\u200b\u4e3a\u200bk\u200b\u4f4d\u200b\uff09\u200b\u4e0a\u200b\u7684\u200b\u6570\u5b57\u200b\u4e24\u8005\u200b\u4e0d\u540c\u200b</li> <li>\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5206\u6210\u200b\u4e24\u7c7b\u200b\uff0ck\u200b\u4f4d\u662f\u200b1\uff0ck\u200b\u4f4d\u662f\u200b0\uff0c \u200b\u6210\u5bf9\u200b\u7684\u200b\u6570\u5b57\u200b\u4e0d\u7ba1\u200b\u5206\u5728\u200b\u54ea\u200b\u4e00\u7c7b\u200b\u8fdb\u884c\u200b\u5f02\u6216\u200b\u540e\u200b\u90fd\u200b\u662f\u200b0</li> <li>\u200b\u5206\u522b\u200b\u5f02\u6216\u200b\u5c31\u884c\u4e86\u200b</li> </ul> \u200b\u5f02\u6216\u200b <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findNumsAppearOnce(vector&lt;int&gt; &amp;nums) {\n\n        int anw = 0;\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            anw = anw ^ nums[i];\n        }\n\n        int k = 0;\n        while ((anw &gt;&gt; k &amp; 1) == 0) { k++; }\n\n        int t = 0;\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            if ((nums[i] &gt;&gt; k &amp; 1) == 1) t = t ^ nums[i];\n        }\n        vector&lt;int&gt; res;\n        res.push_back(anw ^ t);\n        res.push_back(t);\n        return res;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_22","title":"\u6570\u7ec4\u200b\u4e2d\u200b\u552f\u4e00\u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e00\u6b21\u200b\u7684\u200b\u6570\u5b57","text":"<p>\u200b\u5728\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u9664\u4e86\u200b\u4e00\u4e2a\u200b\u6570\u5b57\u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e00\u6b21\u200b\u4e4b\u5916\u200b\uff0c\u200b\u5176\u4ed6\u200b\u6570\u5b57\u200b\u90fd\u200b\u51fa\u73b0\u200b\u4e86\u200b\u4e09\u6b21\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u627e\u51fa\u200b\u90a3\u4e2a\u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e00\u6b21\u200b\u7684\u200b\u6570\u5b57\u200b\u3002</p> <ol> <li>int 32\u200b\u4f4d\u200b\uff0c\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u6570\u200b\u51fa\u73b0\u200b3\u200b\u6b21\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4ed6\u200b\u7684\u200b\u6bcf\u200b\u4e00\u4f4d\u200b\u90fd\u200b\u51fa\u73b0\u200b3\u200b\u6b21\u200b</li> <li>\u200b\u628a\u200b\u6240\u6709\u200b\u6570\u200b\u7684\u200b\u6bcf\u200b\u4e00\u4f4d\u200b\u90fd\u200b\u7edf\u8ba1\u200b\u4e00\u4e0b\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200b3\u200b\u7684\u200b\u500d\u6570\u200b\uff0c\u200b\u90a3\u200b\u8981\u6c42\u200b\u7684\u200b\u7b54\u6848\u200b\u5728\u200b\u8fd9\u200b\u4e00\u4f4d\u200b\u4e0a\u200b\u662f\u200b0\uff0c\u200b\u5426\u5219\u200b\u4e3a\u200b1</li> </ol> solve <pre><code>class Solution {\npublic:\n    int findNumberAppearingOnce(vector&lt;int&gt; &amp;nums) {\n\n        int cnt[32] = {0};\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            int x = nums[i];\n            for (int j = 0; j &lt; 32; ++j) {\n                cnt[j] += (x &gt;&gt; j &amp; 1);\n            }\n        }\n        int anw = 0;\n        for (int i = 31; i &gt;= 0; i--) {\n            anw = anw &lt;&lt; 1;\n            if (cnt[i] % 3)\n                anw += 1;\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#s","title":"\u548c\u200b\u4e3a\u200bS\u200b\u7684\u200b\u8fde\u7eed\u200b\u6b63\u6570\u200b\u5e8f\u5217","text":"<ol> <li>\u200b\u8d77\u59cb\u200b\u6570\u5b57\u200ba,\u200b\u957f\u5ea6\u200bn <code>(a&gt;=1,n&gt;=2) (a+a+n-1)*n/2 =x</code> \uff0c\u200b\u89e3\u65b9\u7a0b\u200b</li> <li>\u200b\u53cc\u200b\u6307\u9488\u200b\u7684\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b</li> </ol> \u200b\u89e3\u65b9\u7a0b\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt; &gt; findContinuousSequence(int sum) {\n\n        if (sum &lt; 3) return vector&lt;vector&lt;int&gt;&gt;{};\n        vector&lt;vector&lt;int&gt;&gt; res;\n        for (int n = 2; n * (n + 1) / 2 &lt;= sum; n++) {\n            vector&lt;int&gt; anw;\n            if (2 * sum % n == 0 &amp;&amp; (2 * sum / n - n + 1) % 2 == 0) {\n                int a = (2 * sum / n - n + 1) / 2;\n                for (int i = a; i &lt; n + a; ++i) {\n                    anw.push_back(i);\n                }\n                res.push_back(anw);\n            }\n        }\n        return res;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt; &gt; findContinuousSequence(int sum) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n\n        for (int l = 1, r = 2, total = 3; l &lt;= sum / 2 + 1; l++) {\n            while (total &lt; sum)\n                r++, total += r;\n            if (total == sum) {\n                vector&lt;int&gt; anw;\n                for (int k = l; k &lt;= r; k++)\n                    anw.push_back(k);\n                res.push_back(anw);\n                total -= l;\n            }\n            else\n                total -= l;\n            //\u200b\u53ef\u4ee5\u200b\u628a\u200b\u4e0a\u8fb9\u200b\u4e24\u53e5\u200b\u5408\u200b\u8d77\u6765\u200b\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_23","title":"\u5de6\u200b\u65cb\u8f6c\u200b\u5b57\u7b26\u4e32","text":"<ol> <li>substr(beginPosi,cnt) <code>str.substr(n)+str.substr(0,n);</code></li> <li>\u200b\u53cd\u8f6c\u200b\u524d\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u53cd\u8f6c\u200b\u540e\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u5168\u90e8\u200b\u53cd\u8f6c\u200b \\({(a^{-1}b^{-1})}^{-1} =ba\\)</li> </ol>"},{"location":"backend/sword/#_24","title":"\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7684\u200b\u6700\u5927\u503c","text":"<p>\u200b\u7a97\u53e3\u200b\u91cc\u200b\u6bd4\u200b\u65b0\u200b\u8fdb\u6765\u200b\u5c0f\u200b\u7684\u200b\u6570\u200b\u90fd\u200b\u6ca1\u6709\u200b\u7528\u200b\u4e86\u200b\uff0c\u200b\u5355\u8c03\u200b\u961f\u5217\u200b \u200b\u9898\u89e3\u200b</p> <p>\u200b\u53ef\u8bfb\u6027\u200b\u5f3a\u200b\u7684\u200b\u9898\u89e3\u200b</p> \u200b\u53ef\u8bfb\u6027\u200b\u5f3a\u200b\u53ef\u8bfb\u6027\u200b\u4e0d\u200b\u5f3a\u200b <pre><code>class mydeque {\n    deque&lt;int&gt; que;\n\npublic:\n    void push(int val) {\n        while (!que.empty() &amp;&amp; val &gt; que.back())\n            que.pop_back();\n        que.push_back(val);\n    }\n\n    void pop(int val) {\n        if (!que.empty() &amp;&amp; que.front() == val)\n            que.pop_front();\n    }\n\n    int get() {\n        return que.front();\n    }\n};\n\nclass Solution {\npublic:\n    vector&lt;int&gt; maxInWindows(vector&lt;int&gt;&amp; nums, int k) {\n        vector&lt;int&gt; res;\n        mydeque que;\n        for (int i = 0; i &lt; k; i++)\n            que.push(nums[i]);\n\n        res.push_back(que.get());\n\n        for (int i = k; i &lt; nums.size(); i++) {\n            que.pop(nums[i - k]);\n            que.push(nums[i]);\n            res.push_back(que.get());\n        }\n        return res;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxInWindows(vector&lt;int&gt;&amp; nums, int k) {\n\n        vector&lt;int&gt;anw;\n        deque&lt;int&gt;qu;\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            if (!qu.empty() &amp;&amp; i - qu.front() &gt;= k) qu.pop_front();\n            while (!qu.empty() &amp;&amp; nums[i] &gt; nums[qu.back()]) qu.pop_back();\n            qu.push_back(i);\n            if (i &gt;= k - 1) anw.push_back(nums[qu.front()]);\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_25","title":"\u9ab0\u5b50\u200b\u7684\u200b\u70b9\u6570","text":"<p>\u200b\u5047\u8bbe\u200b <code>f[i][j]</code> \u200b\u8868\u793a\u200b\u7b2c\u200bi\u200b\u6b21\u200b\u6295\u200b\uff0c\u200b\u603b\u200b\u70b9\u6570\u200b\u4e3a\u200bj\uff0c\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u4e0a\u200b\u4e00\u6b21\u200b\u7684\u200b\u603b\u200b\u70b9\u6570\u200b+1,+2...+6\uff0c\u200b\u5373\u200b <code>f[i][j]=f[i-1][j-k]  1&lt;=j-k</code></p> n2 1-6n2 \u200b\u53e6\u200b\u4e00\u79cd\u200bOn <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; numberOfDice(int n) {\n\n        vector&lt;int&gt; anw;\n        vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(6 * n + 6, 0));\n\n        for (int i = 1; i &lt;= 6; i++)\n            dp[1][i] = 1;\n\n        for (int i = 2; i &lt;= n; i++) {\n            for (int j = i; j &lt;= 6 * i; ++j) {\n                for (int k = 1; k &lt;= 6; k++)\n                    if (j - k &gt; 0)\n                        dp[i][j] += dp[i - 1][j - k];\n            }\n        }\n\n        for (int i = n; i &lt;= 6 * n; i++)\n            anw.push_back(dp[n][i]);\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; numberOfDice(int n) {\n\n        vector&lt;int&gt; anw;\n\n        vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(6 * n + 6, 0));\n\n        for (int i = 1; i &lt;= 6; i++)\n            dp[1][i] = 1;\n\n\n        for (int i = 2; i &lt;= n; i++) {\n            for (int j = i; j &lt;= 6 * i; ++j) {\n                for (int k = j - 6; k &lt;= j - 1; k++)\n                    if (k &gt;= i - 1 &amp;&amp; k &lt;= 6 * (i - 1))\n                        dp[i][j] += dp[i - 1][k];\n\n            }\n\n        }\n\n        for (int i = n; i &lt;= 6 * n; i++)\n            anw.push_back(dp[n][i]);\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; numberOfDice(int n) {\n\n        vector&lt;int&gt; anw;\n        vector&lt;int&gt; dp(6 * (n + 1), 0);\n\n        for (int i = 1; i &lt;= 6; i++)\n            dp[i] = 1;\n\n\n        for (int i = 2; i &lt;= n; i++) {\n            for (int j = i * 6; j &gt;= i; --j) {\n                dp[j]=0;\n                for (int k = j - 6; k &lt;= j - 1; k++)\n                    if (k &gt;= i - 1 &amp;&amp; k &lt;= 6 * (i - 1))\n                        dp[j] += dp[k];\n\n            }\n        }\n\n        for (int i = n; i &lt;= 6 * n; i++)\n            anw.push_back(dp[i]);\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_26","title":"\u6251\u514b\u724c\u200b\u7684\u200b\u987a\u5b50","text":"<ol> <li>\u200b\u9664\u4e86\u200b0\u200b\u4ee5\u5916\u200b\u4e0d\u80fd\u200b\u51fa\u73b0\u200b\u4e24\u4e2a\u200b\u76f8\u540c\u200b\u7684\u200b\u6570\u5b57\u200b\uff1b</li> <li>\u200b\u6392\u5e8f\u200b\u540e\u200b\u4e24\u4e2a\u200b\u76f8\u90bb\u200b\u6570\u5b57\u200b\u7684\u200b\u5dee\u503c\u200b\u4e0d\u80fd\u200b\u5927\u4e8e\u200b0\u200b\u7684\u200b\u4e2a\u6570\u200b\u3002</li> </ol> solve <pre><code>class Solution {\npublic:\n    bool isContinuous(vector&lt;int&gt; nums) {\n\n        if (nums.size() == 0) return false;\n        int cnt = 0;\n        std::sort(nums.begin(), nums.end());\n\n        for (int i = 0; i &lt; nums.size() - 1; ++i) {\n            if (nums[i] == 0) {\n                cnt++;\n                continue;\n            }\n            if (nums[i] == nums[i + 1]) return false;\n            if (nums[i + 1] - nums[i] &gt; 1) {\n                cnt -= (nums[i + 1] - nums[i] - 1);\n                if (cnt &lt; 0) return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_27","title":"\u5706\u5708\u200b\u4e2d\u200b\u6700\u540e\u200b\u5269\u4e0b\u200b\u7684\u200b\u6570\u5b57","text":"<p>\u200b\u7ea6\u745f\u592b\u200b\u73af\u200b\u95ee\u9898\u200b\uff0c \u200b\u7701\u6d41\u7248\u200b \uff0c \u200b\u8be6\u7ec6\u200b\u7248\u200b</p> cpppy <pre><code>class Solution {\npublic:\n    int lastRemaining(int n, int m) {\n\n        if (n == 1) return 0;\n        int anw = 0;\n        for (int i = 2; i &lt;= n; i++)\n            anw = (anw + m) % i;\n        return anw;\n    }\n};\n</code></pre> <pre><code>def josephus(int_list: list, skip):\n    \"\"\"skip: choose skip_th, eg: skip=2, 0 1 23\"\"\"\n    choose_id = 0\n    len_list = len(int_list)\n    while len_list:\n        choose_id = (choose_id+skip-1) % len_list\n        yield int_list.pop(choose_id)\n        len_list -= 1\n\n\ndef test_josephus():\n    anw = josephus([i for i in range(5)], 3)\n    for val in anw:\n        print(val)\n</code></pre>"},{"location":"backend/sword/#1_1","title":"\u4e70\u5356\u200b\u80a1\u7968\u200b1\uff1a\u200b\u80a1\u7968\u200b\u7684\u200b\u6700\u5927\u200b\u5229\u6da6","text":"<p>\u200b\u6c42\u200b <code>a[j]-a[i] j&gt;i</code> \u200b\u7684\u200b\u6700\u5927\u503c\u200b\uff0c\u200b\u52a8\u6001\u200b\u7ef4\u62a4\u200b\u6700\u5c0f\u503c\u200b <code>buy</code></p> solve <pre><code>class Solution {\npublic:\n    int maxDiff(vector&lt;int&gt;&amp; nums) {\n\n        if(nums.size()==0) return 0;\n        int anw=0;\n        int buy=nums[0];\n        for(int i=1;i&lt;nums.size();i++){\n            if(nums[i]&lt;buy) buy=nums[i];\n            if(nums[i]&gt;buy) anw= max(anw,nums[i]-buy);\n        }\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_28","title":"\u6784\u5efa\u200b\u4e58\u79ef\u200b\u6570\u7ec4","text":"<ul> <li>\u200b\u4e0d\u8ba9\u200b\u7528\u200b\u9664\u6cd5\u200b\uff0c\u200b\u4e00\u79cd\u200b\u65b9\u6cd5\u200b\u662f\u200b\u5bf9\u200b\u6bcf\u4e2a\u200b\u6570\u5168\u200b\u4e58\u200b\u4e00\u6b21\u200b\uff0c\u200b\u7ed3\u679c\u200b\u662f\u200b \\(O(n^2)\\)</li> <li>\u200b\u53ef\u4ee5\u200b\u5206\u6210\u200b <code>a[0]..a[i-1]</code> <code>a[i+1]..a[n-1]</code> \u200b\u524d\u200b\u4e00\u90e8\u5206\u200b\u548c\u200b\u540e\u200b\u4e00\u90e8\u5206\u200b\uff0c <code>anw[i]=left[i]*right[i]</code> \u3002</li> <li>\u200b\u5982\u679c\u200b\u4e0d\u200b\u989d\u5916\u200b\u7528\u200b \\(O(n)\\) \u200b\u7a7a\u95f4\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5148\u200b\u5904\u7406\u200b\u540e\u7f00\u200b\uff0c\u200b\u518d\u7528\u200b\u4e00\u4e2a\u200b\u53d8\u91cf\u200b\u8bb0\u5f55\u200b\u524d\u7f00\u200b\u4e58\u79ef\u200b\uff0c <code>anw[i]=left*right[i]</code></li> </ul> On\u200b\u7a7a\u95f4\u200b\u540e\u7f00\u200b\u524d\u7f00\u200b <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; multiply(const vector&lt;int&gt; &amp;nums) {\n\n        vector&lt;int&gt; anw(nums.size());\n        vector&lt;int&gt; left(nums.size(), 1);\n        vector&lt;int&gt; right(nums.size(), 1);\n        for (int i = 1; i &lt; nums.size(); ++i) {\n            left[i] *= nums[i - 1] * left[i - 1];\n        }\n        for (int i = nums.size() - 2; i &gt;= 0; --i) {\n            right[i] *= nums[i + 1] * right[i + 1];\n        }\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            anw[i] = left[i] * right[i];\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; multiply(const vector&lt;int&gt; &amp;nums) {\n\n        vector&lt;int&gt; right(nums.size(), 1);\n        for (int i = nums.size() - 2; i &gt;= 0; i--)\n            right[i] = right[i + 1] * nums[i + 1];\n        int pre = 1;\n        for (int i = 0; i &lt; nums.size() ; i++) {\n            right[i] = pre * right[i];\n            pre *= nums[i];\n        }\n        return right;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; multiply(const vector&lt;int&gt; &amp;nums) {\n\n        vector&lt;int&gt; left(nums.size(), 1);\n        int right = 1;\n        for (int i = 1; i &lt; nums.size(); i++)\n            left[i] *= left[i - 1] * nums[i - 1];\n        for (int i = nums.size() - 2; i &gt;= 0; i--) {\n            right *= nums[i + 1];\n            left[i] *= right;\n        }\n        return left;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_29","title":"\u628a\u200b\u5b57\u7b26\u4e32\u200b\u8f6c\u6362\u6210\u200b\u6574\u6570","text":"<p>\u200b\u5148\u200b\u5728\u200b\u6700\u540e\u200b\u52a0\u200b\u4e00\u4e2a\u200b\u522b\u7684\u200b\u5b57\u6bcd\u200b\uff0c\u200b\u8282\u7701\u200b\u5224\u65ad\u200b\u6761\u4ef6\u200b</p> <pre><code>```cpp\nclass Solution {\npublic:\n    int strToInt(string str) {\n        if (str.size() == 0) return 0;\n        str += 'g';\n        int idx = 0;\n        long anw = 0;\n        bool ff = false;\n        while (str[idx] == ' ') idx++;\n        if (str[idx] == '-') ff = true, idx++;\n        if (str[idx] == '+') idx++;\n\n        for (int i = idx; i &lt; str.size(); ++i) {\n            if (str[i] &lt; '0' || str[i] &gt; '9')\n                break;\n            anw *= 10;\n            anw += str[i] - '0';\n            if (anw &gt; INT_MAX &amp;&amp; !ff) return INT_MAX;\n            if (ff &amp;&amp; (0 - anw) &lt; INT_MIN) return INT_MIN;\n        }\n        if (ff) anw = 0 - anw;\n        return anw;\n    }\n};\n```\n</code></pre>"},{"location":"backend/sword/#_30","title":"\u4e0d\u7528\u200b\u52a0\u51cf\u4e58\u9664\u200b\u505a\u200b\u52a0\u6cd5","text":"<ol> <li>\u200b\u4ece\u200b\u4e00\u4f4d\u200b\u5168\u52a0\u5668\u200b\u5165\u624b\u200b <code>anw=a^b^c cin=a&amp;b|a&amp;c|b&amp;c</code></li> <li>\u200b\u5f02\u6216\u200b+\u200b\u8fdb\u4f4d\u200b</li> </ol> \u200b\u5168\u52a0\u5668\u200b \u200b\u672a\u200b\u4f18\u5316\u200b\u7248\u200b\u5168\u52a0\u5668\u200b \u200b\u4f18\u5316\u200b\u7248\u200b\u5f02\u6216\u200b+\u200b\u8fdb\u4f4d\u200b <pre><code>class Solution {\npublic:\n    int add(int num1, int num2) {\n        stack&lt;int&gt; st;\n        int a, b, c;\n        c = 0;\n        for (int i = 0; i &lt; 32; i++) {\n            a = num1 &gt;&gt; i &amp; 1;\n            b = num2 &gt;&gt; i &amp; 1;\n            st.push(a ^ b ^ c);\n            c = a &amp; b | a &amp; c | b &amp; c;\n        }\n        int anw = 0;\n        while (!st.empty()) {\n            anw = anw &lt;&lt; 1;\n            anw += st.top();\n\n            st.pop();\n        }\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int add(int num1, int num2) {\n\n        int a, b, c;\n        c = 0;\n        int anw=0;\n        for (int i = 0; i &lt; 32; i++) {\n            a = num1 &gt;&gt; i &amp; 1;\n            b = num2 &gt;&gt; i &amp; 1;\n            anw|=((a^b^c)&lt;&lt;i);\n            c = (a &amp; b | a &amp; c | b &amp; c);\n        }\n\n        return anw;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int add(int num1, int num2){\n        while(num2!=0){\n            int sum = num1 ^ num2;//\u200b\u4e0d\u200b\u8fdb\u4f4d\u200b\u7684\u200b\u52a0\u6cd5\u200b\n            int carry = (num1 &amp; num2)&lt;&lt;1;//\u200b\u8fdb\u4f4d\u200b\n            num1 = sum;\n            num2 = carry;\n        }\n        return num1;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_31","title":"\u628a\u200b\u5b57\u7b26\u4e32\u200b\u8f6c\u6362\u6210\u200b\u6574\u6570","text":"solve <pre><code>class Solution {\npublic:\n    int strToInt(string str) {\n        if (str.size() == 0) return 0;\n        str += 'g';\n        int idx = 0;\n        long anw = 0;\n        bool ff = false;\n        while (str[idx] == ' ') idx++;\n        if (str[idx] == '-') ff = true, idx++;\n        if (str[idx] == '+') idx++;\n\n        for (int i = idx; i &lt; str.size(); ++i) {\n            if (str[i] &lt; '0' || str[i] &gt; '9')\n                break;\n            anw *= 10;\n            anw += str[i] - '0';\n            if (anw &gt; INT_MAX &amp;&amp; !ff) return INT_MAX;\n            if (ff &amp;&amp; (0 - anw) &lt; INT_MIN) return INT_MIN;\n        }\n        if (ff) anw = 0 - anw;\n        return anw;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_32","title":"\u6570\u5b57\u200b\u5e8f\u5217\u200b\u4e2d\u200b\u67d0\u200b\u4e00\u4f4d\u200b\u7684\u200b\u6570\u5b57","text":"<p>\u200b\u7528\u200b\u51cf\u6cd5\u200b\u6bd4\u8f83\u200b\u597d\u200b\uff0c\u200b\u52a0\u6cd5\u200b\u4e00\u65b9\u9762\u200b\u4e0d\u597d\u200b\u627e\u200b\u5bf9\u5e94\u200b\u539f\u59cb\u200b\u6570\u5b57\u200b\uff0c\u200b\u4e00\u65b9\u9762\u200b\u8fd8\u8981\u200b\u62c5\u5fc3\u200b\u7206\u200bint</p> <p>\u200b\u6838\u5fc3\u601d\u60f3\u200b \uff1a\u200b\u5224\u65ad\u200b\u662f\u200b\u51e0\u4f4d\u6570\u200b\uff0c\u200b\u627e\u200b\u539f\u59cb\u200b\u6570\u5b57\u200b\uff0c\u200b\u627e\u5230\u200b\u539f\u59cb\u200b\u6570\u5b57\u200b\u7684\u200b\u54ea\u4e00\u4f4d\u200b</p> <ul> <li>[0-9]\u200b\u6709\u200b10\u200b\u4f4d\u6570\u200b\uff0c[10-99]\u200b\u6709\u200b <code>90*2</code> \u200b\u4f4d\u200b\uff0c[100-999]\u200b\u6709\u200b <code>900*3</code> \u200b\u4f4d\u200b</li> <li>\u200b\u5982\u679c\u200b <code>n&gt;cnt</code> ,\u200b\u8bf4\u660e\u200b\u4e0d\u200b\u5728\u200b\u8fd9\u200b\u4e00\u6bb5\u200b\u91cc\u200b\u3002<ul> <li>eg\uff1a13&gt;9,13-9=4&lt;180\uff0c\u200b\u5728\u200b\u7b2c\u4e8c\u6bb5\u200b\u91cc\u200b\u7684\u200b\u7b2c\u56db\u4f4d\u200b</li> <li>\u200b\u4ece\u200b10\u200b\u5f00\u59cb\u200b\uff0c\u200b\u4ece\u200b1\u200b\u8ba1\u6570\u200b\uff0c\u200b\u5c31\u662f\u200bn=1,x=1; n=2,x=0; n=3,x=1...</li> </ul> </li> <li><code>anw=pow(10,i-1)+(n-1)/i</code> \u200b\u8fd9\u4e2a\u200b\u5730\u65b9\u200b\u76f8\u5f53\u4e8e\u200b\u628a\u200b\u4ece\u200b1\u200b\u5f00\u59cb\u200b\u8ba1\u6570\u200b\u53d8\u6210\u200b\u4ece\u200b0\u200b\u5f00\u59cb\u200b\u8ba1\u6570\u200b\uff0c\u200b\u8fd9\u6837\u200b\u65b9\u4fbf\u200b\u5224\u65ad\u200b\u662f\u200b\u54ea\u4e00\u4f4d\u200b\uff0c\u200b\u5373\u4f7f\u200b\u53d6\u6a21\u200b\u4e5f\u200b\u975e\u5e38\u200b\u65b9\u4fbf\u200b\uff0c</li> <li>\u200b\u53d6\u6a21\u200b\u5224\u65ad\u200b\u53f3\u79fb\u200b\u6b21\u6570\u200b\uff0c\u200b\u6700\u540e\u200b\u6a21\u4e0a\u200b10\u200b\u5c31\u662f\u200b\u7b54\u6848\u200b</li> </ul> <p>\u200b\u4e0a\u200b\u53d6\u6574\u200b\uff1a </p> <ol> <li> \\[ \\begin{aligned} x &amp;=(a-1)/b+1 \\\\ x &amp;=(a+b-1)/b \\end{aligned} \\] </li> <li>ceil(x)</li> </ol> solve <pre><code>class Solution {\npublic:\n    int digitAtIndex(int n) {\n        long long anw = 0, i = 1, cnt = 9;\n        while (n &gt; cnt) {\n            n -= cnt;\n            cnt = 9 * pow(10, i) * (i + 1);\n            i++;\n        }\n        anw = (n - 1) / i + pow(10, i - 1);\n        int po = (n - 1) % i;\n        while (i - po - 1 &gt; 0) {\n            anw /= 10;\n            i--;\n        }\n        return anw % 10;\n    }\n};\n</code></pre>"},{"location":"backend/sword/#_33","title":"\u4e0d\u200b\u4fee\u6539\u200b\u6570\u7ec4\u200b\u627e\u51fa\u200b\u91cd\u590d\u200b\u7684\u200b\u6570\u5b57","text":"<p>\u200b\u5bf9\u200b\u6570\u503c\u200b\u8fdb\u884c\u200b\u4e8c\u5206\u200b\uff0c\u200b\u6bd4\u5982\u200b<code>[1, 2, 3, 4, 4]</code>\u200b\u4ece\u200b<code>[1, 2]</code>\u200b\u7684\u200b\u6570\u503c\u200b\u51fa\u73b0\u200b\u4e86\u200b2\u200b\u6b21\u200b\uff0c\u200b\u4ece\u200b[3,4]\u200b\u7684\u200b\u6570\u503c\u200b\u51fa\u73b0\u200b\u4e86\u200b3\u200b\u6b21\u200b\uff0c\u200b\u7b54\u6848\u200b\u5728\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b\u5927\u4e8e\u200b\u533a\u95f4\u200b\u957f\u5ea6\u200b\u7684\u200b\u533a\u95f4\u200b\uff0c\u200b\u5f53\u200b\u533a\u95f4\u200b\u957f\u5ea6\u200b\u4e3a\u200b1\u200b\u5c31\u200b\u627e\u5230\u200b\u7b54\u6848\u200b\u3002</p> <pre><code>class Solution {\n    public int duplicateInArray(int[] nums) {\n        int left = 1, right = nums.length - 1;\n        while (left &lt; right) {\n            int cnt = 0;\n            int mid = left + (right - left) / 2;\n            for (int num : nums) {\n                if (num &gt;= left &amp;&amp; num &lt;= mid) cnt++;\n            }\n            if (cnt &gt; mid - left + 1) right = mid;\n            else left = mid + 1;\n\n            // \u200b\u6216\u8005\u200b\n            // if(cnt &lt;= mid - left + 1) left = mid + 1;\n            // else right = mid;\n        }\n        return left;\n    }\n}\n</code></pre> <p>\u200b\u4e0d\u80fd\u200b\u5224\u65ad\u200b\u7b49\u4e8e\u200b <code>if(cnt == mid - left + 1) left = mid + 1;</code> \u200b\u56e0\u4e3a\u200b\u6570\u7ec4\u200b\u6709\u200b\u591a\u4e2a\u200b\u91cd\u590d\u200b\u6570\u5b57\u200b\u4e0d\u80fd\u200b\u4fdd\u8bc1\u200b\u6b63\u597d\u200b\u662f\u200b\u76f8\u7b49\u200b\uff0c\u200b\u4f8b\u5982\u200b<code>[4, 9, 20, 12, 4, 14, 6, 13, 19, 5, 4, 18, 5, 16, 11, 10, 13, 5, 3, 2, 12]</code> \u200b\u6709\u200b\u4e24\u4e2a\u200b4\uff0c12</p> <p>\u200b\u53e6\u5916\u200b\u7528\u200b\u7b49\u200b\u53f7\u200b\u4e5f\u200b\u4e0d\u200b\u7b26\u5408\u200b\u4e8c\u5206\u200b\u6761\u4ef6\u200b\uff1a\u200b\u7b54\u6848\u200b\u5728\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b\u5927\u4e8e\u200b\u533a\u95f4\u200b\u957f\u5ea6\u200b\u7684\u200b\u533a\u95f4\u200b</p> <pre><code>left: 1 mid: 10 cnt: 11 right: 20\nleft: 1 mid: 5 cnt: 8 right: 10\nleft: 1 mid: 3 cnt: 2 right: 5 // \u200b\u6ce8\u610f\u200b\u4e0b\u200b\u4e00\u6b65\u200b\u5c31\u200b\u9519\u200b\u4e86\u200b\uff0c\u200b\u56e0\u4e3a\u200b[1,3] \u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e86\u200b\u4e24\u4e2a\u200b\nleft: 1 mid: 2 cnt: 1 right: 3\nleft: 1 mid: 1 cnt: 0 right: 2\n1\n</code></pre>"},{"location":"tools/editor/","title":"editor","text":""},{"location":"tools/editor/#c","title":"C++","text":"<p>CLion \u200b\u7a81\u7136\u200b\u53d1\u73b0\u200b\u8f93\u5165\u200b vector \u200b\u4e0d\u200b\u8865\u5168\u200b\u5c16\u62ec\u53f7\u200b\u4e86\u200b\uff0c\u200b\u540e\u6765\u200b\u53d1\u73b0\u200b\u8bbe\u7f6e\u200b\u6210\u200b c11 \u200b\u5c31\u884c\u4e86\u200b\u5373\u200b <code>set(CMAKE_CXX_STANDARD 11)</code></p> <p>\u200b\u65e9\u65e5\u200b\u8fdc\u79bb\u200bM$C++\uff0c\u200b\u65e9\u65e5\u200b\u83b7\u5f97\u200b\u65b0\u751f\u200b\ud83d\ude0b</p> <ul> <li>\u200b\u6559\u7a0b\u200b</li> <li>\u200b\u53ef\u80fd\u200b\u9047\u5230\u200b\u7684\u200b\u95ee\u9898\u200b\u53ca\u200b\u89e3\u51b3\u200b</li> </ul> <p>\u200b\u5173\u95ed\u200b\u51fd\u6570\u53c2\u6570\u200b\u63d0\u793a\u200b(inlay hints) <code>ctrl+shift+p;clangd:toggle inlay hints</code></p> <p>\u200b\u667a\u80fd\u200b\u8865\u5168\u200b\u4e0d\u200b\u628a\u200b\u53c2\u6570\u200b\u586b\u5165\u200b \u200b\u6e90\u200b\u94fe\u63a5\u200b\uff0c\u200b\u5728\u200b <code>setting.json</code> \u200b\u52a0\u5165\u200b </p> <pre><code>\"clangd.arguments\": [\n    \"--function-arg-placeholders=0\"\n],\n</code></pre> \u200b\u8fc7\u65f6\u200b\u7248\u200b <p>\u200b\u4f17\u6240\u5468\u77e5\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200bdevC++\uff0cVisio Studio\uff0cvscode\u200b\u7b49\u7b49\u200b\u5199\u200bC++\uff0c\u200b\u4f46\u662f\u200bvscode\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u8ba9\u200b\u4eba\u200b\u6298\u817e\u200b\u534a\u5929\u200b\u3002\u200b\u4e0b\u9762\u200b\u7ed9\u51fa\u200b\u4e00\u4e2a\u200b\u62ff\u6765\u200b\u5c31\u200b\u7528\u200b\u7684\u200b\u529e\u6cd5\u200b</p> <p>\u200b\u6ce8\u610f\u200b</p> <p>\u200b\u524d\u63d0\u200b\uff1a\u200b\u9700\u8981\u200b\u5b89\u88c5\u200b\u597d\u200b<code>vscode</code>\uff0c<code>mingw64</code></p> <ol> <li> <p>\u200b\u914d\u7f6e\u200b\u6587\u4ef6\u5939\u200b</p> </li> <li> <p>\u200b\u5728\u200b<code>.vscode</code>\u200b\u6587\u4ef6\u5939\u200b\u4e0b\u200b\u521b\u5efa\u200b\u4ee5\u4e0b\u200b\u4e09\u4e2a\u200b\u6587\u4ef6\u200b</p> <ol> <li><code>c_cpp_properties.json</code></li> <li><code>launch.json</code></li> <li><code>tasks.json</code></li> </ol> </li> <li> <p>\u200b\u590d\u5236\u7c98\u8d34\u200b\u4ee5\u4e0b\u200b</p> c_cpp_properties.jsonlaunch.jsontask.json <pre><code>{\n\"configurations\": [\n    {\n        \"name\": \"Win32\",\n        \"includePath\": [\n            \"${workspaceFolder}/**\"\n        ],\n        \"defines\": [\n            \"_DEBUG\",\n            \"UNICODE\",\n            \"_UNICODE\"\n        ],\n        \"compilerPath\": \"D:/C/vscode/gcc/mingw64/bin/g++.exe\",//\u200b\u4f60\u200b\u7684\u200bg++\u200b\u4f4d\u7f6e\u200b\n        \"cStandard\": \"gnu17\",\n        \"cppStandard\": \"gnu++14\",\n        \"intelliSenseMode\": \"windows-gcc-x64\"\n    }\n    ],\n\"version\": 4\n}\n</code></pre> <pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n    {\n        \"name\": \"(gdb) \u200b\u5185\u90e8\u200b\u7ec8\u7aef\u200b\u542f\u52a8\u200b\",\n        \"type\": \"cppdbg\",\n        \"request\": \"launch\",\n        \"program\": \"${workspaceFolder}\\\\exe\\\\${fileBasenameNoExtension}.exe\",//\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u8bf7\u200b\u67e5\u770b\u200bgcc/g++\u200b\u7684\u200b\u624b\u518c\u200b\n        \"args\": [],\n        \"stopAtEntry\": true,\n        \"cwd\": \"${fileDirname}\",\n        \"environment\": [],\n        \"externalConsole\": false,\n\n        \"MIMode\": \"gdb\",\n        \"miDebuggerPath\": \"D:\\\\C\\\\vscode\\\\gcc\\\\mingw64\\\\bin\\\\gdb.exe\",\n        //\u200b\u4f60\u200b\u7684\u200bgdb\u200b\u4f4d\u7f6e\u200b\n        \"setupCommands\": [\n            {\n                \"description\": \"\u200b\u4e3a\u200b gdb \u200b\u542f\u7528\u200b\u6574\u9f50\u200b\u6253\u5370\u200b\",\n                \"text\": \"-enable-pretty-printing\",\n\n                \"ignoreFailures\": true\n            },\n            {\n                \"description\": \"\u200b\u5c06\u200b\u53cd\u6c47\u7f16\u200b\u98ce\u683c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b Intel\",\n                \"text\": \"-gdb-set disassembly-flavor intel\",\n                \"ignoreFailures\": true\n            }\n        ]\n    },\n    ]\n}\n</code></pre> <pre><code>{\n\"tasks\": [\n\n    {\n        \"type\": \"cppbuild\",\n        \"label\": \"g++.exe \",\n        \"command\": \"D:/C/vscode/gcc/mingw64/bin/g++.exe\",//\u200b\u5bf9\u5e94\u200b\u4f60\u200b\u7684\u200bg++\u200b\u4f4d\u7f6e\u200b\n        \"args\": [\n            \"-fdiagnostics-color=always\",\n            \"-g\",\n            \"${file}\",\n            \"-o\",\n            \"${workspaceFolder}\\\\exe\\\\${fileBasenameNoExtension}.exe\"\n        ],\n        \"options\": {\n            \"cwd\": \"D:/C/vscode/gcc/mingw64/bin\"\n        },\n        \"problemMatcher\": [\n            \"$gcc\"\n        ],\n        \"group\": {\n            \"kind\": \"build\",\n            \"isDefault\": true\n        },\n        \"detail\": \"\u200b\u8c03\u8bd5\u5668\u200b\u751f\u6210\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002\"\n    }\n    ],\n    \"version\": \"2.0.0\"\n}\n</code></pre> </li> <li> <p>\u200b\u5728\u200b<code>sourcecode</code>\u200b\u6587\u4ef6\u5939\u200b\u5199\u200b\u6e90\u4ee3\u7801\u200b\u5373\u53ef\u200b</p> </li> </ol>"},{"location":"tools/editor/#markdown-preview-enhanced","title":"markdown preview enhanced","text":"<ul> <li>\u200b\u6253\u5370\u200b\u80cc\u666f\u200b\uff08\u200b\u8ba9\u200b\u4ee3\u7801\u200b\u5757\u200b\u80cc\u666f\u200b\u4e3a\u200b\u7070\u8272\u200b\uff09 \u200b\u6559\u7a0b\u200b</li> </ul>"},{"location":"tools/editor/#vim","title":"VIM","text":"<p>edit keys</p> <ul> <li>visio block\u200b\u540e\u200b\u8fdb\u5165\u200binsert Shift-i</li> <li>undo all the changes on a line, type U</li> <li>replace steadily R</li> <li>changes to the end C / D</li> <li>put before the cursor P</li> <li>delete the char under cursor and enter insert mode s, and S or CC is the whole line </li> <li>search the word under cursor forward/backward * # and can use 4* to use number</li> </ul> <p>move keys</p> <ul> <li>move to the beginning of sentence/paragraph/block ( { [in normal</li> </ul> <p>file keys</p> <ul> <li>show where you are in a file  <li>jump to file under cursor  <li>retrieves disk file FILENAME and puts it below the cursor position :r FILENAME </li> <p>buffer and windows</p> <ul> <li>list all open buffers ls</li> <li>switch to a specific buffer :b N</li> <li>change buffer bn/bp or :buffer (press tab) buffer next/previous</li> <li>toggles between the last two files you edited .  press ctrl and 6 or ctrl shift 6 <p>vim\u200b\u548c\u200b\u7cfb\u7edf\u200b\u526a\u8d34\u677f\u200b\u4ea4\u4e92\u200b</p>"},{"location":"tools/git/","title":"git\u200b\u4f7f\u7528","text":"<p>\u200b\u63a8\u8350\u200b</p> <p>\u200b\u73a9\u6e38\u620f\u200b\u5b66\u200bgit</p> <p>git\u200b\u547d\u4ee4\u200b\u5c0f\u8d34\u58eb\u200b</p> <p>github\u200b\u5b98\u65b9\u200b\u6587\u6863\u200b</p> <p>gitignore\u200b\u6587\u6863\u200b</p> <p>\u200b\u7cbe\u901a\u200bGit\uff08\u200b\u7b2c\u200b2\u200b\u7248\u200b\uff09Soctt Chacon    Ben Straub</p> <p>linux\u200b\u547d\u4ee4\u200b</p> <p>\u200b\u6253\u6d88\u200b\u5b66\u4e60\u200b\u5174\u8da3\u200b\u7684\u200b\u4e00\u4e2a\u200b\u56e0\u7d20\u200b\u662f\u200b\u7f51\u7edc\u8fde\u63a5\u200b\u95ee\u9898\u200b\uff0c\u200b\u7b49\u200b\u5f04\u200b\u660e\u767d\u200b\uff0c\u200b\u7cbe\u529b\u200b\u4e5f\u200b\u8017\u200b\u6ca1\u200b\u4e86\u200b </p>"},{"location":"tools/git/#_1","title":"\u57fa\u7840\u200b\u547d\u4ee4","text":"<p><code>git staus -s</code></p> <ul> <li>\u200b\u5de6\u8fb9\u200b\u6807\u8bb0\u200b\uff1a\u200b\u662f\u5426\u200b\u6682\u5b58\u200b</li> <li>\u200b\u53f3\u8fb9\u200b\u6807\u8bb0\u200b\uff1a\u200b\u662f\u5426\u200b\u4fee\u6539\u200b</li> </ul> <pre><code> M readme.md\n?? latex-tutorial-chinese-master/\n</code></pre> <p><code>git rm --cached readme.md</code></p> <ul> <li>\u200b\u4ece\u200b\u6682\u5b58\u533a\u200b\u79fb\u9664\u200b\u3002\u200b\u548c\u200b<code>git restore --staged &lt;file&gt;</code>\u200b\u5f88\u200b\u50cf\u200b</li> <li>(\u200b\u56e0\u4e3a\u200b--cached\u200b\u548c\u200b--staged\u200b\u662f\u200b\u540c\u4e49\u8bcd\u200b)</li> </ul> <p><code>git mv from.md to.md</code> \u200b\u91cd\u547d\u540d\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200b3\u200b\u6761\u200b\u6307\u4ee4\u200b</p> <pre><code>$ mv from.md to.md\n$ git rm from.md\n$ git add to.md\n</code></pre> <p><code>git diff</code> </p> <ul> <li>\u200b\u4e0d\u5e26\u200b\u53c2\u6570\u200b\uff1a\u200b\u5de5\u4f5c\u200b\u76ee\u5f55\u200b\u7684\u200b\u5185\u5bb9\u200b\u548c\u200b\u6682\u5b58\u533a\u200b\u6bd4\u8f83\u200b</li> <li>\u200b\u5e26\u200b\u53c2\u6570\u200b\uff1a\u200b\u6682\u5b58\u533a\u200b\u548c\u200b\u4e0a\u200b\u4e00\u6b21\u200b\u63d0\u4ea4\u200b\u6bd4\u8f83\u200b eg\uff1a<code>git diff --stage(\u200b\u6216\u8005\u200b--cached)</code></li> </ul> <p><code>git log --pretty=\"%h - %an,%ar : %s\"</code></p> <ul> <li>\u200b\u6682\u65f6\u200b\u81ea\u5b9a\u4e49\u200b\u683c\u5f0f\u200b</li> </ul> <p><code>git log --pretty=format:\"%h - %an,%ar : %s\"</code></p> <ul> <li>\u200b\u6c38\u4e45\u200b\u81ea\u5b9a\u4e49\u200b\u8f93\u51fa\u200b\u683c\u5f0f\u200b</li> </ul> \u200b\u547d\u4ee4\u200b \u200b\u8bf4\u660e\u200b git commit -m \"test of git commit message\" git commit -a -m \"change something\" \u200b\u8df3\u8fc7\u200bgit add\u200b\u76f4\u63a5\u200b\u63d0\u4ea4\u200b git log -p -2 \u200b\u67e5\u770b\u200b\u6700\u8fd1\u200b2\u200b\u6b21\u200b\u63d0\u4ea4\u200b\u6240\u200b\u5f15\u5165\u200b\u7684\u200b\u5dee\u5f02\u200b\uff08-2 -p\u200b\u6ca1\u6709\u200b\u987a\u5e8f\u200b\u8981\u6c42\u200b\uff09 git log --stat \u200b\u67e5\u770b\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b git log nameA nameB --not nameC \u200b\u5728\u200bA\u200b\u6216\u200bB\u200b\u4e2d\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u200b\u5728\u200bC\u200b\u4e2d\u200b\u7684\u200b\u63d0\u4ea4"},{"location":"tools/git/#_2","title":"\u8fdc\u7a0b\u200b\u4ed3\u5e93","text":"<p>\u200b\u67e5\u770b\u200b\u8fdc\u7a0b\u200b</p> \u200b\u547d\u4ee4\u200b \u200b\u8bf4\u660e\u200b git remote -v git remote show gitexer git remote add gitexer git@github.com:beautifulwq/gitexercise.git"},{"location":"tools/git/#_3","title":"\u8fdc\u7a0b\u200b\u64cd\u4f5c","text":"\u547d\u4ee4\u200b \u200b\u8bf4\u660e\u200b git fetch gitexer \u200b\u628a\u200b\u672c\u5730\u200b\u6ca1\u6709\u200b\u7684\u200b\u53d6\u200b\u8fc7\u6765\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u200b\u5408\u5e76\u200b git pull git push remote-name branch-name \u200b\u672c\u5730\u200b\u5230\u200b\u8fdc\u7a0b\u200b git remote rename old new \u200b\u540c\u65f6\u200b\u4f1a\u6539\u200b\u8fdc\u7a0b\u200b\u5206\u652f\u200b\u540d\u79f0\u200b git remote rm"},{"location":"tools/git/#tag","title":"tag","text":"\u547d\u4ee4\u200b \u200b\u8bf4\u660e\u200b git tag \u200b\u67e5\u770b\u200b\u6807\u8bb0\u200b git tag -a v0.1 \u200b\u6253\u200b\u6807\u8bb0\u200b git show v0.1 show git tag -a v0.09 a3nb3ah1(\u200b\u6821\u9a8c\u200b\u548c\u200b) \u200b\u8865\u52a0\u200b\u6807\u8bb0\u200b git push gitexer v0.1 \u200b\u63a8\u9001\u200b\u6807\u7b7e\u200b git push gitexer --tags \u200b\u63a8\u9001\u200b\u6240\u6709\u200b\u6807\u7b7e"},{"location":"tools/git/#_4","title":"\u522b\u540d","text":"\u547d\u4ee4\u200b \u200b\u8bf4\u660e\u200b git config --global alias.st status git st git config --global alias.last 'log -1 HEAD' git last"},{"location":"tools/git/#_5","title":"\u5206\u652f","text":"\u547d\u4ee4\u200b \u200b\u8bf4\u660e\u200b git branch \u200b\u67e5\u770b\u200b\u5206\u652f\u200b git branch -v git branch --merged \u200b\u67e5\u770b\u200b\u5df2\u7ecf\u200b\u5408\u5e76\u200b\u4e86\u200b\u7684\u200b\u5206\u652f\u200b git branch --no-merged \u200b\u67e5\u770b\u200b\u6ca1\u200b\u5408\u5e76\u200b\u7684\u200b\u5206\u652f\u200b git checkout \u200b\u5207\u6362\u200b\u5206\u652f\u200b git branch testing \u200b\u521b\u5efa\u200b\u5206\u652f\u200b git checkout -b hotfix \u200b\u76f8\u5f53\u4e8e\u200bgit branch hotfix git checkout hotfix git branch -d hotfix \u200b\u5220\u9664\u200bbranch <p>git checkout &amp;&amp; git switch</p> <p>\u200b\u5916\u90e8\u200b\u94fe\u63a5\u200b</p>"},{"location":"tools/git/#rebase","title":"\u53d8\u57fa\u200b rebase","text":"<p>\u200b\u53d8\u57fa\u65f6\u200b\u7684\u200b <code>reword</code> \u200b\u548c\u200b <code>edit</code>\u200b\u7684\u200b\u533a\u522b\u200b</p> <ul> <li><code>reword</code> \u200b\u53ea\u200b\u6539\u53d8\u200bcommit\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4e0d\u200b\u6539\u53d8\u200b\u6587\u4ef6\u200b\u7684\u200b\u4fee\u6539\u200b\u5185\u5bb9\u200b</li> <li><code>edit</code> \u200b\u4e24\u8005\u200b\u90fd\u200b\u6539\u53d8\u200b</li> </ul> <p>\u200b\u597d\u5904\u200b\u633a\u200b\u591a\u200b\uff0c\u200b\u5efa\u8bae\u200b\u770b\u4e66\u200b\u4e0a\u200b\u7684\u200b\u56fe\u200b\u3002\u200b\u63a8\u8350\u200b\u5728\u200b\u672c\u5730\u200b\u53d8\u57fa\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u8981\u200b\u5bf9\u200b\u5df2\u7ecf\u200b\u63a8\u9001\u200b\u5230\u200b\u8fdc\u7a0b\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u63d0\u4ea4\u200b\u8fdb\u884c\u200b\u53d8\u57fa\u200b\u3002</p> <p>\u200b\u6211\u200b\u7684\u200b\u7406\u89e3\u200b\u662f\u200b\u53ef\u4ee5\u200b\u628a\u200b\u5e76\u884c\u200b\u7684\u200b\u5206\u652f\u200b\u5408\u5e76\u200b\u6210\u200b\u770b\u8d77\u6765\u200b\u7ebf\u6027\u200b\u8fdb\u884c\u200b\u7684\u200b\uff0c\u200b\u66f4\u52a0\u200b\u4eba\u6027\u5316\u200b</p> <p><code>git pull --rebase</code>\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u89e3\u51b3\u200b\u6709\u4eba\u200b\u5728\u200b\u8fdc\u7a0b\u200b\u53d8\u57fa\u200b\uff0c\u200b\u4f60\u200b\u53c8\u200b\u8981\u62c9\u53d6\u200b\u7684\u200b\u95ee\u9898\u200b </p>"},{"location":"tools/git/#git","title":"git \u200b\u4ea4\u4e92\u5f0f","text":"\u547d\u4ee4\u200b \u200b\u8bf4\u660e\u200b git add -i \u200b\u8fdb\u5165\u200b\u4ea4\u4e92\u5f0f"},{"location":"tools/git/#patch","title":"\u8865\u4e01\u200b patch","text":"<p>git add -patch|\u200b\u8fdb\u5165\u200b\u8865\u4e01\u200b\u6a21\u5f0f\u200b\u6216\u8005\u200b\u5148\u8fdb\u200b\u4ea4\u4e92\u5f0f\u200b\u518d\u8fdb\u200b\u8865\u4e01\u200b\u6a21\u5f0f\u200b</p>"},{"location":"tools/git/#stash","title":"\u50a8\u85cf\u200b stash","text":"\u547d\u4ee4\u200b \u200b\u8bf4\u660e\u200b git stash \u200b\u50a8\u85cf\u200b git stash list \u200b\u67e5\u770b\u200b\u50a8\u85cf\u200b git stash apply \u200b\u5e94\u7528\u200b\u6700\u65b0\u200b\u7684\u200b\u4e00\u6b21\u200b,\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u52a0\u200b\u53c2\u6570\u200b\u6765\u200b\u6307\u5b9a\u200b\u67d0\u200b\u4e00\u6b21\u200b git stash drop stash@{0} \u200b\u5220\u9664\u200b\u50a8\u85cf\u200b git stash --keep-index \u200b\u4e0d\u200b\u50a8\u85cf\u200b\u5df2\u7ecf\u200bgit add\u200b\u7684\u200b\u5185\u5bb9\u200b git stash --include-untracked \u200b\u540c\u65f6\u200b\u50a8\u85cf\u200b\u672a\u200b\u8ddf\u8e2a\u200b\u7684\u200b\u6587\u4ef6\u200b git stash -u \u200b\u540c\u200b\u4e0a\u200b git stash branch newbrname \u200b\u4ece\u200b\u50a8\u85cf\u200b\u521b\u5efa\u200b\u5206\u652f\u200b\uff08\u200b\u7701\u65f6\u7701\u529b\u200b\uff09"},{"location":"tools/git/#clean","title":"\u6e05\u7406\u200b\u5de5\u4f5c\u200b\u76ee\u5f55\u200b clean","text":"\u547d\u4ee4\u200b \u200b\u8bf4\u660e\u200b git clean \u200b\u5220\u9664\u200b\u6240\u6709\u200b\u672a\u200b\u8ddf\u8e2a\u200b\u7684\u200b\u6587\u4ef6\u200b git clean -d -n \u200b\u9884\u89c8\u200b\u4f1a\u200b\u5220\u9664\u200b\u54ea\u4e9b\u200b git clean -x \u200b\u8fde\u200b.gitignore\u200b\u91cc\u200b\u5ffd\u7565\u200b\u7684\u200b\u6587\u4ef6\u200b\u4e5f\u200b\u4f1a\u200b\u5220\u9664\u200b <p>Info</p> <ul> <li>\u200b\u53ef\u4ee5\u200b\u5148\u200b\u7528\u200b<code>-n</code>\u200b\u53c2\u6570\u200b\u5148\u200b\u9884\u89c8\u200b\u5220\u9664\u200b\u54ea\u4e9b\u200b\u6587\u4ef6\u200b</li> <li>\u200b\u53ef\u4ee5\u200b\u7528\u200b<code>-i</code>\u200b\u53c2\u6570\u200b\u4ea4\u4e92\u5f0f\u200b\u5730\u200b\u5220\u9664\u200b</li> </ul>"},{"location":"tools/git/#_6","title":"\u4fee\u6539\u200b\u63d0\u4ea4\u200b\u4fe1\u606f","text":"\u547d\u4ee4\u200b \u200b\u8bf4\u660e\u200b git commit --amend \u200b\u4fee\u6539\u200b\u6700\u8fd1\u200b\u4e00\u6b21\u200b\u63d0\u4ea4\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4f46\u662f\u200b\u4f1a\u200b\u6539\u53d8\u200bsha1\u200b\u503c\u200b\uff0c\u200b\u7c7b\u4f3c\u200b\u4e00\u6b21\u200b\u5fae\u578b\u200b\u53d8\u57fa\u200b <p><code>git cherry-pick</code>\u200b\u9009\u62e9\u6027\u200b\u7684\u200brebase</p> :x \u200b\u548c\u200b :wq \u200b\u7684\u200b\u533a\u522b\u200b <p>(1) :wq \u200b\u5f3a\u5236\u6027\u200b\u5199\u5165\u200b\u6587\u4ef6\u200b\u5e76\u200b\u9000\u51fa\u200b\uff08\u200b\u5b58\u76d8\u200b\u5e76\u200b\u9000\u51fa\u200b write and quite\uff09\u3002\u200b\u5373\u4f7f\u200b\u6587\u4ef6\u200b\u6ca1\u6709\u200b\u88ab\u200b\u4fee\u6539\u200b\u4e5f\u200b\u5f3a\u5236\u200b\u5199\u5165\u200b\uff0c\u200b\u5e76\u200b\u66f4\u65b0\u200b\u6587\u4ef6\u200b\u7684\u200b\u4fee\u6539\u200b\u65f6\u95f4\u200b\u3002 (2) :x \u200b\u5199\u5165\u200b\u6587\u4ef6\u200b\u5e76\u200b\u9000\u51fa\u200b\u3002\u200b\u4ec5\u5f53\u200b\u6587\u4ef6\u200b\u88ab\u200b\u4fee\u6539\u200b\u65f6\u624d\u200b\u5199\u5165\u200b\uff0c\u200b\u5e76\u200b\u66f4\u65b0\u200b\u6587\u4ef6\u200b\u4fee\u6539\u200b\u65f6\u95f4\u200b\uff1b\u200b\u5426\u5219\u200b\u4e0d\u4f1a\u200b\u66f4\u65b0\u200b\u6587\u4ef6\u200b\u4fee\u6539\u200b\u65f6\u95f4\u200b\u3002 \u200b\u8fd9\u200b\u4e24\u8005\u200b\u4e00\u822c\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u6ca1\u4ec0\u4e48\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff0c\u200b\u4f46\u662f\u200b\u5728\u200b\u7f16\u7a0b\u200b\u65b9\u9762\u200b\uff0c\u200b\u5bf9\u200b\u7f16\u8f91\u200b\u6e90\u6587\u4ef6\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4ea7\u751f\u200b\u91cd\u8981\u200b\u5f71\u54cd\u200b\u3002\u200b\u56e0\u4e3a\u200b\u6587\u4ef6\u200b\u5373\u4f7f\u200b\u6ca1\u6709\u200b\u4fee\u6539\u200b\uff0c\":wq\" \u200b\u5f3a\u5236\u200b\u66f4\u65b0\u200b\u6587\u4ef6\u200b\u7684\u200b\u4fee\u6539\u200b\u65f6\u95f4\u200b\uff0c \u200b\u8fd9\u6837\u200b\u4f1a\u200b\u8ba9\u200b make \u200b\u7f16\u8bd1\u200b\u6574\u4e2a\u200b\u9879\u76ee\u200b\u65f6\u200b\u4ee5\u4e3a\u200b\u6587\u4ef6\u200b\u88ab\u200b\u4fee\u6539\u200b\u8fc7\u200b\u4e86\u200b\uff0c\u200b\u7136\u540e\u200b\u5c31\u200b\u5f97\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\u94fe\u63a5\u200b\u751f\u6210\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u3002\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4ea7\u751f\u200b\u8ba9\u200b\u4eba\u200b\u8bef\u89e3\u200b\u7684\u200b\u540e\u679c\u200b\uff0c\u200b\u5f53\u7136\u200b\u4e5f\u200b\u4ea7\u751f\u200b\u4e86\u200b\u4e0d\u5fc5\u8981\u200b\u7684\u200b\u7cfb\u7edf\u8d44\u6e90\u200b\u82b1\u9500\u200b\u3002\u200b\u4e0d\u8fc7\u200b\u50cf\u662f\u200b\u7248\u672c\u63a7\u5236\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u4e00\u822c\u200b\u9996\u9009\u200b\u8fd8\u662f\u200b\u6bd4\u8f83\u200b\u6587\u4ef6\u200b\u5185\u5bb9\u200b\uff0c\u200b\u4fee\u6539\u200b\u65f6\u95f4\u200b\u4e00\u822c\u200b\u4e0d\u200b\u52a0\u4ee5\u200b\u7406\u4f1a\u200b\u3002</p> <p>revert vs amend</p>"},{"location":"tools/git/#gcm","title":"gcm","text":"<p>git credential manager\u200b\u591a\u7528\u6237\u200b\uff1a\u200b\u67e5\u200b\u4e86\u200b\u6587\u6863\u200b\u4e4b\u540e\u200b\uff0c\u200b\u6392\u9664\u200b\u4e86\u200b.gitconfig \u200b\u6587\u4ef6\u200b\uff0c\u200b\u6700\u540e\u200b\u662f\u200b\u5728\u200b \u200b\u63a7\u5236\u9762\u677f\u200b\u2014-\u200b\u7528\u6237\u200b\u8d26\u6237\u200b\u2014Windows\u200b\u7ba1\u7406\u200b\u51ed\u636e\u200b\u91cc\u200b\u5220\u9664\u200b\u4e86\u200b\u591a\u4f59\u200b\u7684\u200b\u8d26\u53f7\u200b \u200b\u53c2\u8003\u200b</p>"},{"location":"tools/linux/","title":"Linux tricks","text":""},{"location":"tools/linux/#dotfiles","title":"dotfiles","text":"<p>\u200b\u7ecf\u5e38\u200b\u91cd\u88c5\u7cfb\u7edf\u200b/\u200b\u865a\u62df\u673a\u200b\u7684\u200b\u670b\u53cb\u200b\u4eec\u200b\u53ef\u80fd\u200b\u7ecf\u5e38\u200b\u9047\u5230\u200b\u5b89\u88c5\u200b <code>vimrc</code> \u200b\u7b49\u200b\u914d\u7f6e\u200b\u7684\u200b\u82e6\u607c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8fd9\u4e2a\u200b\u5de5\u5177\u200b\u53ef\u4ee5\u200b\u5e2e\u52a9\u200b\u4f60\u200b </p> <ul> <li>\u200b\u4ed3\u5e93\u200b\u94fe\u63a5\u200b</li> <li>quick start</li> </ul> <p>\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u914d\u5408\u200b puppet \u200b\u5feb\u901f\u200b\u5f00\u8352\u200b\u65b0\u673a\u200b\uff0c\u200b\u6bd4\u5982\u200b\u751f\u6210\u200b\u7528\u6237\u200b\u7b49\u200b</p>"},{"location":"tools/linux/#ssh","title":"SSH","text":"<p>\u200b\u5047\u8bbe\u200b\u7528\u6237\u200b\u662f\u200b <code>wqq</code></p> <p>part1\uff1a\u200b\u751f\u6210\u200b\u5e76\u200b\u4e0a\u4f20\u200b\u5bc6\u94a5\u200b <pre><code>ssh-keygen -t rsa\n# this use default loacation ~/.ssh/id_rsa.pub\nssh-copy-id wqq@server_ip \n# or use a specific public_key\n# ssh-copy-id -i path/public_key user@server_ip\n</code></pre></p> <p>part2\uff1a\u200b\u786e\u4fdd\u200b\u5bc6\u94a5\u200b\u767b\u5f55\u200b\u6743\u9650\u200b\u6253\u5f00\u200b\uff0c\u200b\u5927\u90e8\u5206\u200b\u90fd\u200b\u662f\u200b <code>/etc/ssh/sshd_config</code>\uff0c\uff08\u200b\u4e0d\u200b\u786e\u5b9a\u200b\u53ef\u4ee5\u200b\u7528\u200b <code>locate sshd_config</code> \u200b\u627e\u200b\u4e00\u4e0b\u200b\uff09 <pre><code>PubkeyAuthentication yes\nPasswordAuthentication yes\n# if you want to allow password authentication\n</code></pre></p> <p>part3\uff1a\u200b\u91cd\u542f\u200b ssh \u200b\u670d\u52a1\u200b <code>sudo systemctl restart ssh</code></p> <p>\u200b\u53e6\u5916\u200b\u6211\u200b\u53d1\u73b0\u200b\u8fd8\u200b\u6709\u4e9b\u200b\u6ce8\u610f\u200b</p> <ul> <li><code>authorized_keys</code> \u200b\u8981\u200b\u80fd\u200b\u88ab\u200b wqq \u200b\u81ea\u5df1\u200b\u8bfb\u200b</li> <li><code>/home/wqq</code> \u200b\u522b\u4eba\u200b\u4e0d\u80fd\u200b\u6709\u200b\u5199\u200b\u7684\u200b\u6743\u9650\u200b\uff0c\u200b\u5c31\u662f\u200b user group other \u200b\u4e2d\u200b\u7684\u200b other \u200b\u4e0d\u80fd\u200b\u6709\u200b w \u200b\u6743\u9650\u200b</li> </ul> <p>\u200b\u51fa\u9519\u200b\u4e86\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u7ffb\u200b\u65e5\u5fd7\u200b</p> <p>Ubuntu, Debian:</p> <ul> <li>SSH server logs: <code>/var/log/auth.log</code></li> <li>SSH client logs: <code>/var/log/syslog</code></li> </ul> <p>eg: <code>Mar 17 14:06:36 ub sshd[15869]: Authentication refused: bad ownership or modes for directory /home/wqq</code></p>"},{"location":"tools/linux/#io","title":"IO","text":"<p>\u200b\u540c\u6b65\u200b\uff08\u200b\u62f7\u8d1d\u200b\uff09IO\uff1a\u200b\u5047\u5982\u200b\u662f\u200b\u540c\u6b65\u200b\u7684\u200b read\uff0c\u200b\u76f4\u5230\u200b\u8bfb\u5b8c\u200b\uff08\u200b\u5185\u6838\u200b\u7a7a\u95f4\u200b\u62f7\u5230\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\uff09 read \u200b\u624d\u200b\u8fd4\u56de\u200b\uff0c</p> <p>\u200b\u5f02\u6b65\u200b\uff08\u200b\u62f7\u8d1d\u200b\uff09IO\uff1aread \u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\uff0c\u200b\u771f\u6b63\u200b\u62f7\u8d1d\u200b\u5b8c\u4f1a\u200b\u4f7f\u7528\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u901a\u77e5\u200b\u7528\u6237\u200b</p> <p>eg\uff1a \u200b\u70e7\u6c34\u200b\u540c\u6b65\u200b\uff0c\u200b\u4e00\u76f4\u200b\u770b\u6c34\u5f00\u200b\u4e86\u200b\u518d\u200b\u5e72\u200b\u522b\u7684\u200b\uff1b\u200b\u70e7\u6c34\u200b\u5f02\u6b65\u200b\uff0c\u200b\u6c34\u5f00\u200b\u4e86\u200b\u4f1a\u200b\u54cd\u94c3\u200b\uff0c\u200b\u544a\u8bc9\u200b\u6211\u5f00\u200b\u4e86\u200b</p> <p>\u200b\u53c2\u8003\u200b</p>"},{"location":"tools/linux/#cheatsheet","title":"cheatsheet","text":"<ul> <li><code>adduser</code> is more convenient than <code>useradd</code></li> </ul>"},{"location":"tools/linux/#others","title":"others","text":"<p><code>some failed command &gt; failed.txt 2&gt;&amp;1</code> \u200b\u8fd9\u4e2a\u200b\u662f\u200b\u628a\u200b\u9519\u8bef\u200b\u91cd\u5b9a\u5411\u200b\u5230\u200b <code>failed.txt</code>\uff0c\u200b\u4e3a\u4ec0\u4e48\u200b\u4e0d\u80fd\u200b <code>some failed command 2&gt;&amp;1 &gt; failed.txt</code>\uff0c\u200b\u6211\u200b\u7684\u200b\u7406\u89e3\u200b\u5982\u4e0b\u200b</p> <p>\u200b\u6b63\u786e\u200b\u7684\u200b\u505a\u6cd5\u200b\u4e3a\u4ec0\u4e48\u200b\u884c\u200b</p> <pre><code>1 ----&gt; screen\n1 ----&gt; txt\n2 \u200b\u7684\u200b\u5185\u5bb9\u200b\u6d41\u5411\u200b 1 \u200b\u6240\u6307\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b txt\n</code></pre> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u540e\u8005\u200b\u4e0d\u884c\u200b</p> <pre><code>2 \u200b\u7684\u200b\u5185\u5bb9\u200b\u6d41\u5411\u200b 1 \u200b\u6240\u6307\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b screen\n1 ----&gt; txt \u200b\u6b64\u65f6\u200b\u53ea\u200b\u6539\u53d8\u200b 1 \u200b\u7684\u200b\u5185\u5bb9\u200b\u6d41\u5411\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u4e0d\u4f1a\u200b\u6539\u53d8\u200b 2 \u200b\u7684\u200b\n</code></pre> <p>\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5199\u6210\u200b <code>some failed command &amp;&gt; failed.txt</code> \u200b\u6216\u8005\u200b <code>some failed command &amp;&gt;&gt; failed.txt</code>\uff0c\u200b\u540e\u8005\u200b\u5728\u200b bash4 \u200b\u5f00\u59cb\u200b\u53ef\u4ee5\u200b</p>"},{"location":"tools/typst/","title":"typst","text":""},{"location":"tools/typst/#demo","title":"demo","text":"<p>\u200b\u8d77\u56e0\u200b\u662f\u200b\u4e24\u4e2a\u200b\u5fb7\u56fd\u4eba\u200b\u5bf9\u200b LaTex \u200b\u4e0d\u200b\u6ee1\u610f\u200b\uff0c\u200b\u7136\u540e\u200b\u5f04\u200b\u51fa\u200b\u4e86\u200b\u4e00\u4e2a\u200b typst</p> <p>\u200b\u5b98\u65b9\u200b\u7684\u200b\u7f51\u9875\u200b\u7aef\u200b\u6e32\u67d3\u200b\u4f3c\u4e4e\u200b\u6bd4\u200b\u6211\u200b\u672c\u5730\u200b\u5feb\u200b\ud83e\udd23</p> <p>\u200b\u597d\u5904\u200b\uff1a\u200b\u786e\u5b9e\u200b\u5982\u200b\u6587\u6863\u200b\u6240\u8bf4\u200b\u80fd\u200b\u5feb\u901f\u200b\u4e0a\u200b\u624b\u200b\uff0c\u200b\u4e0d\u7528\u200b\u50cf\u200b latex \u200b\u4e0a\u6765\u200b\u5148\u200b\u8bb0\u4f4f\u200b\u6587\u6863\u200b\u5f15\u5165\u200b\u547d\u4ee4\u200b</p> <p>\u200b\u4e0d\u8db3\u200b\uff1a\u200b\u4e2d\u6587\u200b\u9996\u200b\u884c\u200b\u7f29\u8fdb\u200b\u9700\u8981\u200b\u4e00\u4e9b\u200b trick\uff0c\u200b\u5e0c\u671b\u200b\u672a\u6765\u200b\u80fd\u200b\u52a0\u5165\u200b\u8fd9\u4e2a\u200b\u529f\u80fd\u200b\uff082024/1/21\uff09</p> <p>\u200b\u9ed8\u8ba4\u200b\u5b57\u4f53\u200b\u662f\u200b Linux Libertine</p>"},{"location":"tools/typst/#sheet","title":"sheet","text":"<p><code>set</code> \u200b\u89c4\u5219\u200b\u7c7b\u4f3c\u200b <code>css</code> \u200b\u628a\u200b\u6240\u6709\u200b\u5b9e\u4f8b\u200b\u8bbe\u7f6e\u200b\u7279\u5f81\u200b</p> <ul> <li><code>page</code> \u200b\u7684\u200b <code>flipped</code> <ul> <li>\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b false\uff0c\u200b\u7ed3\u679c\u200b\u4e3a\u200b\u7ad6\u7248\u200b\uff08portrait orientation \u200b\u4eba\u50cf\u753b\u200b\uff09</li> <li>\u200b\u4e3a\u200b true\uff1a \u200b\u8c03\u6574\u200b\u4e3a\u200b\u6a2a\u677f\u200b\uff08landscape orientation \u200b\u98ce\u666f\u753b\u200b\uff09</li> </ul> </li> </ul> <p>set \u200b\u89c4\u5219\u200b\u65b9\u4fbf\u200b\u8bbe\u7f6e\u200b\u5df2\u6709\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u50cf\u662f\u200b page\uff0cheading \u200b\u7b49\u200b\uff0c\u200b\u4e00\u6b21\u200b\u8c03\u6574\u200b\u597d\u200b\u6240\u6709\u200b\u5143\u7d20\u200b</p> <p>show \u200b\u89c4\u5219\u200b\u5bf9\u200b\u81ea\u5b9a\u4e49\u200b\u5143\u7d20\u200b\u8fdb\u884c\u200b\u8c03\u6574\u200b <code>#show \"WWWQQQ\": wq =&gt; text(font: \"Fira Code\",wq)</code></p> <p>set \u200b\u4f1a\u200b\u8bbe\u7f6e\u200b\u6240\u6709\u200b\u7b26\u5408\u6761\u4ef6\u200b\u7684\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6240\u200b\u4e00\u7ea7\u200b\u6807\u9898\u200b\u548c\u200b\u4e8c\u7ea7\u200b\u6807\u9898\u200b\u6709\u200b\u4e0d\u540c\u200b\u6837\u5f0f\u200b\uff0c\u200b\u5c31\u200b\u4e0d\u200b\u5e94\u8be5\u200b\u7528\u200b set\uff0c\u200b\u5e94\u8be5\u200b\u6539\u7528\u200b show</p> <pre><code>#show: rest =&gt; columns(2,rest)\n\n#set heading(\n  offset: 2\n)\n// \u200b\u540e\u8fb9\u200b\u7684\u200bshow \u200b\u4e0d\u8d77\u4f5c\u7528\u200b\n\n#show heading.where(\n  level: 1\n): it =&gt; block(width: 100%)[\n  #set align(center)\n  #set text(12pt, weight: \"regular\")\n  #smallcaps(it.body)\n]\n\n#show heading.where(\n  level: 2\n): it =&gt; text(\n  size: 11pt,\n  weight: \"regular\",\n  style: \"italic\",\n  smallcaps(it.body)\n)\n\n\n= Introduction\n#lorem(300)\n\n== second\n#lorem(20)\n\n= Related Work\n#lorem(200)\n</code></pre>"},{"location":"tools/typst/#aligncenterbottom","title":"align(center+bottom)","text":""}]}